<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GeekPlux</title>
  <subtitle>知行合一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://geekplux.com/"/>
  <updated>2016-11-02T14:40:20.000Z</updated>
  <id>http://geekplux.com/</id>
  
  <author>
    <name>GeekPlux</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vega-Lite: A Grammar of Interactive Graphics</title>
    <link href="http://geekplux.com/2016/11/02/vega-lite-a-grammar-of-interactive-graphics.html"/>
    <id>http://geekplux.com/2016/11/02/vega-lite-a-grammar-of-interactive-graphics.html</id>
    <published>2016-11-02T08:16:16.000Z</published>
    <updated>2016-11-02T14:40:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在 InfoVis 2016 上，<a href="http://idl.cs.washington.edu/" target="_blank" rel="external">UW 交互数据实验室</a> 提出了一种新的交互数据可视化语法——Vega-Lite，获得了今年的 best paper，本文将根据其论文从多个角度介绍 Vega-Lite。<a href="http://idl.cs.washington.edu/papers/vega-lite/" target="_blank" rel="external">论文地址</a></p>
</blockquote>
<h2 id="什么是-Vega-Lite？"><a href="#什么是-Vega-Lite？" class="headerlink" title="什么是 Vega-Lite？"></a>什么是 Vega-Lite？</h2><p>简而言之，<a href="https://vega.github.io/vega-lite/" target="_blank" rel="external">Vega-Lite</a> 是一种数据可视化的高级语法，能够快速定义一些基本的交互式数据可视化。</p>
<p>如果你听说过 <a href="https://vega.github.io/vega/" target="_blank" rel="external">Vega</a>，那么光看 Vega-Lite 的名字就不难想到它们的关系。Vega-Lite 就是编译成 Vega 的更高级图形语法。</p>
<p>如下图所示，只要右边寥寥数行代码，就能定义一个散点图：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/sctterplot1.png" alt=""></p>
<h2 id="为什么要提出-Vega-Lite"><a href="#为什么要提出-Vega-Lite" class="headerlink" title="为什么要提出 Vega-Lite"></a>为什么要提出 Vega-Lite</h2><p>首先，Vega-Lite 的目标是：</p>
<ul>
<li>通过一种规范来快速的表达你的可视化设计。</li>
<li>提供了简洁的语法和图元便于你快速切换设计。</li>
</ul>
<p>以前的东西做不到吗？其实也不是做不到，只是在有些方面还有很大的提升空间，Vega-Lite 就是在这个方向上很大的一步棋：</p>
<ul>
<li>低等级的可视化语法有更高的自由度，但往往高等级的可视化语言更受偏爱，主要因为其简洁，能快速做出东西，而且能生成低等级的语法供二次开发（Vega-Lite 可以编译成 Vega，而且所有代码都是 JSON 格式）。</li>
<li>低等级的可视化语言没法提供现成的可视化方案（得你自己设计），而高等级的可以直接搜索或推断出适合你的可视化方案，支持在线查看效果（比如用 vega-lite 配套的 Voyager）。</li>
<li>从交互方面来说，现有的高级语法在交互方面比较局限，而低等级语法可能为了定制化还得自己去处理事件回调（例如 D3），这对非专家很不友好且很容易出错。而 Vega-Lite 直接提供更简洁更具表现力的交互（一两行代码就能定义一个交互操作）。</li>
</ul>
<p>为了实现以上的这些愿景，Vega-Lite 主要通过以下方式做出努力：</p>
<ul>
<li><strong>Algebra</strong>  用于将单个 view 合成多 view</li>
<li><strong>Selection</strong> 用于交互选择判定</li>
<li><strong>Transform</strong> 对数据、交互操作转换</li>
<li><strong>Compiler</strong> 编译成 vega 语言，可供二次开发</li>
</ul>
<p>接下来说说它怎么具体实现上面这四个概念的。</p>
<h2 id="Vega-Lite-的具体语法"><a href="#Vega-Lite-的具体语法" class="headerlink" title="Vega-Lite 的具体语法"></a>Vega-Lite 的具体语法</h2><p>可以从两个方面分开介绍，分别是图形方面和交互方面。</p>
<h3 id="Vega-Lite-的具体语法——图形方面"><a href="#Vega-Lite-的具体语法——图形方面" class="headerlink" title="Vega-Lite 的具体语法——图形方面"></a>Vega-Lite 的具体语法——图形方面</h3><h4 id="View-视图"><a href="#View-视图" class="headerlink" title="View 视图"></a>View 视图</h4><p>首先，Vega-Lite 定义一个图形为一个 Unit，所以 Unit 是 Vega-Lite 里图形的最小单位。Unit 的定义是：</p>
<pre><code>unit := (data, transforms, mark-type, encodings)
</code></pre><ul>
<li>data 用来说明数据的来源，支持JSON格式和CSV格式</li>
<li>transform 定义了如何对原始输入数据进行处理</li>
<li>mark 指定了可视化图形</li>
<li>encoding 定义数据到可视化图形的映射规则</li>
</ul>
<p>可视化中视觉通道的设计非常重要，所以其中，encoding 是比较重要的。</p>
<pre><code>encoding := (channel, field, data-type, value, functions, scale, guide)
</code></pre><p>每个 Unit 可以通过一些 operators 变成 View，而 View 又可以通过一些 operators 变成复合的 View。</p>
<p>所以可以这么理解，你每个 operator 的单位是一个视图（可以是 Unit，也可以是 View），而一个 operator 的输出又可以作为下一个 operator 的输入，进而可以形成一个嵌套视图。</p>
<h4 id="Operators-操作"><a href="#Operators-操作" class="headerlink" title="Operators 操作"></a>Operators 操作</h4><p>刚才提到了 operators，你可以把一个 operator 理解成<strong>该以何种方式来整合视图</strong>。Vega-Lite 一共提供了四种 operators，分别是 Layer、Concatenation、Facet、Repeat。</p>
<h5 id="Layer"><a href="#Layer" class="headerlink" title="Layer"></a>Layer</h5><p>Layer 很好理解，就是字面意思，将每个 View 重叠；</p>
<pre><code>layer([unit1, unit2, ...], resolve)
</code></pre><p><img src="http://7b1evr.com1.z0.glb.clouddn.com/layer.png" alt=""></p>
<h5 id="Concatenation"><a href="#Concatenation" class="headerlink" title="Concatenation"></a>Concatenation</h5><p>Concatenation是将多个单视图水平放置或垂直放置；</p>
<pre><code>hconcat([view1, view2, ...], resolve)
vconcat([view1, view2, ...], resolve)
</code></pre><p><img src="http://7b1evr.com1.z0.glb.clouddn.com/concatenation.png" alt=""></p>
<h5 id="Facet"><a href="#Facet" class="headerlink" title="Facet"></a>Facet</h5><p>Facet 是将多个单视图根据数据中的某个 field 进行排布；</p>
<pre><code>facet(channel, data, field, view, scale, axis, resolve)
</code></pre><p><img src="http://7b1evr.com1.z0.glb.clouddn.com/facet.png" alt=""></p>
<h5 id="Repeat"><a href="#Repeat" class="headerlink" title="Repeat"></a>Repeat</h5><p>Repeat 也很好理解，重复放置视图。</p>
<pre><code>repeat(channel, values, scale, axis, view, resolve)
</code></pre><p><img src="http://7b1evr.com1.z0.glb.clouddn.com/repeat.png" alt=""></p>
<h3 id="Vega-Lite-的具体语法——交互方面"><a href="#Vega-Lite-的具体语法——交互方面" class="headerlink" title="Vega-Lite 的具体语法——交互方面"></a>Vega-Lite 的具体语法——交互方面</h3><p>任何交互中，<strong>选择</strong>一直是最重要的一个概念，所以 Vega-Lite 的所有交互也都围绕一个概念 —— Selection。首先看 Selection 的定义：</p>
<pre><code>selection := (name, type, predicate, domain|range, event, init, transforms, resolve)
</code></pre><ul>
<li>name: 属性名</li>
<li>type: point, list, intervel</li>
<li>predicate: 决定符合条件的最小集合（判定哪些东西被选进来）</li>
<li>event: 事件如何定义</li>
<li>transform: 操作已选择的元素</li>
</ul>
<p>其中 transform 又最为重要，它定义了已选择之后的操作。这些操作可以进行随机的组合，且用户不需要定义操作之间的先后顺序，因为具体的顺序由编译器定义。</p>
<p>Vega-Lite 目前提供的交互操作一共有 5 种，分别是：project(fields, channels)、toggle(event)、translate(events, by)、zoom(event, factor)、nearest()。</p>
<h5 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h5><p>Project 用来重定义判定函数 predicate。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/project.png" alt=""></p>
<h5 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a>Toggle</h5><p>Toggle 表示按下shift键，可以在之前交互结果上，继续进行交互。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/toggle.png" alt=""></p>
<h5 id="Translate"><a href="#Translate" class="headerlink" title="Translate"></a>Translate</h5><p>Translate 用于改变交互事件的判断</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/translate.png" alt=""></p>
<h5 id="Zoom-和-Nearest"><a href="#Zoom-和-Nearest" class="headerlink" title="Zoom 和 Nearest"></a>Zoom 和 Nearest</h5><ul>
<li>Zoom操作主要用户视图的缩放</li>
<li>Nearest操作，会将整个视图根据元素的位置分割成Voronoi图，然后将距当前交互的元素最近的元素选择出来</li>
</ul>
<h4 id="其他交互"><a href="#其他交互" class="headerlink" title="其他交互"></a>其他交互</h4><h5 id="if-then-else"><a href="#if-then-else" class="headerlink" title="if-then-else"></a>if-then-else</h5><p>简单的条件判断逻辑。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/select.png" alt=""></p>
<h5 id="把选择的数据作为另一个-view-的输入"><a href="#把选择的数据作为另一个-view-的输入" class="headerlink" title="把选择的数据作为另一个 view 的输入"></a>把选择的数据作为另一个 view 的输入</h5><p>上文也说到过，可以理解成视图的嵌套，也可以用作多视图协作。</p>
<h5 id="根据选择的数据设置的比例尺"><a href="#根据选择的数据设置的比例尺" class="headerlink" title="根据选择的数据设置的比例尺"></a>根据选择的数据设置的比例尺</h5><p>结合上一点，就可以把一个视图作为另一个视图的拓展。例如下图的 Overview + Detail 模式。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/detail.png" alt=""></p>
<p><strong>以上三个交互情形都支持与或非逻辑</strong></p>
<h5 id="多视图交互中的歧义"><a href="#多视图交互中的歧义" class="headerlink" title="多视图交互中的歧义"></a>多视图交互中的歧义</h5><p>单视图中的交互，很可能在多视图中引发歧义。例如，在散点图矩阵中，如果在一个矩阵中进行 brush，其他的矩阵怎么配合协作？于是 Vega-Lite 又定义了四种交互协作模式，分别是 single、independent、union、intersect。</p>
<ul>
<li>默认是 single，用户在某个视图中进行交互，其他视图不会做出响应。</li>
<li>其次是 independent，每个视图中的交互互不影响。</li>
<li>union 求并集，是指只要在多视图中任意一个子视图选中的部分，就被算作选中。</li>
<li>intersect 求交集，是指只有在多视图中都选中的部分，才被算作选中。</li>
</ul>
<h3 id="Vega-Lite-编译器"><a href="#Vega-Lite-编译器" class="headerlink" title="Vega-Lite 编译器"></a>Vega-Lite 编译器</h3><p>Vega-Lite 虽然也是用 JSON 写，但它可以编译成更低级的 Vega。其中它的编译器面临两个难点：</p>
<h4 id="两个难点"><a href="#两个难点" class="headerlink" title="两个难点"></a>两个难点</h4><ul>
<li>数据结构不对应</li>
<li>由于vega-lite省略了很多细节设定，所以得编译器自己计算</li>
</ul>
<h4 id="四个步骤"><a href="#四个步骤" class="headerlink" title="四个步骤"></a>四个步骤</h4><p>编译器用四个步骤解决了以上两个难点。</p>
<ul>
<li>语法分析，消除歧义</li>
<li>建立 vega-lite 和 vega 数据结构间的联系</li>
<li>组合、优化数据结构，去除冗余</li>
<li>汇编所有的元素</li>
</ul>
<h2 id="Vega-Lite-局限性"><a href="#Vega-Lite-局限性" class="headerlink" title="Vega-Lite 局限性"></a>Vega-Lite 局限性</h2><p>Vega-Lite 目前虽然已经发布，但依旧在紧锣密鼓的开发，主要是因其现在还没有达到其理想的效果，在以下两方面还有局限性：</p>
<ul>
<li>生成的可视化结果依赖于当前 Vega-Lite 的实现（未来可能会通过解释器层面解决，而不是编译器）</li>
<li>本身固有的模式（通过 predicate function 抽象来解决）</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可视化在时下越来越重要，越来越多的行业需要对数据进行展示，而可视化的专家又少之又少，所以很需要一款像 Vega-Lite 一样，简单，智能的系统快速地实现可视化。这可能是可视化工具未来发展的方向 —— 快速实现，快速替换可视化方案，快速展示，接下来再进行二次开发，进而多次迭代。</p>
<p>由此可见 Vega-Lite 前景很大，不过可能还需要再沉淀、开发一段时间，我们拭目以待吧。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li>Satyanarayan, A., Moritz, D., Wongsuphasawat, K., &amp; Heer, J. (2016). Vega-Lite: A Grammar of Interactive Graphics. IEEE Transactions on Visualization and Computer Graphics, 2626(c), 1–1. <a href="http://doi.org/10.1109/TVCG.2016.2599030" target="_blank" rel="external">http://doi.org/10.1109/TVCG.2016.2599030</a></li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在 InfoVis 2016 上，&lt;a href=&quot;http://idl.cs.washington.edu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UW 交互数据实验室&lt;/a&gt; 提出了一种新的交互数据可视化语法——Veg
    
    </summary>
    
      <category term="Research" scheme="http://geekplux.com/categories/Research/"/>
    
      <category term="Visualization" scheme="http://geekplux.com/categories/Research/Visualization/"/>
    
    
      <category term="Tool" scheme="http://geekplux.com/tags/Tool/"/>
    
      <category term="Research" scheme="http://geekplux.com/tags/Research/"/>
    
      <category term="Visualization" scheme="http://geekplux.com/tags/Visualization/"/>
    
      <category term="数据" scheme="http://geekplux.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
      <category term="交互" scheme="http://geekplux.com/tags/%E4%BA%A4%E4%BA%92/"/>
    
      <category term="可视化" scheme="http://geekplux.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="Graphics" scheme="http://geekplux.com/tags/Graphics/"/>
    
      <category term="Vega" scheme="http://geekplux.com/tags/Vega/"/>
    
      <category term="Vega-Lite" scheme="http://geekplux.com/tags/Vega-Lite/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建一个私人网盘</title>
    <link href="http://geekplux.com/2016/10/25/how-to-setup-a-personal-cloud.html"/>
    <id>http://geekplux.com/2016/10/25/how-to-setup-a-personal-cloud.html</id>
    <published>2016-10-25T14:13:11.000Z</published>
    <updated>2016-11-02T10:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>文章主要讲了为什么要搭建私有网盘，以及如何用 docker + ownCloud 搭建。</p>
</blockquote>
<p>前两天，360 云盘宣布将停止个人服务。一石激起千层浪，关于如何选择网盘，如何应对网盘关闭的讨论一下子又变得此起彼伏。没办法，目前的现状是，网盘很难有大的盈利空间，还面对严苛的内容审查和隐私保护，虽然于用户来说提供了便利，但于公司来说实在是一件出力不讨好的事情。</p>
<h2 id="之前的网盘方案"><a href="#之前的网盘方案" class="headerlink" title="之前的网盘方案"></a>之前的网盘方案</h2><p>国外的网盘我一直是三家一起用，分别是 Dropbox 存储代码和一些重要或私密文件；Google Drive 存储一些大文件和私密文件；OneDrive 存储一些电子书（同步太慢了）。国内的网盘我之前只用两家，一是坚果云，放一些个人常用的小文件，包括一些文档和软件配置文件；另一个是百毒云，放一些各处转存来的大文件、自己的照片和学习资料，一方面因其空间大，另一方面因其同步流畅。然而，百毒云前段时间把我的网盘<strong>全面封掉</strong>了，丢失了很多大学时的照片（其它文件要不不重要，要不有备份），申诉无果，实属无奈。</p>
<h2 id="搭建一个只属于自己的网盘"><a href="#搭建一个只属于自己的网盘" class="headerlink" title="搭建一个只属于自己的网盘"></a>搭建一个只属于自己的网盘</h2><p>所以我决定搭建一个只属于自己的网盘。考察了几种方案（包括买 RAID 或 NAS 等），发现已有人在这方面做了努力，提供了像 <a href="https://www.seafile.com/home/" target="_blank" rel="external">Seafile</a> 和 <a href="https://owncloud.org/" target="_blank" rel="external">ownCloud</a> 这样的产品。接下来对比了两个软件，我决定选择用 ownCloud，主要出于以下几点考虑：</p>
<ul>
<li>可以设置是否加密，保证数据安全。</li>
<li>ownCloud 可以用于同步日程、联系人、浏览器书签等，最重要的是<strong>密码管理</strong>，这对于目前有无数密码需要记的我们非常实用。ownCloud 还有个应用商店，大家可以自行发现有用的应用。</li>
<li>ownCloud 提供网页和各种设备、系统的客户端（Windows、Mac、Linux、iOS、Android皆有）进行访问你的网盘。</li>
<li>ownCloud 能将外部存储（如 FTP、WebDAV、Amazon S3，甚至 Dropbox 和 Google Drive）的文件挂载到 ownCloud 上，实现无缝存储和分享。</li>
<li>文件支持版本管理，还有回收站，所以不必担心误删。</li>
</ul>
<h2 id="搭建方法"><a href="#搭建方法" class="headerlink" title="搭建方法"></a>搭建方法</h2><p>首先你得<strong>先有一个自己的 VPS</strong>。。没错，要不然你的数据往哪放，ownCloud 在哪运行。</p>
<p>有了 VPS 之后，就可以按照官网教程一步一步安装搭建了。然而，步骤相当繁琐，你得先安装 PHP、MySQL、 Apache 等等，所以我们要祭出神器 —— docker（这里就不介绍 docker 的用法了，以下内容默认大家对 docker 的基本使用有所了解）。这样一来，之前冗长的步骤，就化成了三步：</p>
<ol>
<li>安装 docker、docker-compose，下载 ownCloud 的 image</li>
<li>配置 docker-compose.yml</li>
<li>配置完毕，启动，打开 ownCloud 主界面配置数据库、管理员等</li>
</ol>
<blockquote>
<p><strong>下面是对上面三步的详细讲解，嫌太长的话可以不看。只需要把下面用到的两个 docker images （owncloud、postgres）下载好，安装 docker-compose 并拷贝 docker-compose.yml 文件到你想要存储 ownCloud 数据的文件夹，然后运行 <code>docker-compose up</code> 就好，一气呵成。</strong></p>
</blockquote>
<h3 id="使用-docker"><a href="#使用-docker" class="headerlink" title="使用 docker"></a>使用 docker</h3><p>安装好 docker 之后，直接下载 <code>owncloud</code> image 运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name owncloud -p 80:80 owncloud</div></pre></td></tr></table></figure>
<p>其实就可以看到 ownCloud 已经运行起来了，访问你的 VPS 地址，就可以看到 ownCloud 的界面。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/docker-owncloud-1.png" alt=""></p>
<p>但这时的 ownCloud 还没有数据库，所以我们还需要用 docker –link 来添加一个数据库存储 ownCloud 的数据，这里用到了 <code>postgres</code> 这个 image（数据库你可以自己定，不一定要用 postgreSQL）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run --name owncloud-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres</div><div class="line">docker run --rm --link owncloud-postgres:owncloud-db --name owncloud -p 80:80 owncloud</div></pre></td></tr></table></figure>
<p>第一条命令会启动一个 postgreSQL 数据库，默认的用户是 postgres，密码设为了 mysecretpassword，host 是 owncloud-db。</p>
<p>但这时我们运行的 docker container 一旦删掉，我们的数据就没有了，所以我们需要用 docker 中的 volumes (或 <a href="https://docs.docker.com/userguide/dockervolumes/#creating-and-mounting-a-data-volume-container" target="_blank" rel="external">docker data volumes</a>)来把 ownCloud 的数据持久化。</p>
<h3 id="配置-docker-compose"><a href="#配置-docker-compose" class="headerlink" title="配置 docker compose"></a>配置 docker compose</h3><p>这样一来，我们得启动两个 container 作为 data-only container，然后再启动 owncloud 和 postgres 关联这两个 data-only container，非常繁杂，幸亏我们有 <code>docker-compose</code> 帮忙。先安装它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install docker-compose</div></pre></td></tr></table></figure>
<p>然后配置 docker-compose.yml，下面配置中的 <code>volumes</code> 就是在配置数据持久化的目录结构。由于我把 docker-compose.yml 存在了VPS 的<code>~/owncloud</code>文件夹下，所以底下 <code>volumes</code> 配置中，冒号前面的宿主目录是那样写的，而冒号后面的是 container 中的目录，具体：</p>
<ul>
<li>/etc/postgresql 存储数据库的配置</li>
<li>/var/lib/postgresql 存储数据库中的数据</li>
<li>/var/www/html/app 存储 ownCloud APP 的数据</li>
<li>/var/www/html/data 存储 ownCloud 的数据</li>
<li>/var/www/html/config 存储 ownCloud 的配置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Composition of the containers</span></div><div class="line"></div><div class="line"><span class="attr">postgres-data:</span></div><div class="line"><span class="attr">  image:</span> postgres</div><div class="line"><span class="attr">  command:</span> /bin/<span class="literal">true</span></div><div class="line"><span class="attr">  volumes:</span></div><div class="line"><span class="bullet">    -</span> ~/owncloud/etc/postgresql:/etc/postgresql</div><div class="line"><span class="bullet">    -</span> ~/owncloud/var/lib/postgresql:/var/lib/postgresql</div><div class="line"></div><div class="line"><span class="attr">owncloud-data:</span></div><div class="line"><span class="attr">  image:</span> owncloud</div><div class="line">  <span class="comment"># This is a data container, so we want to exit as soon as the container is created</span></div><div class="line">  <span class="comment"># BUT we will have to fix permissions issues first (33 is the ID of the www-data user)</span></div><div class="line"><span class="attr">  command:</span> /bin/bash -c <span class="string">"/bin/chown -R 33 /var/www/html/data &amp;&amp; /bin/chown -R 33 /var/www/html/config"</span></div><div class="line"><span class="attr">  volumes:</span></div><div class="line"><span class="bullet">    -</span> ~/owncloud/var/www/html/apps:/var/www/html/apps</div><div class="line"><span class="bullet">    -</span> ~/owncloud/var/www/html/data:/var/www/html/data</div><div class="line"><span class="bullet">    -</span> ~/owncloud/var/www/html/config:/var/www/html/config</div><div class="line"></div><div class="line"><span class="attr">owncloud:</span></div><div class="line"><span class="attr">  image:</span> owncloud</div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="number">8080</span>:<span class="number">80</span></div><div class="line"><span class="attr">  volumes_from:</span></div><div class="line"><span class="bullet">    -</span> owncloud-data</div><div class="line"><span class="attr">  links:</span></div><div class="line"><span class="attr">    - postgres:</span>postgres</div><div class="line"><span class="attr">  hostname:</span> cloud</div><div class="line"><span class="attr">  domainname:</span> cloud.example.org <span class="comment"># Change to the hostname you will use</span></div><div class="line"></div><div class="line"><span class="attr">postgres:</span></div><div class="line"><span class="attr">  image:</span> postgres</div><div class="line"><span class="attr">  environment:</span></div><div class="line"><span class="bullet">    -</span> POSTGRES_USER=postgres</div><div class="line"><span class="bullet">    -</span> POSTGRES_PASSWORD=mypostgrespassword</div><div class="line"><span class="attr">  volumes_from:</span></div><div class="line"><span class="bullet">    -</span> postgres-data</div></pre></td></tr></table></figure>
<p>把 docker-compose.yml 配置好之后，只需运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose up</div></pre></td></tr></table></figure>
<p>就可以把 ownCloud 运行起来了，上一步中的很多操作，这里一步就搞定了。不过<strong>切记！<code>owncloud-data</code>和<code>postgres-data</code>两个 container 和 volume 千万不要删。删之前请备份</strong>。</p>
<h3 id="ownCloud-配置"><a href="#ownCloud-配置" class="headerlink" title="ownCloud 配置"></a>ownCloud 配置</h3><p>访问你 VPS 的 8080 端口（刚才配置文件里写了）打开 ownCloud 主页，需要做两件事</p>
<ol>
<li>输入管理员的账号和密码</li>
<li>选择数据库用哪个，且输入数据库配置，这里对照我们刚才 docker-compose 里的写的输入就好</li>
</ol>
<p>点击完成，一切 OK，进入文件页面尽情探索吧！</p>
<h2 id="参考-amp-延伸阅读"><a href="#参考-amp-延伸阅读" class="headerlink" title="参考&amp;延伸阅读"></a>参考&amp;延伸阅读</h2><ul>
<li><a href="http://blog.securem.eu/serverside/2015/08/25/setting-up-owncloud-server-in-a-docker-container/" target="_blank" rel="external">Setting up an ownCloud Server in a Docker container using Docker Compose</a></li>
<li><a href="https://github.com/vector090/vector090.github.io/wiki/%E4%BD%BF%E7%94%A8%E5%92%8C%E6%90%AD%E5%BB%BAownCloud%E7%A7%81%E6%9C%89%E4%BA%91%E8%A6%81%E7%82%B9" target="_blank" rel="external">使用和搭建ownCloud私有云要点</a></li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文章主要讲了为什么要搭建私有网盘，以及如何用 docker + ownCloud 搭建。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前两天，360 云盘宣布将停止个人服务。一石激起千层浪，关于如何选择网盘，如何应对网盘关闭的讨论一下子又变得此起彼伏
    
    </summary>
    
      <category term="Tool" scheme="http://geekplux.com/categories/Tool/"/>
    
    
      <category term="Tool" scheme="http://geekplux.com/tags/Tool/"/>
    
      <category term="工具" scheme="http://geekplux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="ownCloud" scheme="http://geekplux.com/tags/ownCloud/"/>
    
      <category term="docker" scheme="http://geekplux.com/tags/docker/"/>
    
      <category term="网盘" scheme="http://geekplux.com/tags/%E7%BD%91%E7%9B%98/"/>
    
      <category term="云" scheme="http://geekplux.com/tags/%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>如何阅读一篇学术论文</title>
    <link href="http://geekplux.com/2016/05/31/how-to-read-a-research-paper.html"/>
    <id>http://geekplux.com/2016/05/31/how-to-read-a-research-paper.html</id>
    <published>2016-05-31T12:49:56.000Z</published>
    <updated>2016-11-02T10:18:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个<strong>知识过剩</strong>的时代。大量标榜为「干货」的文章每时每刻都在不断地产出，搜索引擎的便捷似乎也让我们离这些「知识」只有一步之遥。然而，随着多年在互联网上的浸淫，我发现<strong>越是容易得到的知识，价值越不大，留存的时间也越不长</strong>。所以，相对于那些东拼西凑组成的所谓干货，一本好书或一篇好的学术论文，才是知识的结晶（单从前后两者成文的时间上就可以很好的证明这点）。</p>
<p>关于「如何阅读一本书」的讨论，已经盈千累万，而关于「如何阅读一篇学术论文」的似乎还凤毛麟角。所以这篇文章我打算写一写我在阅读论文过程中总结出的一些方法，希望能对你有帮助，当然如果你有其他更好的方法，欢迎补充。文章共分为四个部分，第一部分介绍读论文的核心要素，第二部分列出阅读单篇论文的具体步骤，第三部分是一些补充。方法论讲完之后，最后一部分将阐述为什么要阅读文献期刊。</p>
<h2 id="一、阅读论文的核心要素"><a href="#一、阅读论文的核心要素" class="headerlink" title="一、阅读论文的核心要素"></a>一、阅读论文的核心要素</h2><p>根据每个人读论文的目的不同，阅读的侧重点也会有所不同，但都不外乎要获取知识、解决问题，所以无论你的目的是什么，有<strong>三个核心要素</strong>是你在阅读一篇论文时必须掌握的：</p>
<ol>
<li>这篇论文主要表达的是什么？作者的写这篇论文的目的是什么？或者说是这篇文章做出了什么成果？</li>
<li>这篇论文的观点/成果是如何实现的？作者用了哪些论据来支持他的观点/成果？</li>
<li>相关的工作有哪些？在这篇文章之前有什么已成立/取得的观点/成果？作者的观点/成果主要是建立在哪个的基础上？作者的观点/成果比别人突出在哪里？</li>
</ol>
<p>阅读论文不能盲目的去读，要<strong>带着问题去读</strong>才有收获，只要了解了这三个核心要素，就可以对论文有一个整体的印象。</p>
<a id="more"></a>
<h2 id="二、阅读论文的步骤"><a href="#二、阅读论文的步骤" class="headerlink" title="二、阅读论文的步骤"></a>二、阅读论文的步骤</h2><p>针对<strong>单篇</strong>论文：</p>
<ol>
<li><strong>认真</strong>地阅读标题、Abstract 和 Introduction。</li>
<li>把每一个章节的标题、子标题都过一遍，具体的内容先不急着看。</li>
<li>阅读 Conclusion，回应刚才的 Abstract 和 Introduction。</li>
<li>瞥一眼参考文献，看引用了哪些文章，里面有没有自己已经看过的。</li>
</ol>
<p>这四个步骤完毕之后，基本上可以解答上文提到的三个核心问题。而且你还能获得额外的一些信息，比如这篇文章和我研究的相关性、值不值得我精读、写的是否通俗易懂、我的知识储备是否能读等等。</p>
<p>如果得到的判断是这篇文章需要精读，那么我们可以开始下面的步骤：</p>
<ol>
<li>阅读文章的主体，重点注意抛出的观点，和提出的论据。</li>
<li>对于有公式、图表或其他具体论述的地方要多关注，时间足够就认真阅读。</li>
<li>遇到有引用参考文献的地方，先不要打断当前的阅读，但要在脑子里有个印象，以便将来进行相关的阅读，从而更好的理解本文的背景。</li>
</ol>
<p>这三个步骤花的时间可能是上面四个步骤时间的几倍，完成之后基本上对整篇文章的细节都掌握了。如果没有读懂，可能是自己的知识不够，也有可能是状态不好，你可以选择把这篇文章放在一边以后在读，或者再把这三个步骤重复几遍。当然，如果你读懂了，并且这篇文章的内容正是你苦寻已久的及时雨，那么可以进行下面这步：</p>
<ol>
<li>把文章的论证重现一遍。</li>
<li>改动重现过程中的相关步骤，与本文进行对比。</li>
</ol>
<p>完成这步，你对文章的理解程度肯定会比一般人深，如果有新的发现或结论，你还可以与原作者进行交流，或自己在其基础上发表新的论文等。</p>
<h2 id="三、一些补充"><a href="#三、一些补充" class="headerlink" title="三、一些补充"></a>三、一些补充</h2><p>上一节中的阅读步骤都是针对单篇论文的，其实在阅读论文过程中，我们很少是阅读完一篇再读下一篇，而通常是同时读几篇，每篇只读一部分，得到答案就够了。所以针对上述的步骤，还需要一些补充：</p>
<ol>
<li>要获取某个知识/解决方案时，应该是<strong>大规模、分批次</strong>阅读，而<strong>不是逐篇阅读</strong>（通常这篇读不懂的，会在另一篇中有答案）。</li>
<li>拿到一个方向相关的大量论文后，尽可能从标题判断出阅读顺序（也要考虑发表时间）。</li>
<li>阅读单篇论文，<strong>不要逐行阅读</strong>，提炼出适合自己的阅读论文顺序。</li>
<li>阅读论文时<strong>要敢于想象（猜）</strong>，大胆假设，小心验证，很可能一次性就猜对，节约很多时间。</li>
<li>每篇论文中详细的推导过程，很可能你根本不需要懂。</li>
<li>不要有公式恐惧症。关键的公式可能就三五个，其他不懂也没关系。公式之间的恒等式推导过程可以完全略。假如到了万不得已非要看懂的情况，重点看公式推导过程中引入的假设条件，和公式中每个字母所指代的东西。</li>
<li>读不懂的时候，不要气馁，可能是自己的知识储备还不够，也可能是今天的状态不好，先放一边，读下一篇。</li>
</ol>
<p>大量阅读提升广度，精准阅读提升深度。读的越多越熟练。</p>
<h2 id="四、为什么要阅读文献期刊"><a href="#四、为什么要阅读文献期刊" class="headerlink" title="四、为什么要阅读文献期刊"></a>四、为什么要阅读文献期刊</h2><p>只要深入掌握到阅读与分析期刊论文的技巧, 就可以掌握到可能在大学不曾研习过的三种能力:</p>
<ol>
<li>从无组织的知识中检索、筛选、组织知识的能力</li>
<li>对一切既有进行精确批判的独立自主判断能力</li>
<li>创造新知识的能力</li>
</ol>
<p>阅读论文是我在研一后半年才意识到的一件收益很大的事（惭愧），也是一个漫长的旅程。如果你也有幸开始这个旅程，希望你能轻松上路，如果你在途中遇到了困难，希望你能「不求甚解」，从万千论文中挑出自己最容易读懂的读，挑软柿子捏。等走的路多了，自然会知道哪有坑洼，哪有岔路。这些话也送给我自己。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li>Keshav, S. (2007). How to read a paper. ACM SIGCOMM Computer Communication Review, 1–3. <a href="http://doi.org/10.1145/1273445.1273458" target="_blank" rel="external">http://doi.org/10.1145/1273445.1273458</a></li>
<li>Laramee, R. S. (2011). How to read a visualization research paper: Extracting the essentials. IEEE Computer Graphics and Applications, 31(3), 78–82. <a href="http://doi.org/10.1109/MCG.2011.44" target="_blank" rel="external">http://doi.org/10.1109/MCG.2011.44</a></li>
<li>彭明辉《研究所新生完全求生手册》</li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个&lt;strong&gt;知识过剩&lt;/strong&gt;的时代。大量标榜为「干货」的文章每时每刻都在不断地产出，搜索引擎的便捷似乎也让我们离这些「知识」只有一步之遥。然而，随着多年在互联网上的浸淫，我发现&lt;strong&gt;越是容易得到的知识，价值越不大，留存的时间也越不长&lt;/strong&gt;。所以，相对于那些东拼西凑组成的所谓干货，一本好书或一篇好的学术论文，才是知识的结晶（单从前后两者成文的时间上就可以很好的证明这点）。&lt;/p&gt;
&lt;p&gt;关于「如何阅读一本书」的讨论，已经盈千累万，而关于「如何阅读一篇学术论文」的似乎还凤毛麟角。所以这篇文章我打算写一写我在阅读论文过程中总结出的一些方法，希望能对你有帮助，当然如果你有其他更好的方法，欢迎补充。文章共分为四个部分，第一部分介绍读论文的核心要素，第二部分列出阅读单篇论文的具体步骤，第三部分是一些补充。方法论讲完之后，最后一部分将阐述为什么要阅读文献期刊。&lt;/p&gt;
&lt;h2 id=&quot;一、阅读论文的核心要素&quot;&gt;&lt;a href=&quot;#一、阅读论文的核心要素&quot; class=&quot;headerlink&quot; title=&quot;一、阅读论文的核心要素&quot;&gt;&lt;/a&gt;一、阅读论文的核心要素&lt;/h2&gt;&lt;p&gt;根据每个人读论文的目的不同，阅读的侧重点也会有所不同，但都不外乎要获取知识、解决问题，所以无论你的目的是什么，有&lt;strong&gt;三个核心要素&lt;/strong&gt;是你在阅读一篇论文时必须掌握的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这篇论文主要表达的是什么？作者的写这篇论文的目的是什么？或者说是这篇文章做出了什么成果？&lt;/li&gt;
&lt;li&gt;这篇论文的观点/成果是如何实现的？作者用了哪些论据来支持他的观点/成果？&lt;/li&gt;
&lt;li&gt;相关的工作有哪些？在这篇文章之前有什么已成立/取得的观点/成果？作者的观点/成果主要是建立在哪个的基础上？作者的观点/成果比别人突出在哪里？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;阅读论文不能盲目的去读，要&lt;strong&gt;带着问题去读&lt;/strong&gt;才有收获，只要了解了这三个核心要素，就可以对论文有一个整体的印象。&lt;/p&gt;
    
    </summary>
    
      <category term="Research" scheme="http://geekplux.com/categories/Research/"/>
    
    
      <category term="Research" scheme="http://geekplux.com/tags/Research/"/>
    
      <category term="方法论" scheme="http://geekplux.com/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
      <category term="学习" scheme="http://geekplux.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Learning" scheme="http://geekplux.com/tags/Learning/"/>
    
  </entry>
  
  <entry>
    <title>毕业后的两年</title>
    <link href="http://geekplux.com/2016/02/15/two-years-after-graduated.html"/>
    <id>http://geekplux.com/2016/02/15/two-years-after-graduated.html</id>
    <published>2016-02-15T15:03:27.000Z</published>
    <updated>2016-02-15T17:15:36.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=16504268&auto=0&height=66"></iframe>

<p>在我们 5 岁的时候，过一年相当于经历人生的 1/5，而到了 25 岁的时候，过一年却相当于只经历了人生的 1/25。时间的重要性似乎随着我们年龄的增长而变得越来越低。主观感受上我们觉得时间走的越来越快了，而实际上却是我们对时空的认知变得扭曲了。</p>
<p>所以我们需要不断整理、回顾自己的人生，就像偶尔给自己留张自拍一样，说不定哪一天就忘记自己当时长什么样了。</p>
<p>距离我上次大学毕业总结（<a href="http://geekplux.com/2014/02/02/goodbye_my_university.html">Goodbye，我的大学</a>）已经过去了两年。都说 20-25 岁的年纪是人生最不怕折腾的年纪，如今我躺在床上，闭眼回想自己这过去的两年，满是<strong>任性</strong>。</p>
<p><em>本文和上次总结不同，将以时（liu）间（shui）线（zhang）的方式来叙述。两年的经历可以分为六个部分，其中五和六两个部分属于持续经历，七是一些胡思乱想。如果你觉得废话太多，可以只看<strong>黑体字</strong>部分或最后的总结。</em></p>
<h2 id="一、初到上海"><a href="#一、初到上海" class="headerlink" title="一、初到上海"></a>一、初到上海</h2><p>这完全是一次没有计划，说走就走的求职之路，当时的我还没意识到「<strong>大学毕业后的第一份工作至关重要</strong>」这一点。</p>
<a id="more"></a>
<h3 id="只呆了一个月的公司"><a href="#只呆了一个月的公司" class="headerlink" title="只呆了一个月的公司"></a>只呆了一个月的公司</h3><p>第一家公司我只呆了一个月。由于是靠朋友关系硬塞进去的，所以我在其中的一个月没有任务，也没有要求，扮演着一个无所事事的角色。天天看 PHP 手册的工作让我很没有成就感，加之公司氛围不怎么好，我很快决定另投简历。</p>
<p><strong>人只有写简历的时候才会觉得自己有多么乏善可陈</strong>。虽然我在大学期间也实习过，但真正想找一份程序员的工作只能靠我仅有的毕设经验（一款 Android APP）。在收到的回应中，其中一个创业团队和我一见钟情。</p>
<p>在这过程中，我要感谢昊哥对我无微不至的照顾，同时也有不少感触：</p>
<ul>
<li><strong>如果对一个环境不满意，而你又改变不了它，直接走</strong>（我真的不是在影射什么）。</li>
<li><strong>简历要在日常积累，而投简历的时候要明确目标</strong>。</li>
<li><strong>自己找到的工作比靠介绍进去的要有成就感的多</strong>。</li>
</ul>
<h3 id="创业艰辛"><a href="#创业艰辛" class="headerlink" title="创业艰辛"></a>创业艰辛</h3><p>辗转来到这家创业公司<a href="http://10years.me" target="_blank" rel="external">十年后</a>。本来我以为我是来作 Android 程序员的，结果第二天 CEO 就和我说：「Android 客户端还有点遥远，不如你来作 Web 前端吧」……从此我走上了这条坑多无比的不归路。</p>
<p>在十年后期间，我最大的感受是创业真的很难。<strong>创业靠的不是独一无二的 Idea，而是团队和决策</strong>。同样的创意，可能展现出来的产品形态完全不同；即使产品思路相同，决策不同也可能导致发展背道而驰；即使决策相同，不同的团队执行起来也是风格迥异。然而，就算思路绝对正确，执行一流，最终也会因为各种各样的问题（有的问题小到不起眼）而中道崩殂。遥想当年 InnoSpace 里那么多的创业团队现在还剩多少。</p>
<p><strong>创业的日子没有那么多快意恩仇，更多的是柴米油盐</strong>。加入一家创业公司，有幸经历这些，让我觉得很幸运。不仅如此，在十年后的日子，也是我走出校门以来最开心的日子。</p>
<h4 id="重要的不是做什么，而是和什么人在一起"><a href="#重要的不是做什么，而是和什么人在一起" class="headerlink" title="重要的不是做什么，而是和什么人在一起"></a>重要的不是做什么，而是和什么人在一起</h4><p>十年后团队里最开始青一色的复旦人，复旦兼容并包却又与众不同的气质在他们身上体现的淋漓尽致。桉哥和冬神可能是我见过最理想化的人了，总给我一种遗世孤立的感觉，和他俩呆在一起的时间最长，受他俩影响最大。此时我才真正理解了为什么毕业后第一份至关重要，因为<strong>我们在象牙塔里对社会没有直观的感受，而抛开乐趣、价值、薪水不谈，第一份工作恰恰帮助初出茅庐的你构建了一个社会认知的雏形，间接的还可能影响你的三观</strong>。以下是我在那段时间感悟到的：</p>
<h4 id="心灵开放"><a href="#心灵开放" class="headerlink" title="心灵开放"></a>心灵开放</h4><p>心态开放我暂且只认识到两点：</p>
<ul>
<li><strong>不设限</strong></li>
<li><strong>不贴标签</strong></li>
</ul>
<p>我们总是在无形之中给自己套上枷锁，事实上<strong>人总比自己想象的更加自由</strong>。生活一成不变的原因大多是因为我们没有打破局限的意识。<strong>不断的尝试新事物，尝试以前不敢做的事才能突破自己</strong>。感谢他们让我认识到这一点，因为他们似乎无所不能。不管我做什么他们都没有黑我嘲笑我，反而是不断的支持与鼓励，这不是表面上的，因为他骨子里都是这种「玩世不恭」的人。</p>
<p>我们也不应给事物设限，<strong>不要因为一点而否定全局</strong>。也<strong>不要给任何人或事物贴标签</strong>，不知道为什么我们在日常生活中特别喜欢贴标签，比如北方人都特别耐寒，南方人都是蛮夷等等。<strong>大多数标签都是针对特定个体在特定环境下的描述，所以抛开影响因子来下定论完全是耍流氓</strong>。事物和人一样，不是一成不变的，也都是多元的，你可以接受他和你共鸣的地方，而忽视其他。</p>
<h4 id="慢即是快"><a href="#慢即是快" class="headerlink" title="慢即是快"></a>慢即是快</h4><p>快节奏社会里很多人都是「急功近利」的，看本书都追求「快速阅读」，我当时也是。但后来我渐渐意识到这有点本末倒置，<strong>持之以恒</strong>才是最重要的。这是我在学习 <a href="http://geekplux.com/2015/01/05/play-ukulele.html">Ukulele</a> 的过程中悟到的。每天弹10分钟，比一天弹几个小时却停练一周要进步快的多。其他事也是这样，<strong>可能你现在看不到任何收益，但只要坚持，总会有量变达到质变的一天</strong>。爱因斯坦都说复利是世界第八大奇迹。</p>
<p>同时，单纯的享受过程也是很有趣的事，就拿读书来说，很多书是不能囫囵吞枣的，你得细嚼慢咽才能吃透它的内容。而且，每天坚持看几页，一年下来也能看不少书。我们不应论量，而应论质。</p>
<h2 id="二、考研岁月"><a href="#二、考研岁月" class="headerlink" title="二、考研岁月"></a>二、考研岁月</h2><p>参加完毕业典礼后，我鬼使神差地萌生了考研的想法，原因有很多，但其实最大的理由只是因为我想体验一下考研是什么样子的。于是，辞职，回家复习。</p>
<p><strong>考研备考可能是我一生中最孤独的日子了</strong>。虽然和高考一样都是朝着一个确切的目标奋斗，但是高考有同学、有老师、有家长，而考研你什么都没有，甚至连复习计划都得自己定，有的只是万一考不上的压力和对考上之后日子的幻想。那时候我坐在自习室里，偶尔会怀疑自己是不是回到了高中，耳畔响起罗大佑的《闪亮的日子》、张雨生的《永远不回头》和赵雷的《我们的时光》等等，然后若有所思的看看窗外。</p>
<p><strong>考研除了孤独，还是脆弱的</strong>。我要感谢毛哥在考研整个复习阶段孜孜不倦鼓励。尤其在最后的阶段，一个小题不会做都可能是悲愤的导火索。每当没有信心的时候，毛哥就会如永动机一样开始鼓励我，这帮我挺过了那最艰苦的岁月。不过不幸的是，<strong>考研有可能和单恋一样，感动的是自己</strong>。</p>
<p>Anyway，<strong>考研的日子是宝贵的，是在这浮躁社会中难有的清静，是聆听内心独白的契机</strong>，坚持下来更是战胜自己的喜悦。最有趣的是，我 Wunderlist 上曾有一个长长的清单，上面写满了那些「等我考完以后」才能做的事，每次看看都会笑。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/2016-02-15%20221528.jpg" alt="自习室"></p>
<h2 id="三、又至上海"><a href="#三、又至上海" class="headerlink" title="三、又至上海"></a>三、又至上海</h2><p>考研的结果是我没有考上华科，无奈之下来沪调剂，结果又因为本科出身太差被各种拒绝，那段时间也是有些心灰意冷，遂决定找工作。其中印象最深的是第一场面试：去饿了么被 <a href="https://github.com/sofish" target="_blank" rel="external">sofish</a> 面试。</p>
<p>半年没写代码的我压根没有准备就去了（我也不知我何来的自信），一答不上来头上就直冒汗。然而 sofish 没有怪我浪费他时间，反而循循善诱，不停的教我如何更加深入的学习前端技术，超级 Nice! 虽然最后被刷，但我仍然很感激这次面试，让我学会了很多。</p>
<p>最终我又选了一家创业公司——一财新媒体。不到半年的时间，从最初的技术团队只有几个人到后来的几十个人，我也算是经历了公司成长最快的一段时期。有趣的是，当时我不仅要写代码，还要负责面试的工作，虽然当时我很不喜欢，但现在看来很有意义的一段经历，至少<strong>让我从面试官的角度体会到了哪些品质、技能是一个合格程序员所必须具备的</strong>。</p>
<p>在一财的日子，可能是<strong>我毕业以来最像「上班」的一段日子</strong>。第一次把自己当作一名职员来看待，第一次体会到上下级，第一次体会到各司其职互相配合的感觉。。。在职场方面我是稚嫩的，幸亏有我可爱的上司经常教我各种人生经验。还有我司各种卖（men）萌（sao）的同事，跟你们互黑真的是非常愉快。</p>
<h2 id="四、杭州的象牙塔"><a href="#四、杭州的象牙塔" class="headerlink" title="四、杭州的象牙塔"></a>四、杭州的象牙塔</h2><p>尽管直到最后辞职，所有人可能都没理解为什么我要去杭师大读研（调剂成功），但我还是毅然决然的去了。</p>
<p>每次做一些重大决定前，<strong>我们其实内心早就有了选择，所谓的分析，调研，到底哪个选项好，其实都是为了印证、迎合自己内心的想法</strong>。每次询问别人的意见，其实只是想让别人认同自己<strong>既定</strong>的想法。</p>
<p>从职场回到校园，很多地方都不适应，尤其是<strong>心态很难转变</strong>。本来是每天都有任务要完成，现在变成了自己给自己找任务；本来每天面对的是实际的业务；现在变成了自己猜测出来的需求，本来每天是按时上班，主动付出，现在变成了每天上课，被动接受。。。我怀疑我到现在都没有彻底转换过来。不过<strong>工作后再读研比大学毕业直接读研有个优势，那就是我知道我要学的是什么</strong>。</p>
<p><strong>读研和本科也有所不同</strong>。研究生更多的是自己找一个问题，运用所学自己去研究，大学则还不理解什么是研究。读论文可能是研究生最常做的事，每每读起一篇优秀的论文，总能深切的体会到什么是「站在巨人的肩膀上」。此外，研究生需要天天呆在实验室，不过好在我大学里就天天泡在实验室，所以对这种实验室-宿舍两点一线的生活没有一丝不适。</p>
<p>然而，由于我总能给自己的偷懒找到恰当的理由，所以<strong>在学校的紧张程度和努力程度远没有工作时的大</strong>。偶尔去西湖浪一浪，美其名曰释放压力。</p>
<h2 id="五、自由职业与外包"><a href="#五、自由职业与外包" class="headerlink" title="五、自由职业与外包"></a>五、自由职业与外包</h2><p>编程也算是一种创造性工作了，自由职业一直是我向往的，外包只是偶尔开开荤。</p>
<p>人生第一个外包来的特别突然，对方提到的技术对于当时的我来说完全不会，但我还是一口答应了下来（毕竟 too young）。Deadline 之前的那一个通宵，可能是我技术提升最快的一夜。虽然这个网页最终还是没令对方满意，但我还是学到了不少前端技术，也深深体会了「不逼自己一把，不知道自己有多优秀」这句话。后来的几个小外包经历，也慢慢让我有了<a href="http://mp.weixin.qq.com/s?__biz=MjM5ODk1MjgwMQ==&amp;mid=400071755&amp;idx=1&amp;sn=f086671ea081b96b7f1268867b38715c#rd" target="_blank" rel="external">盲目的自信</a>。</p>
<p>不过外包归根结底还是有点苦，接过的都冷暖自知。而且<strong>外包过来过去都是没有挑战性的体力活，很难在技术上有所成长</strong>。相对来说，如果有一个稳定的远程工作会好很多，技术会随着业务的增长而增长。</p>
<p>另外我要提一下，从第一份外包到后来的一些机会大多是通过我博客来找到我的，<strong>所以写博客是一件收益巨大的事</strong>，尤其是写<a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="external">优秀的博客</a>。</p>
<h2 id="六、公众号"><a href="#六、公众号" class="headerlink" title="六、公众号"></a>六、公众号</h2><p>运营一个公众号两年半的感想大多都写在了<a href="http://mp.weixin.qq.com/s?__biz=MjM5Mjg0NjMwMQ==&amp;mid=400413023&amp;idx=1&amp;sn=84d3e6670c6aaa4dcaca756b778b25a4#rd" target="_blank" rel="external">晓然，回归</a>里，当时主要说了说心态要平和，但还有一些想在这里絮叨絮叨：</p>
<h3 id="弱关系"><a href="#弱关系" class="headerlink" title="弱关系"></a>弱关系</h3><p>弱关系很重要，因为弱关系可以提供一些「圈外」的信息。而维持弱关系的关键，不在于竭尽所能讨好别人，也不在于想法设法不得罪人，而在于<strong>不断提升自己的价值</strong>。</p>
<h3 id="沉默是金"><a href="#沉默是金" class="headerlink" title="沉默是金"></a>沉默是金</h3><p>三种时候应该沉默：</p>
<ul>
<li>世上 99.9% 事与自己无关，<strong>不要随意发表评论</strong>。</li>
<li><strong>不要好为人师</strong>，总想给别人传授人生经验。</li>
<li>面对诽谤、质疑或者任何让你不爽的言论，<strong>不作回应</strong>是最好的处理方式。</li>
</ul>
<h2 id="七、一些胡思乱想"><a href="#七、一些胡思乱想" class="headerlink" title="七、一些胡思乱想"></a>七、一些胡思乱想</h2><h4 id="不反智"><a href="#不反智" class="headerlink" title="不反智"></a>不反智</h4><p>以我个人的浅见，我觉得反智可能是因为现在社会的价值观单一造成的。以下情况或多或少的出现在身边：</p>
<ul>
<li><strong>结果比过程更重要，文凭比学习的过程更重要</strong></li>
<li><strong>追求知识被认为无用，认真的行为被认为装逼</strong></li>
<li><strong>充满偏见，不想进一步学习，也抑制你学习的冲动</strong></li>
</ul>
<p>我这里不是批判反智的人，<strong>反智的定义很大，而且反智不含褒贬之意</strong>，我只是想要求自己在大多数情况下做到不反智，比如<strong>尊重版权</strong>。我很纳闷为什么有的人会抄的理直气壮，还反过来问我知识是不是应该共享。我觉得知识是应该共享，但更应该尊重创造这些知识的人。</p>
<h3 id="主观"><a href="#主观" class="headerlink" title="主观"></a>主观</h3><p><strong>每个人到底生活于何样的世界，首先取决于这个人对这个世界的理解</strong>。所有的一切，或所谓的现实，都可以分成两个部分：主体和客体。<strong>面对完全一样的客体时，不同的主体意味着所构成的现实完全不同</strong>。</p>
<p>有兴趣可以看看我之前写的一篇关于主观认知的文章——<a href="http://mp.weixin.qq.com/s?__biz=MjM5ODk1MjgwMQ==&amp;mid=400800239&amp;idx=1&amp;sn=938f2a6307aef3b87d01b089496ecc47#rd" target="_blank" rel="external">假如我们的主观意识都是别人操控的</a>。</p>
<p>以上只是我这两年的一些胡思乱想，很多时候我自己也是糊涂的，不过总得有个标准以便偶尔跳脱出来审（si）视（kao）自（ren）己（sheng）。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>人是群居动物，环境对人的影响至关重要。不到两年时间，我辗转了几个地方，其中对我影响最大的是在十年后工作的日子，而我最专注、最不浮躁、最无聊的时光是考研的那段，其他的经历好像也都蛮不错，总之是没什么后悔和遗憾。</p>
<p>我做很多事之前都没什么确切的理由，想做便去做了，其实挺任性的。但人生只是个过程，如果日复一日的过着同样的生活真的很无趣。悟已往之不谏，知来者之可追，希望自己在新的一年中能体会更多样的<strong>平凡的人生</strong>吧。最后用一句话来结尾：</p>
<blockquote>
<p>「我还年轻，我渴望上路。带着最初的激情，追寻着最初的梦想，感受着最初的体验，我们上路吧 。」<br>——凯鲁亚克</p>
</blockquote>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;http://music.163.com/outchain/player?type=2&amp;id=16504268&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;在我们 5 岁的时候，过一年相当于经历人生的 1/5，而到了 25 岁的时候，过一年却相当于只经历了人生的 1/25。时间的重要性似乎随着我们年龄的增长而变得越来越低。主观感受上我们觉得时间走的越来越快了，而实际上却是我们对时空的认知变得扭曲了。&lt;/p&gt;
&lt;p&gt;所以我们需要不断整理、回顾自己的人生，就像偶尔给自己留张自拍一样，说不定哪一天就忘记自己当时长什么样了。&lt;/p&gt;
&lt;p&gt;距离我上次大学毕业总结（&lt;a href=&quot;http://geekplux.com/2014/02/02/goodbye_my_university.html&quot;&gt;Goodbye，我的大学&lt;/a&gt;）已经过去了两年。都说 20-25 岁的年纪是人生最不怕折腾的年纪，如今我躺在床上，闭眼回想自己这过去的两年，满是&lt;strong&gt;任性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文和上次总结不同，将以时（liu）间（shui）线（zhang）的方式来叙述。两年的经历可以分为六个部分，其中五和六两个部分属于持续经历，七是一些胡思乱想。如果你觉得废话太多，可以只看&lt;strong&gt;黑体字&lt;/strong&gt;部分或最后的总结。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、初到上海&quot;&gt;&lt;a href=&quot;#一、初到上海&quot; class=&quot;headerlink&quot; title=&quot;一、初到上海&quot;&gt;&lt;/a&gt;一、初到上海&lt;/h2&gt;&lt;p&gt;这完全是一次没有计划，说走就走的求职之路，当时的我还没意识到「&lt;strong&gt;大学毕业后的第一份工作至关重要&lt;/strong&gt;」这一点。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://geekplux.com/categories/Life/"/>
    
    
      <category term="总结" scheme="http://geekplux.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="Summary" scheme="http://geekplux.com/tags/Summary/"/>
    
      <category term="生活" scheme="http://geekplux.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="Life" scheme="http://geekplux.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>建立索引式的学习方法</title>
    <link href="http://geekplux.com/2015/12/08/learning-by-index.html"/>
    <id>http://geekplux.com/2015/12/08/learning-by-index.html</id>
    <published>2015-12-08T13:53:27.000Z</published>
    <updated>2016-02-03T07:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习方法的重要性不必多言，相信每个人都知道。然而，并不是掌握了好的学习方法，就可以让你事半功倍，而是要找到适合自己的学习方法。<strong>索引式</strong>的学习方法就很适合我。</p>
<h2 id="何为索引式的学习方法"><a href="#何为索引式的学习方法" class="headerlink" title="何为索引式的学习方法"></a>何为索引式的学习方法</h2><p>索引式的学习方法是我自己起的名字，我不知道在别人那里叫什么。其要义是指<strong>在学习一项技能时，先不深究其细节，而是建立索引</strong>。这就像看书时先看目录一样，把目录多看几遍，对整本书的结构有所了解之后，再去看自己想看的章节。</p>
<h2 id="为什么要建立索引式的学习方法"><a href="#为什么要建立索引式的学习方法" class="headerlink" title="为什么要建立索引式的学习方法"></a>为什么要建立索引式的学习方法</h2><h3 id="迅速建立知识框架"><a href="#迅速建立知识框架" class="headerlink" title="迅速建立知识框架"></a>迅速建立知识框架</h3><p>循序渐进，步步为营的学习方法已经不适合现在的节奏了。这我在上次的文章《入门为什么这么难》里已经提到过：<strong>掌握一项技能要迅速掌握其主干，其余的细枝末节都不去管</strong>。</p>
<p>学习一项技能时，你不能保证你目前所在学的东西将来会用到。就算用到，也可能没有你现在所探究的这么深入。那么我们<strong>只需要知道有这个东西，在脑中建立这部分知识的索引，等用到他的时候再去查阅资料重新学习就好</strong>。</p>
<a id="more"></a>
<h3 id="专注突破，实践巩固"><a href="#专注突破，实践巩固" class="headerlink" title="专注突破，实践巩固"></a>专注突破，实践巩固</h3><p>建立索引之后，其他部分的知识可以暂时地抛诸脑后，而把<strong>精力专注在当前的节点</strong>，「集中优势兵力迅速突破」。</p>
<p>表面上，因其不究细节，索引式的学习方法仿佛对知识的了解都浮于表面。但事实上，对于当前在学的、要用的它都力求扎实掌握，熟练运用。</p>
<p>不仅如此，因为索引式的学习方法强调<strong>用时才学</strong>，这就保证你现在要学的，肯定是你即将要用到的。学完之后马上运用，相当于二次学习。<strong>实践会加深对知识的理解</strong>，就像中学时做题是概念的补充一样。</p>
<h2 id="建立索引的核心方法"><a href="#建立索引的核心方法" class="headerlink" title="建立索引的核心方法"></a>建立索引的核心方法</h2><p>如何建立索引？首先要了解怎么样才算真正的把索引建立成功。</p>
<p>建立成功索引的标准是你在<strong>遇到问题时能立马浮现出这是在运用哪一块的知识</strong>。比如需要抠图的时候，应该运用Photoshop的快速选择工具，需要去除水印的时候，应该运用Photoshop的仿制图章工具或者修补工具等等。</p>
<p>所以建立索引的核心方法是<strong>要了解该技能（软件、工具）每一处知识点（功能）的用处是什么</strong>。它能解决什么问题，遇到什么问题的时候需要用到这块的知识。</p>
<p>如果教材里没说，自己也看不懂，就记下这个名词，或者该章节提到的一些关键字。以便<strong>将来搜索时知道用什么关键字去搜，或者搜索结果中提到的关键字能让你联想到是在用哪部分的知识</strong>。</p>
<p>建立索引的方式不拘一格，可以按照知识点去建，也可以按照用途、方向来建，亦或按照学习目的去建，随你喜欢。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>听过那么多的道理，依然过不好一生。见过这么多的学习方法，依旧学不好。索引式的学习方法适合那种学得快忘得也快的人，所以自己多琢磨琢磨，针对自己特点总结出一套方法论才是最好的。尽量提升效益，而不是增加成本。个人愚见，请多指点。</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习方法的重要性不必多言，相信每个人都知道。然而，并不是掌握了好的学习方法，就可以让你事半功倍，而是要找到适合自己的学习方法。&lt;strong&gt;索引式&lt;/strong&gt;的学习方法就很适合我。&lt;/p&gt;
&lt;h2 id=&quot;何为索引式的学习方法&quot;&gt;&lt;a href=&quot;#何为索引式的学习方法&quot; class=&quot;headerlink&quot; title=&quot;何为索引式的学习方法&quot;&gt;&lt;/a&gt;何为索引式的学习方法&lt;/h2&gt;&lt;p&gt;索引式的学习方法是我自己起的名字，我不知道在别人那里叫什么。其要义是指&lt;strong&gt;在学习一项技能时，先不深究其细节，而是建立索引&lt;/strong&gt;。这就像看书时先看目录一样，把目录多看几遍，对整本书的结构有所了解之后，再去看自己想看的章节。&lt;/p&gt;
&lt;h2 id=&quot;为什么要建立索引式的学习方法&quot;&gt;&lt;a href=&quot;#为什么要建立索引式的学习方法&quot; class=&quot;headerlink&quot; title=&quot;为什么要建立索引式的学习方法&quot;&gt;&lt;/a&gt;为什么要建立索引式的学习方法&lt;/h2&gt;&lt;h3 id=&quot;迅速建立知识框架&quot;&gt;&lt;a href=&quot;#迅速建立知识框架&quot; class=&quot;headerlink&quot; title=&quot;迅速建立知识框架&quot;&gt;&lt;/a&gt;迅速建立知识框架&lt;/h3&gt;&lt;p&gt;循序渐进，步步为营的学习方法已经不适合现在的节奏了。这我在上次的文章《入门为什么这么难》里已经提到过：&lt;strong&gt;掌握一项技能要迅速掌握其主干，其余的细枝末节都不去管&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;学习一项技能时，你不能保证你目前所在学的东西将来会用到。就算用到，也可能没有你现在所探究的这么深入。那么我们&lt;strong&gt;只需要知道有这个东西，在脑中建立这部分知识的索引，等用到他的时候再去查阅资料重新学习就好&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Thought" scheme="http://geekplux.com/categories/Thought/"/>
    
    
      <category term="方法论" scheme="http://geekplux.com/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
      <category term="学习" scheme="http://geekplux.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Learning" scheme="http://geekplux.com/tags/Learning/"/>
    
  </entry>
  
  <entry>
    <title>为什么我喜欢写代码</title>
    <link href="http://geekplux.com/2015/11/13/why-i-like-coding.html"/>
    <id>http://geekplux.com/2015/11/13/why-i-like-coding.html</id>
    <published>2015-11-13T15:04:22.000Z</published>
    <updated>2016-11-02T10:19:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>我知道很大一部分的程序员，最初都是游戏爱好者。因为喜欢游戏，进而喜欢电脑，研究它，想知道怎么制作个游戏，怎么破解一个游戏等等。这部分因为喜欢一件事进而喜欢上鼓捣代码的人，算作一类。另一类就是我这种，一开始并不知道自己真正喜欢的是什么，甚至不知道什么是代码，但接触了编程之后，就停不下来的人。</p>
<p>虽然我在高考填志愿的时候，专业一栏都写的是「计算机科学与技术」，但我对这个专业的了解比对女性生理结构的了解还少。大一的课程终于接触到了真正的代码，我却没有因此产生浓厚的兴趣。而后来，当运行成功一个自己编写的程序时，那种头皮发麻，一股电流从背脊击穿头部的感觉，让我瞬间明白了这才是我该做一辈子的事。</p>
<h2 id="编程的反馈很快"><a href="#编程的反馈很快" class="headerlink" title="编程的反馈很快"></a>编程的反馈很快</h2><p>编程之所以有趣，最主要的原因是它能即时反馈。你写下一行代码，立即就能知道它的对错；你写完一个程序，一运行就能知道成功与否；如果做的是界面，那就更明显了，代码一变，界面立马就变。</p>
<p>所以编程学起来也特别快，它能给你立马呈现出你这两个小时到底学到了什么。成就感的积攒，又会推动你进行下一步的学习，不停迭代。</p>
<p>人总是喜欢能更快得到回报的东西。</p>
<h2 id="痛并快乐着"><a href="#痛并快乐着" class="headerlink" title="痛并快乐着"></a>痛并快乐着</h2><a id="more"></a>
<p>众所周知，程序员最讨厌八阿哥（Bug)。除非是当天任督二脉被打通，一般情况下程序员写出的代码都会有Bug。有时候找Bug找的真的想撞墙，人都快崩溃了。我至今忘不了当初我上司，每次点击运行之后，大喊一声「决战吧，代码！」的样子。</p>
<p>但只要Bug一被解决，整个人都会「羽化而登仙」。。。被摧残过后的成果最令人兴奋。（不过我在这里友情提醒各位，如果你看到一个程序员眉头紧锁，千万不要去打扰他，不要问我为什么）</p>
<h2 id="编程很实用，且容易出作品"><a href="#编程很实用，且容易出作品" class="headerlink" title="编程很实用，且容易出作品"></a>编程很实用，且容易出作品</h2><p>好的程序员「笔落惊风雨,诗成泣鬼神」，分分钟能做出一个优秀的网站、APP 或实用的小工具。虽然说要做出颠覆世界或者能给自己带来巨额财富的软件很难，但做一个普通的小程序还是没问题的。比如我有个学长，特别喜欢写那种抢秒杀的代码，双十一前后抢到了一部 iPhone 6S 和各种免单。。。</p>
<h2 id="代码改变思维"><a href="#代码改变思维" class="headerlink" title="代码改变思维"></a>代码改变思维</h2><p>Code change the world 这句我一直知道，但代码改变思维我是真切体会到的。尤其是你学的编程语言或者框架多了之后，你的思维会被这些代码所影响。不知不觉，我们的思维方式可能从发散思维，变成了线性思维，或是面对不同的问题采用不同的思维方式。</p>
<p>一切的学科学到最后都是哲学，代码也是有哲学的。它渗透在我们的血液里，给我们渲染出了新的视野。很多程序猿在从业多年之后还保持着强大的好奇心，卓越的学习能力，开阔的眼界，这一定程度上能归功于代码。</p>
<p>虽然现在很多人鼓吹互联网泡沫就要破灭，但我觉得代码仍会是在未来生存必备的技能。美帝宣传「人人都应学编程」不是一句空话。</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我知道很大一部分的程序员，最初都是游戏爱好者。因为喜欢游戏，进而喜欢电脑，研究它，想知道怎么制作个游戏，怎么破解一个游戏等等。这部分因为喜欢一件事进而喜欢上鼓捣代码的人，算作一类。另一类就是我这种，一开始并不知道自己真正喜欢的是什么，甚至不知道什么是代码，但接触了编程之后，就停不下来的人。&lt;/p&gt;
&lt;p&gt;虽然我在高考填志愿的时候，专业一栏都写的是「计算机科学与技术」，但我对这个专业的了解比对女性生理结构的了解还少。大一的课程终于接触到了真正的代码，我却没有因此产生浓厚的兴趣。而后来，当运行成功一个自己编写的程序时，那种头皮发麻，一股电流从背脊击穿头部的感觉，让我瞬间明白了这才是我该做一辈子的事。&lt;/p&gt;
&lt;h2 id=&quot;编程的反馈很快&quot;&gt;&lt;a href=&quot;#编程的反馈很快&quot; class=&quot;headerlink&quot; title=&quot;编程的反馈很快&quot;&gt;&lt;/a&gt;编程的反馈很快&lt;/h2&gt;&lt;p&gt;编程之所以有趣，最主要的原因是它能即时反馈。你写下一行代码，立即就能知道它的对错；你写完一个程序，一运行就能知道成功与否；如果做的是界面，那就更明显了，代码一变，界面立马就变。&lt;/p&gt;
&lt;p&gt;所以编程学起来也特别快，它能给你立马呈现出你这两个小时到底学到了什么。成就感的积攒，又会推动你进行下一步的学习，不停迭代。&lt;/p&gt;
&lt;p&gt;人总是喜欢能更快得到回报的东西。&lt;/p&gt;
&lt;h2 id=&quot;痛并快乐着&quot;&gt;&lt;a href=&quot;#痛并快乐着&quot; class=&quot;headerlink&quot; title=&quot;痛并快乐着&quot;&gt;&lt;/a&gt;痛并快乐着&lt;/h2&gt;
    
    </summary>
    
      <category term="Life" scheme="http://geekplux.com/categories/Life/"/>
    
    
      <category term="生活" scheme="http://geekplux.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="感想" scheme="http://geekplux.com/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="情感" scheme="http://geekplux.com/tags/%E6%83%85%E6%84%9F/"/>
    
      <category term="代码" scheme="http://geekplux.com/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>写文章的小技巧</title>
    <link href="http://geekplux.com/2015/10/28/writing-skills.html"/>
    <id>http://geekplux.com/2015/10/28/writing-skills.html</id>
    <published>2015-10-28T10:24:11.000Z</published>
    <updated>2016-06-02T13:46:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>既然是小技巧，那么就不敢班门弄斧，只简单说说自己平时遵循的几条写作原则：</p>
<h2 id="尽量用短句"><a href="#尽量用短句" class="headerlink" title="尽量用短句"></a>尽量用短句</h2><ul>
<li>写作以表达清晰为首要宗旨，所以 <strong>尽量用短句</strong> 。长句会增加理解成本，尤其是对于中文来说。中文的定语是放在被修饰词前面的，不像英语通常放在后面，用从句很容易扩展。中文你要用从句，还 <strong>不如直接另起一句话</strong> 。</li>
</ul>
<p>而且能一句话说清楚的，不要绕来绕去解释。</p>
<ul>
<li>在句语句之间 <strong>多用连接词</strong> ，一方面表明其联系，一方面增强连贯性。</li>
<li><strong>不要用晦涩难懂的词</strong> 。我们不是在写高考作文。</li>
<li><strong>对标点的使用要尽量规范。</strong> 尽量少用感叹号。</li>
</ul>
<h2 id="文章逻辑要清晰"><a href="#文章逻辑要清晰" class="headerlink" title="文章逻辑要清晰"></a>文章逻辑要清晰</h2><h3 id="分段、分点说明"><a href="#分段、分点说明" class="headerlink" title="分段、分点说明"></a>分段、分点说明</h3><p>众所周知，我们现在看到长篇大论的文章都难以下咽。但如果在文中加几个段落标题，效果就大大不同。<br>同样的，在遇到排列句的时候，每句单独成行，比一整段要清晰的多。</p>
<p>这些措施一方面是在排版上进行改进，提升了阅读体验。更重要的一方面是这样使你的文章逻辑更加清晰。<br><strong>写文章和做数学证明题一模一样。每一段都证明一个小问题，下一段的证明，依赖于上一段的结论。</strong> 所以每段有个主题，就比胡乱写强很多。</p>
<a id="more"></a>
<h3 id="要有重点"><a href="#要有重点" class="headerlink" title="要有重点"></a>要有重点</h3><p>无论说话还是写作，都最忌没有重点。如果读完一篇文章，你不知道这篇文章的主旨是什么；读完一段话，你不知道这段话是在讲什么。那这篇文章就太失败了。<br>用粗体把重点标注出来，很容易吸引眼球。</p>
<h2 id="随时记录"><a href="#随时记录" class="headerlink" title="随时记录"></a>随时记录</h2><p>想题目恐怕是世界上最难的事情了。其实日常生活中，很多时刻会有想写的冲动。尤其是发呆的时候，脑子里估计都写了一大段了，但一被打断，又忘得一干二净。等真正要写文章的时候，只能拔剑四顾心茫然。<br>所以我们 <strong>平时一旦有点小思路，就拿手机记下来</strong> 。反正手机不离身，记东西很方便。不用记太细，记些关键字也行，整个过程耗时不会超过一分钟。</p>
<h2 id="立即动笔（键盘）"><a href="#立即动笔（键盘）" class="headerlink" title="立即动笔（键盘）"></a>立即动笔（键盘）</h2><p>题目定好以后，很多人会觉得，自己才想好了文章的前两点，后面都不知道怎么写。所以还是等彻底想好再提笔吧。<br>我以前也这样，后来发现自己真是大错特错，因为 <strong>写作可以帮助我们更好的思考</strong> 。为什么我们脑子里只想到一两点，因为我们的脑子暂时被这两点占满了。你想来想去，思路在脑子里兜圈子，怎么也绕不出这两点。<br>此时如果你写下来，把这两点「释放」到书面上，脑子放空之后自然能想到三四五点。如果把大脑比作 CPU 的话，文章就是缓存。我们把计算出的数据暂时存放在缓存中，才能更好的计算。</p>
<p>具体为什么写作能让你更好的思考，可参考这篇 <a href="http://mindhacks.cn/2009/02/09/writing-is-better-thinking" target="_blank" rel="external">书写是为了更好的思考</a> 文章。</p>
<p>综上所述，想到一点就立即动笔。我这篇在写之前，就只想到了目前篇幅的三分之一。</p>
<hr>
<p>好了，今天要说的就是这么多。另外有的童鞋说昨天的文章有种戛然而止的感觉，确实，主要是因为我在最后一段提了个问句的原因。所以今天这篇就算作昨天那个问题的补充吧。</p>
<p>欢迎关注我的公众号：haoqihaisimao_weixin</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/qrcode_for_gh_2df3b33e3297_258.jpg" alt=""></p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;既然是小技巧，那么就不敢班门弄斧，只简单说说自己平时遵循的几条写作原则：&lt;/p&gt;
&lt;h2 id=&quot;尽量用短句&quot;&gt;&lt;a href=&quot;#尽量用短句&quot; class=&quot;headerlink&quot; title=&quot;尽量用短句&quot;&gt;&lt;/a&gt;尽量用短句&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;写作以表达清晰为首要宗旨，所以 &lt;strong&gt;尽量用短句&lt;/strong&gt; 。长句会增加理解成本，尤其是对于中文来说。中文的定语是放在被修饰词前面的，不像英语通常放在后面，用从句很容易扩展。中文你要用从句，还 &lt;strong&gt;不如直接另起一句话&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而且能一句话说清楚的，不要绕来绕去解释。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在句语句之间 &lt;strong&gt;多用连接词&lt;/strong&gt; ，一方面表明其联系，一方面增强连贯性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要用晦涩难懂的词&lt;/strong&gt; 。我们不是在写高考作文。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对标点的使用要尽量规范。&lt;/strong&gt; 尽量少用感叹号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;文章逻辑要清晰&quot;&gt;&lt;a href=&quot;#文章逻辑要清晰&quot; class=&quot;headerlink&quot; title=&quot;文章逻辑要清晰&quot;&gt;&lt;/a&gt;文章逻辑要清晰&lt;/h2&gt;&lt;h3 id=&quot;分段、分点说明&quot;&gt;&lt;a href=&quot;#分段、分点说明&quot; class=&quot;headerlink&quot; title=&quot;分段、分点说明&quot;&gt;&lt;/a&gt;分段、分点说明&lt;/h3&gt;&lt;p&gt;众所周知，我们现在看到长篇大论的文章都难以下咽。但如果在文中加几个段落标题，效果就大大不同。&lt;br&gt;同样的，在遇到排列句的时候，每句单独成行，比一整段要清晰的多。&lt;/p&gt;
&lt;p&gt;这些措施一方面是在排版上进行改进，提升了阅读体验。更重要的一方面是这样使你的文章逻辑更加清晰。&lt;br&gt;&lt;strong&gt;写文章和做数学证明题一模一样。每一段都证明一个小问题，下一段的证明，依赖于上一段的结论。&lt;/strong&gt; 所以每段有个主题，就比胡乱写强很多。&lt;/p&gt;
    
    </summary>
    
      <category term="Thought" scheme="http://geekplux.com/categories/Thought/"/>
    
    
      <category term="Blog" scheme="http://geekplux.com/tags/Blog/"/>
    
      <category term="Thought" scheme="http://geekplux.com/tags/Thought/"/>
    
      <category term="Skill" scheme="http://geekplux.com/tags/Skill/"/>
    
      <category term="Writing" scheme="http://geekplux.com/tags/Writing/"/>
    
      <category term="写文章" scheme="http://geekplux.com/tags/%E5%86%99%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>为什么文章写得好的人都很厉害</title>
    <link href="http://geekplux.com/2015/10/27/why-those-who-write-great-articles-is-so-powerful.html"/>
    <id>http://geekplux.com/2015/10/27/why-those-who-write-great-articles-is-so-powerful.html</id>
    <published>2015-10-27T14:22:22.000Z</published>
    <updated>2016-11-02T10:20:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先定义什么是好文章。我觉得 <strong>能让读者领悟自己想表达的</strong> 就叫好文章。换种说法就是 <strong>能达到自己写作目的</strong> 的文章就叫好文章。</p>
<p>每个人写作的目的不同，有的人抒情，有的人叙事，有的人论证，但这最终的目的都是为了 <strong>让读者理解</strong> 。即使你的目的是故弄玄虚（或者让别人猜不透自己），本质上也是让别人把你的文章解读成你想让他解读的样子。</p>
<p>所以，能写出好文章的人，具备两个重要的能力。</p>
<ul>
<li><strong>能恰如其分表达自己想法的能力</strong></li>
<li><strong>能让对方理解自己想法的能力</strong></li>
</ul>
<p>这两点看起来易如反掌，一般人也以为自己都做到了，但实际的情况是： <strong>我说的和我脑子里想的不太一样，你理解的和我说的不太一样</strong> 。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/640.jpg" alt=""></p>
<a id="more"></a>
<p>要做到第一点，首先要对自己脑子中的想法有很好的把握，其次要对文字运用的很熟练。这样写出来的文章才结构清晰，逻辑通顺，言简意赅（说白了就是简单简单再简单）。文字的运用取决于多年来对语言的积累，对想法的把握则需要多了解自己的思维方式，锻炼思维能力……我相信你也知道，我们9年义务教育都在锻炼一种叫思维能力的东西。</p>
<p>要做到第二点，则要照顾到对方的理解能力。比如很多博士写出来的论文，读者根本看不懂，因为读者无法站在和他一样的高度去理解他的文章。继而导致他的文章不流行。而有一个人，他既能理解原作者的文章，又有很好的文字功底，把原文改写的通俗易懂再发出来。大家一看就懂，于是觉得这个人很厉害。其实很多所谓的畅销书不都是这样么。</p>
<p>我觉得拥有以上两点的人基本已经无敌了。不信你可以去拜读一下我朝太祖的文章，感受一下高深哲学被解释成蕃茄鸡蛋的感觉。</p>
<p>那么如何拥有这样的能力呢？我认为写作就是最好的锻炼方式。所以这是个正循环：</p>
<blockquote>
<p>写得好-&gt;变厉害-&gt;写得更好</p>
</blockquote>
<p>从把文章写简单做起吧。</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先定义什么是好文章。我觉得 &lt;strong&gt;能让读者领悟自己想表达的&lt;/strong&gt; 就叫好文章。换种说法就是 &lt;strong&gt;能达到自己写作目的&lt;/strong&gt; 的文章就叫好文章。&lt;/p&gt;
&lt;p&gt;每个人写作的目的不同，有的人抒情，有的人叙事，有的人论证，但这最终的目的都是为了 &lt;strong&gt;让读者理解&lt;/strong&gt; 。即使你的目的是故弄玄虚（或者让别人猜不透自己），本质上也是让别人把你的文章解读成你想让他解读的样子。&lt;/p&gt;
&lt;p&gt;所以，能写出好文章的人，具备两个重要的能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;能恰如其分表达自己想法的能力&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;能让对方理解自己想法的能力&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两点看起来易如反掌，一般人也以为自己都做到了，但实际的情况是： &lt;strong&gt;我说的和我脑子里想的不太一样，你理解的和我说的不太一样&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7b1evr.com1.z0.glb.clouddn.com/640.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Thought" scheme="http://geekplux.com/categories/Thought/"/>
    
    
      <category term="感想" scheme="http://geekplux.com/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="Writing" scheme="http://geekplux.com/tags/Writing/"/>
    
      <category term="写文章" scheme="http://geekplux.com/tags/%E5%86%99%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>如何管理好自己的密码</title>
    <link href="http://geekplux.com/2015/09/24/password-management.html"/>
    <id>http://geekplux.com/2015/09/24/password-management.html</id>
    <published>2015-09-24T09:08:59.000Z</published>
    <updated>2016-11-02T10:20:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近 Xcode Ghost 席卷三大平台，有预谋有组织有纪律。很多人看到这个消息纷纷修改常用密码，但我觉得密码管理其实功在平时，一个好的密码可以大幅提升你账户的安全系数。</p>
<p>而且，现在基本上每个网站都需要注册才能享用全部服务，我自己注册了上百个网站，意味者我有上百个账号密码需要记，用脑子记根本记不住（没办法，记忆力差）。后来我慢慢摸索出自己的一套策略用来管理密码，感觉实用且不算复杂。</p>
<h2 id="设计方法"><a href="#设计方法" class="headerlink" title="设计方法"></a>设计方法</h2><ol>
<li>首先要对账号和密码进行<strong>分级分类</strong>。根据重要性、产品使用频率、产品应用场景来分。我自己分为五类：银行卡类、涉及支付类、社交账号、涉及数据存储类（各种云存储、云服务等）、其他。</li>
<li>银行卡类：<strong>单独</strong>设6位数字，每张银行卡都有各自的密码（规则自己定：比如前三位是自己想的，后三位是卡号的某几位）。</li>
<li>涉及支付类：<strong>单独</strong>设密码，方法参考5、6两点。</li>
<li>社交账号类、涉及数据存储类：<strong>着重对待</strong>，方法同样参考5、6两点。</li>
<li>密码设计方法：单独想出一句话，用这句话每个字的<strong>首字母</strong>构成密码最基本的部分。大小写和符号自己<strong>有规律</strong>地加。</li>
<li><strong>排列组合</strong>：密码太多记不住很正常。可以用两组（或多组）短语排列组合成整套密码。</li>
<li>银行、涉及支付类、重度使用产品均<strong>定期更换</strong>密码。一般密码位数不低于15位（不要以为15位很长）。</li>
</ol>
<a id="more"></a>
<h2 id="密码存储"><a href="#密码存储" class="headerlink" title="密码存储"></a>密码存储</h2><p>那么密码设计出来，要存到哪里去呢？</p>
<ul>
<li><strong>全部用脑子记住</strong>。这种最安全也是最高效的方法，但是需要记忆力。</li>
<li>用 1Password, Lastpass 等密码管理软件记。我觉得这个适用于上文提到的「其他类」。</li>
<li>用文本笔记、表格记录。这个也没什么不可以，但是你一定要保存好这份文件，否则后果很严重。这里有个小技巧，你可以把密码全记录到一个 excel 文件中，然后把文件后缀改为 <code>.avi</code>，以此类推。</li>
</ul>
<p>以上就是我全部的方法了。之所以分成五类主要是因为涉及钱的账号密码，一旦泄密损失的是自己，而社交账号和数据泄密损失的是他人。</p>
<p>一般人可能会觉得自己的数据没什么价值，而且朋友们也都很机智。但是在特定情况下，你的数据会有可怕的功用。想象一下，一个人如果拥有你的绝大部分数据，同时又拥有你所有的人际关系。那么他就可以轻易的运用数据去模仿出你的样子，从而获取他人的信任。一旦获得对方的完全信任，注意，是完全信任，那对方就会沦为待宰的羔羊，任人摆布。</p>
<p>总之，密码和我们的生活息息相关，管理好自己的密码说不定还会有意外的收获：<br><a href="http://www.jianshu.com/p/a1220fd27e2f" target="_blank" rel="external">一个密码改变了我的人生</a></p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近 Xcode Ghost 席卷三大平台，有预谋有组织有纪律。很多人看到这个消息纷纷修改常用密码，但我觉得密码管理其实功在平时，一个好的密码可以大幅提升你账户的安全系数。&lt;/p&gt;
&lt;p&gt;而且，现在基本上每个网站都需要注册才能享用全部服务，我自己注册了上百个网站，意味者我有上百个账号密码需要记，用脑子记根本记不住（没办法，记忆力差）。后来我慢慢摸索出自己的一套策略用来管理密码，感觉实用且不算复杂。&lt;/p&gt;
&lt;h2 id=&quot;设计方法&quot;&gt;&lt;a href=&quot;#设计方法&quot; class=&quot;headerlink&quot; title=&quot;设计方法&quot;&gt;&lt;/a&gt;设计方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;首先要对账号和密码进行&lt;strong&gt;分级分类&lt;/strong&gt;。根据重要性、产品使用频率、产品应用场景来分。我自己分为五类：银行卡类、涉及支付类、社交账号、涉及数据存储类（各种云存储、云服务等）、其他。&lt;/li&gt;
&lt;li&gt;银行卡类：&lt;strong&gt;单独&lt;/strong&gt;设6位数字，每张银行卡都有各自的密码（规则自己定：比如前三位是自己想的，后三位是卡号的某几位）。&lt;/li&gt;
&lt;li&gt;涉及支付类：&lt;strong&gt;单独&lt;/strong&gt;设密码，方法参考5、6两点。&lt;/li&gt;
&lt;li&gt;社交账号类、涉及数据存储类：&lt;strong&gt;着重对待&lt;/strong&gt;，方法同样参考5、6两点。&lt;/li&gt;
&lt;li&gt;密码设计方法：单独想出一句话，用这句话每个字的&lt;strong&gt;首字母&lt;/strong&gt;构成密码最基本的部分。大小写和符号自己&lt;strong&gt;有规律&lt;/strong&gt;地加。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排列组合&lt;/strong&gt;：密码太多记不住很正常。可以用两组（或多组）短语排列组合成整套密码。&lt;/li&gt;
&lt;li&gt;银行、涉及支付类、重度使用产品均&lt;strong&gt;定期更换&lt;/strong&gt;密码。一般密码位数不低于15位（不要以为15位很长）。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Life" scheme="http://geekplux.com/categories/Life/"/>
    
    
      <category term="Tool" scheme="http://geekplux.com/tags/Tool/"/>
    
      <category term="工具" scheme="http://geekplux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="生活" scheme="http://geekplux.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Backbone View 之间通信的三种方式</title>
    <link href="http://geekplux.com/2015/07/04/communicating-between-views-in-backbone.html"/>
    <id>http://geekplux.com/2015/07/04/communicating-between-views-in-backbone.html</id>
    <published>2015-07-04T12:49:33.000Z</published>
    <updated>2015-07-04T13:52:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>掌握一个 MVC 框架，最关键的一节就是掌握如何在各个 View 之间通信。之前用 Angular 时，觉得基于事件的通信方式 ($on, $emit, $boardcast) 或者 基于 service 的方式都非常好用。转战 Backbone 之后，由于对 Backbone 的事件机制理解不够且使用非常灵活，一直没找到一个好的通信方式。直到看见这篇文章，作者通过一个简单的例子，层层深入，把 Backbone View 之间通信的三种方式讲的清晰明了。译文如下（已拿到授权）：</p>
<hr>
<p>我正在开发的这个网页主要有两部分，分别是 document 和 sidebar。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/backbone-application.png" alt="Backbone Application"></p>
<p>如上图所示，我设立了三个视图 (view) :</p>
<p><code>ApplicationView</code> - 作为最外层视图来包含下级视图<br><code>DocumentView</code> - 展示正在编辑或浏览的内容<br><code>SidebarView</code> - 展示一些和 document 相关的信息</p>
<p><code>DocumentView</code> 和 <code>SidebarView</code> 作为 <code>ApplicationView</code> 的子视图，所以整体的视图结构如下图所示：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/backbone-view-structure.png" alt="Backbone View Structure"></p>
<p>用户在任意一个子视图进行操作，另一个子视图都需要随之变化。但由于两个子视图之间并不能直接通知对方（也就是说，它们的作用域没有直接联系，不像父视图，可以包含它所有子视图的作用域），所以，我需要一个事件机制。</p>
<p>在我谷歌和参考其他人的方法之后，我总结出了如下三种不同的通信方式。</p>
<a id="more"></a>
<h3 id="1-通过父视图传递事件"><a href="#1-通过父视图传递事件" class="headerlink" title="1. 通过父视图传递事件"></a>1. 通过父视图传递事件</h3><p>我通过父视图 (<code>ApplicationView</code>) 来为它的两个子视图传递事件。因为父视图包含它所有子视图的作用域，因此用它作为事件传递的媒介最好不过。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/backbone-view-event-relay.png" alt="Backbone View Event Relay"></p>
<p>JavaScript 代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> ApplicationView = Backbone.View.extend(&#123;</div><div class="line"></div><div class="line">  initialize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.documentView = <span class="keyword">new</span> DocumentView(&#123;parent:<span class="keyword">this</span>&#125;);</div><div class="line">    <span class="keyword">this</span>.sidebarView = <span class="keyword">new</span> SidebarView(&#123;parent:<span class="keyword">this</span>&#125;);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.documentView.on(<span class="string">'edit'</span>, <span class="keyword">this</span>.documentEdited, <span class="keyword">this</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  documentEdited : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// do some stuff</span></div><div class="line">    <span class="keyword">this</span>.sidebarView.trigger(<span class="string">'documentEdit'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> DocumentView = Backbone.View.extend(&#123;</div><div class="line"></div><div class="line">  onEdit : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.trigger(<span class="string">'edit'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> SidebarView = Backbone.View.extend(&#123;</div><div class="line"></div><div class="line">  initialize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.on(<span class="string">'documentEdit'</span>, <span class="keyword">this</span>.onDocumentEdit, <span class="keyword">this</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  onDocumentEdit : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// react to document edit.</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
<p>但是，这种方法并不高效。因为我需要在 <code>ApplicationView</code> 中添加一个额外的事件处理函数 <code>documentEdited()</code> 。如果子视图有一堆事件传过来，则在父视图中会不断触发事件处理函数，导致它不堪重负。</p>
<p>那么来看看第二种方法。</p>
<h3 id="2-通过-EventBus-在视图间通信"><a href="#2-通过-EventBus-在视图间通信" class="headerlink" title="2. 通过 EventBus 在视图间通信"></a>2. 通过 EventBus 在视图间通信</h3><p>我通过继承 <strong>Backbone.Events</strong> 来创建一个全局对象 <code>EventBus</code>。把它注入到各个子视图中，用来广播事件。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/backbone-views-event-bus.png" alt="Backbone Views Event Bus"></p>
<p>JavaScript 代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> ApplicationView = Backbone.View.extend(&#123;</div><div class="line"></div><div class="line">  initialize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.eventBus = _.extend(&#123;&#125;, Backbone.Events);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.documentView = <span class="keyword">new</span> DocumentView(&#123;</div><div class="line">      eventBus : <span class="keyword">this</span>.eventBus</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">this</span>.sidebarView = <span class="keyword">new</span> SidebarView(&#123;</div><div class="line">      eventBus : <span class="keyword">this</span>.eventBus</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> DocumentView = Backbone.View.extend(&#123;</div><div class="line"></div><div class="line">  initialize : <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.eventBus = options.eventBus;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  onEdit : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.eventBus.trigger(<span class="string">'documentEdit'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> SidebarView = Backbone.View.extend(&#123;</div><div class="line"></div><div class="line">  initialize : <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.eventBus = options.eventBus;</div><div class="line">    <span class="keyword">this</span>.eventBus.on(<span class="string">'documentEdit'</span>, <span class="keyword">this</span>.onDocumentEdit, <span class="keyword">this</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  onDocumentEdit : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// react to document edit.</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在这个方法中，我把 <code>EventBus</code> 作为一个全局对象用来注册事件。如果我想在各个视图之间通信，只需要在视图中注入 <code>EventBus</code>，就可以通过它方便地触发或监听事件了。</p>
<p><strong>注意</strong>：如果你不想要创建全局对象，你仍然可以创建模块 (module) 或视图 (view) 级别的 <code>EventBus</code> 用来通信。</p>
<p>这个方法已经明显优于第一种方法了。但是需要我们手动的在子视图中引入 <code>EventBus</code>，说明还有可以改进的空间，那么，来看看第三种方法。</p>
<h3 id="3-直接用-Backbone-作为事件注册机"><a href="#3-直接用-Backbone-作为事件注册机" class="headerlink" title="3. 直接用 Backbone 作为事件注册机"></a>3. 直接用 Backbone 作为事件注册机</h3><p>在第二种方法中，我创建了一个单独的 <code>EventBus</code>，继承自 <code>Backbone.Events</code>。但最近我悟到 <code>Backbone</code> 对象本身就是一个混合了 <code>Events</code> 的对象，所以我直接用 <code>Backbone</code> 广播事件，就无需单另创建的 <code>EventBus</code> 了。</p>
<p>而且 Backbone 对象可以直接调用，这样我就不必在每个子视图中手动注入它了。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/backbone-views-backbone-event-bus.png" alt="Backbone as EventBus"></p>
<p>JavaScript 代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ApplicationView = Backbone.View.extend(&#123;</div><div class="line"></div><div class="line">  initialize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.documentView = <span class="keyword">new</span> DocumentView();</div><div class="line">    <span class="keyword">this</span>.sidebarView = <span class="keyword">new</span> SidebarView();</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> DocumentView = Backbone.View.extend(&#123;</div><div class="line"></div><div class="line">  onEdit : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    Backbone.trigger(<span class="string">'documentEdit'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> SidebarView = Backbone.View.extend(&#123;</div><div class="line"></div><div class="line">  initialize : <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">    Backbone.on(<span class="string">'documentEdit'</span>, <span class="keyword">this</span>.onDocumentEdit, <span class="keyword">this</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  onDocumentEdit : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// react to document edit.</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我最终在我的项目中使用了第三种方法。而且在我看来，虽然它直接依赖了全局的 <code>Backbone</code> 对象，但是用起来却异常简洁。</p>
<p>如果有比这更好的方法，欢迎分享交流。</p>
<p>（译文完）</p>
<hr>
<p><strong>原文地址</strong>：<a href="http://veerasundar.com/blog/2013/04/communicating-between-views-in-backbone/" target="_blank" rel="external">Communicating between views in Backbone</a><br><strong>译文地址</strong>：<a href="http://www.geekplux.com/2015/07/04/communicating-between-views-in-backbone.html" target="_blank" rel="external">Backbone View 之间通信的三种方式</a></p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;掌握一个 MVC 框架，最关键的一节就是掌握如何在各个 View 之间通信。之前用 Angular 时，觉得基于事件的通信方式 ($on, $emit, $boardcast) 或者 基于 service 的方式都非常好用。转战 Backbone 之后，由于对 Backbone 的事件机制理解不够且使用非常灵活，一直没找到一个好的通信方式。直到看见这篇文章，作者通过一个简单的例子，层层深入，把 Backbone View 之间通信的三种方式讲的清晰明了。译文如下（已拿到授权）：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我正在开发的这个网页主要有两部分，分别是 document 和 sidebar。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7b1evr.com1.z0.glb.clouddn.com/backbone-application.png&quot; alt=&quot;Backbone Application&quot;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，我设立了三个视图 (view) :&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ApplicationView&lt;/code&gt; - 作为最外层视图来包含下级视图&lt;br&gt;&lt;code&gt;DocumentView&lt;/code&gt; - 展示正在编辑或浏览的内容&lt;br&gt;&lt;code&gt;SidebarView&lt;/code&gt; - 展示一些和 document 相关的信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DocumentView&lt;/code&gt; 和 &lt;code&gt;SidebarView&lt;/code&gt; 作为 &lt;code&gt;ApplicationView&lt;/code&gt; 的子视图，所以整体的视图结构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7b1evr.com1.z0.glb.clouddn.com/backbone-view-structure.png&quot; alt=&quot;Backbone View Structure&quot;&gt;&lt;/p&gt;
&lt;p&gt;用户在任意一个子视图进行操作，另一个子视图都需要随之变化。但由于两个子视图之间并不能直接通知对方（也就是说，它们的作用域没有直接联系，不像父视图，可以包含它所有子视图的作用域），所以，我需要一个事件机制。&lt;/p&gt;
&lt;p&gt;在我谷歌和参考其他人的方法之后，我总结出了如下三种不同的通信方式。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://geekplux.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://geekplux.com/tags/Web/"/>
    
      <category term="译文" scheme="http://geekplux.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Translation" scheme="http://geekplux.com/tags/Translation/"/>
    
      <category term="Backbone" scheme="http://geekplux.com/tags/Backbone/"/>
    
  </entry>
  
  <entry>
    <title>Vim - 适合自己的，才是最好的</title>
    <link href="http://geekplux.com/2015/06/06/vim-those-fit-yourself-are-the-best.html"/>
    <id>http://geekplux.com/2015/06/06/vim-those-fit-yourself-are-the-best.html</id>
    <published>2015-06-06T12:28:21.000Z</published>
    <updated>2015-06-06T12:59:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vim 被称为编辑器之神，是我用过之后才体会到的，用之前实在不敢对它做出什么评价。在大学时代，Vim 的大名就已如雷贯耳，但由于它陡峭的学习曲线，一直望而却步。等真正开始学习之后，发现并没有想象中的复杂，也没有所谓的瓶颈，只要在实际写代码中强迫自己使用就可以了，无形中就会形成习惯。最初的不适，换来的是效率的飞升。这和我当初学习<a href="http://www.geekplux.com/2014/07/06/learn_shuangpin.html" target="_blank" rel="external">双拼</a>的感觉一样。下图是我的 Vim 界面：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/vim.png" alt="我的 Vim 界面"></p>
<h2 id="学习方式"><a href="#学习方式" class="headerlink" title="学习方式"></a>学习方式</h2><p>我一开始也是看了很多教程，这里我就不说具体的学习方法了，因为 Google 上一搜一大堆。</p>
<p>我只想谈一点：很多「过来人」告诫新手，一开始使用 Vim 一定不能使用插件，<strong>要从最纯净的 Vim 开始练习</strong>。他们认为一上手就使用别人的配置，很容易被别人影响，不能领会到自己配置 Vim，这种从无到有的感觉。虽然我也很喜欢折腾的感觉，但这对于学习、入门一个工具来说有点<strong>南辕北辙</strong>，我们学习一个工具就是为了用好它，或者<strong>用它来为我们服务</strong>。为什么要我们去适应它呢？也许这不符合 Vim 的哲学，但是我觉得：</p>
<ul>
<li>Vim 存在这么多年，已经有很多优秀的 Vim 配置（比如：<a href="https://github.com/spf13/spf13-vim" target="_blank" rel="external">spf13-vim</a>），可以为我们节省很多折腾的时间。不过如果你非常喜欢折（zuo）腾（si），那也可以从头开始。</li>
<li>对于新手来说，自己的配置总是很不成熟，到头来还是得参考一些高手的配置。索性一开始用他们的，慢慢删改。</li>
<li>从纯净版开始你会觉得很枯燥，Vim 远没别人口中、视频中所述的酷炫，效率不升反降。这很容易丧失进阶的兴趣。</li>
<li>天下武功，唯快不破，这个时代求快。我不否认先夯实基础，再层层递进的学习方式，但针对不同的学习对象，不同的环境背景，我们还是应该采取最快、最有效的学习方式。</li>
</ul>
<a id="more"></a>
<p>如果你学习 Vim 是为了体验学习的新鲜感，或者业余玩味，请忽略我上面的话。但如果你的最终目的是为了在实际中用到它，提升我们的工作效率，那你不妨和我一样，直接拉别人的配置下来，在 Shell 里输入 Vim 启动，开始写代码！</p>
<p>当时我找到了 <a href="https://github.com/wklken/k-vim" target="_blank" rel="external">k-vim</a>，按照他的安装步骤，很简单就把 Vim 配置好了，启动 Vim，发现界面也很漂亮，嗯，这就是我要的效果。接着，我打开自己那两天正在写的项目，通过仅会的四个快捷键 <strong>HJKL</strong> 移动光标来查看文件。然后我仔细阅读了 <a href="https://github.com/wklken/k-vim" target="_blank" rel="external">k-vim</a> 的 README 文件，把它提到的几个快捷键试了试，感觉很不错。接下来的几天，它的 README 网页我一直开着，遇到想要的快捷键一搜就搞定，虽然写代码的效率确实下降了很多，但对编辑器的使用越来越纯熟。一周之后我已经习惯用 Vim 来编程了。</p>
<p>接下来开始进一步研究 Vim，理解 Vim  的<strong>三种模式</strong>（正常模式、命令模式、视图模式），然后掌握如何配置<strong>插件</strong>和<strong>快捷键</strong>就OK了。最关键一点就是要实战，强迫自己所有的操作只用键盘，强迫只用 Vim 作编辑器。</p>
<h2 id="插件与快捷键"><a href="#插件与快捷键" class="headerlink" title="插件与快捷键"></a>插件与快捷键</h2><p>Vim 的插件可以通过 <a href="https://github.com/gmarik/Vundle.vim" target="_blank" rel="external">Vundle</a> 来管理。（据说 <a href="https://github.com/junegunn/vim-plug" target="_blank" rel="external">vim-plug</a> 也挺好用）</p>
<p>只需两步：</p>
<ul>
<li>在 <code>vimrc.bundles</code> 文件中配置你想要的插件</li>
<li>在 Vim 的命令模式中输入<code>:BundleInstall</code></li>
</ul>
<p>其他的命令有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:BundleUpdate    //更新插件</div><div class="line">:BundleClean     //删除插件</div></pre></td></tr></table></figure>
<p>个人觉得必备的插件：</p>
<ul>
<li>syntastic 多语言语法检查</li>
<li>YouCompleteMe 代码自动补全</li>
<li>ctrlp.vim 文件搜索，类似 Sublime Text 里面的 Cmd + P</li>
<li>vim-airline 状态栏增强</li>
<li>nerdtree目录树</li>
<li>vim-ctrlspace tab/buffer导航增强</li>
</ul>
<p>而快捷键的学习方法，就是用到的时候去 Google，多用几次就记住了。如果它自带的快捷键用着不舒服，你完全可以自己重设，Vim 就是自由，不必拘泥条条框框。</p>
<h2 id="哲学"><a href="#哲学" class="headerlink" title="哲学"></a>哲学</h2><p>非常推荐阅读 Stack Overflow 上的这篇回答：</p>
<p><a href="http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim" target="_blank" rel="external">What is your most productive shortcut with Vim?</a></p>
<p>这篇真正阐述了 Vim 作者当初设计 Vim 快捷键时的哲学，看懂这篇对 Vim 快捷键的掌握会更上一层。</p>
<h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>在学习 Vim、使用 Vim 的过程中，我最大的感悟就是<strong>「适合自己的，才是最好的」</strong>。</p>
<p>很多插件看起来很酷炫，快捷键几下就能实现很繁杂的操作，但是你不一定会有使用这个插件的需求，或者即使用也用的不多。有人总喜欢拿 IDE 和 Vim 比，我觉得这根本没有比较的必要，你两个都用也没什么问题。大的项目，复杂的文件结构和引用，你不用 IDE 而用 Vim，是浪费时间。而且一般 IDE 都提供了 Vim 模式，你仍可以在 IDE 中继续击键如飞。</p>
<p>用 Vim 体验的是一种<strong>轻便、自由、可塑</strong>的感觉。你可以根据自己的需求来培养 Vim，这就像恋（gao）爱（ji）一样是两个人互相适应的过程。互相习惯才能把效率最大化。</p>
<hr>
<h3 id="推荐链接"><a href="#推荐链接" class="headerlink" title="推荐链接"></a>推荐链接</h3><ul>
<li><a href="http://vim-adventures.com/" target="_blank" rel="external">Vim Adventure</a>  Vim 小游戏</li>
<li><a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/" target="_blank" rel="external">Learn Vim Progressively</a> 中文版：<a href="http://coolshell.cn/articles/5426.html" target="_blank" rel="external">简明 Vim 练级攻略</a></li>
<li><a href="http://learnvimscriptthehardway.stevelosh.com/" target="_blank" rel="external">Learn Vimscript the Hard Way</a> 中文版：<a href="http://learnvimscriptthehardway.onefloweroneworld.com/" target="_blank" rel="external">笨方法学Vimscript</a></li>
<li><a href="http://www.openvim.com/tutorial.html" target="_blank" rel="external">交互式学习 Vim</a></li>
<li><a href="http://vimawesome.com/" target="_blank" rel="external">Vim Awesome</a> Awesome Vim plugins from across the universe</li>
<li><a href="http://cenalulu.github.io/linux/all-vim-cheatsheat/" target="_blank" rel="external">史上最全Vim快捷键键位图 – 入门到进阶</a></li>
<li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="external">所需即所获：像 IDE 一样使用 vim</a></li>
<li><a href="http://yuez.me/jiang-ni-de-vim-da-zao-cheng-qing-qiao-qiang-da-de-ide/" target="_blank" rel="external">将你的Vim 打造成轻巧强大的IDE</a></li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vim 被称为编辑器之神，是我用过之后才体会到的，用之前实在不敢对它做出什么评价。在大学时代，Vim 的大名就已如雷贯耳，但由于它陡峭的学习曲线，一直望而却步。等真正开始学习之后，发现并没有想象中的复杂，也没有所谓的瓶颈，只要在实际写代码中强迫自己使用就可以了，无形中就会形成习惯。最初的不适，换来的是效率的飞升。这和我当初学习&lt;a href=&quot;http://www.geekplux.com/2014/07/06/learn_shuangpin.html&quot;&gt;双拼&lt;/a&gt;的感觉一样。下图是我的 Vim 界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7b1evr.com1.z0.glb.clouddn.com/vim.png&quot; alt=&quot;我的 Vim 界面&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;学习方式&quot;&gt;&lt;a href=&quot;#学习方式&quot; class=&quot;headerlink&quot; title=&quot;学习方式&quot;&gt;&lt;/a&gt;学习方式&lt;/h2&gt;&lt;p&gt;我一开始也是看了很多教程，这里我就不说具体的学习方法了，因为 Google 上一搜一大堆。&lt;/p&gt;
&lt;p&gt;我只想谈一点：很多「过来人」告诫新手，一开始使用 Vim 一定不能使用插件，&lt;strong&gt;要从最纯净的 Vim 开始练习&lt;/strong&gt;。他们认为一上手就使用别人的配置，很容易被别人影响，不能领会到自己配置 Vim，这种从无到有的感觉。虽然我也很喜欢折腾的感觉，但这对于学习、入门一个工具来说有点&lt;strong&gt;南辕北辙&lt;/strong&gt;，我们学习一个工具就是为了用好它，或者&lt;strong&gt;用它来为我们服务&lt;/strong&gt;。为什么要我们去适应它呢？也许这不符合 Vim 的哲学，但是我觉得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vim 存在这么多年，已经有很多优秀的 Vim 配置（比如：&lt;a href=&quot;https://github.com/spf13/spf13-vim&quot;&gt;spf13-vim&lt;/a&gt;），可以为我们节省很多折腾的时间。不过如果你非常喜欢折（zuo）腾（si），那也可以从头开始。&lt;/li&gt;
&lt;li&gt;对于新手来说，自己的配置总是很不成熟，到头来还是得参考一些高手的配置。索性一开始用他们的，慢慢删改。&lt;/li&gt;
&lt;li&gt;从纯净版开始你会觉得很枯燥，Vim 远没别人口中、视频中所述的酷炫，效率不升反降。这很容易丧失进阶的兴趣。&lt;/li&gt;
&lt;li&gt;天下武功，唯快不破，这个时代求快。我不否认先夯实基础，再层层递进的学习方式，但针对不同的学习对象，不同的环境背景，我们还是应该采取最快、最有效的学习方式。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://geekplux.com/categories/Tool/"/>
    
    
      <category term="Tool" scheme="http://geekplux.com/tags/Tool/"/>
    
      <category term="工具" scheme="http://geekplux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Vim" scheme="http://geekplux.com/tags/Vim/"/>
    
      <category term="IDE" scheme="http://geekplux.com/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>轻松玩转 Ukulele</title>
    <link href="http://geekplux.com/2015/01/05/play-ukulele.html"/>
    <id>http://geekplux.com/2015/01/05/play-ukulele.html</id>
    <published>2015-01-05T15:54:00.000Z</published>
    <updated>2016-07-25T07:51:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>每个人都幻想过自己拥有一身的艺术细菌，可以像各种钢琴王子一样在琴键上挥洒自如。但是由于某些不可抗力，从小到大一直没学什么乐器，或者是学了也没坚持下来。最尴尬的是选了一种鸡肋乐器，学有所成却不接地气，比如二胡（我真不是黑，因为我也学过那么两年），总不能在同学聚会激战正酣的时候拿出来即兴演奏吧……还是老老实实戴个圆框墨镜到地铁口来一曲二泉映月……</p>
<p>人生苦短，为了圆我们的音（zhuang）乐（bi）梦，Ukulele 可以说是应运而生。本文将从 what、why、how 三方面介绍如何快速玩转 Ukulele，争取把我在学习过程中遇到的坑都写出来供大家参考。</p>
<h2 id="What-什么是-Ukulele"><a href="#What-什么是-Ukulele" class="headerlink" title="What-什么是 Ukulele"></a>What-什么是 Ukulele</h2><p>Ukulele 翻译为夏威夷吉他、四弦琴，音译为乌克丽丽、悠可力力、尤克里里、优可乐乐，简称 Uku、Uke……没错，这么多名字都是在说一个玩意。不要纠结到底中文叫那个名字合适，你直接用 Ukulele 一词以蔽之。</p>
<p>它是一种弦乐器，正常情况下长这样：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/1.jpg" alt="正常的 Ukulele（图片来自网络）"></p>
<p>不正常情况下长这样：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/2.jpeg" alt="不正常的 Ukulele（图片来自网络）"></p>
<p>还有各种奇形怪状的，都非常可爱。从图上可以看出它整体和吉他非常类似，唯一的不同是少了两根弦，这就大大降低了学习成本！而且它音色清脆入耳，弹起来节奏活泼畅快，可以说是居家旅行必备之良品。如果对它的起源或背景感兴趣，可以去<a href="http://baike.baidu.com/subview/3963326/10243259.htm" target="_blank" rel="external">百度百科-乌克丽丽</a>了解一下。</p>
<a id="more"></a>
<h2 id="Why-为什么要玩-Ukulele"><a href="#Why-为什么要玩-Ukulele" class="headerlink" title="Why-为什么要玩 Ukulele"></a>Why-为什么要玩 Ukulele</h2><ul>
<li><p><strong>无入门门坎，学习成本极低</strong><br>只要10分钟，就可以弹出一首完整的曲子。如果你会吉他，更是拿起来就能弹。比吉他少了两根弦，学习成本直线下降，而其演奏效果却还和吉他差不多。不需要学习乐理，也不用系统学习，想唱啥歌，找个谱子开练即可。很多小正太小萝莉都能学得会，你当然不在话下。俗话说欲速则不达，Ukulele 却是真心可以速成的。</p>
</li>
<li><p><strong>对手指友好</strong><br>绝大多数 Ukulele 的弦是尼龙弦，按起来不疼，对手指特别友好。不像吉他那么难按，弹十分钟手指就疼的受不了。当然，等你练个一星期，就会发现指头上多了一层茧，怎么按都不会疼。</p>
</li>
<li><p><strong>小巧便携，各种场合都能来一手</strong><br>小巧也是针对吉他来说的，一个胳膊就能夹住，背个小包也根本不费事。同学聚餐来一首调动气氛；草坪边上来一曲深情款款；公司年会来一首技惊四座；调试代码的间隙也可以来一首陶冶情操；马路边，地铁口，放个碗……</p>
</li>
<li><p><strong>小清新，高逼格</strong><br>基本上文艺青年看见 Ukulele 就走不动道了。妹子们弹是这样的：<br><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/3.jpg" alt="妹纸弹 Uku（图片来自网络）"><br>也可能是这样的：<br><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/4.jpg" alt="Taylor Swift 弹唱会弹 Uku（图片来自网络）"><br>男青年的样子是这样的：<br><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/5.jpg" alt="大叔弹 Uku（图片来自网络）"><br>哈哈，是不是如沐春风！可装逼可接地气，更是勾搭文（wu）艺（zhi）女青年的神器。</p>
</li>
</ul>
<ul>
<li><strong>有趣！好玩！</strong><br>喜欢一件事物，必然是因为它有趣啊！我在认识 Ukulele 之后才知道它多有趣，不止是弹情歌，比如下面这位大牛（现在他已经长大了！）。别问我他弹的什么，你听了前三秒就知道！</li>
</ul>
<div class="video-container"><iframe src="http://player.youku.com/embed/XMjk2OTI3MjEy" frameborder="0" allowfullscreen></iframe></div>
<h2 id="How-怎么快速玩转-Ukulele"><a href="#How-怎么快速玩转-Ukulele" class="headerlink" title="How-怎么快速玩转 Ukulele"></a>How-怎么快速玩转 Ukulele</h2><p>我当初是在上司的勾引下，入了这个坑的。把玩了他的琴两天，实在是爱不释手，就迫不及待地也入了一把，从此人生又多了一些欢乐，哈哈。以下从我的经历来说说怎么快速上手：</p>
<h3 id="1-你要有把琴"><a href="#1-你要有把琴" class="headerlink" title="1.你要有把琴"></a>1.你要有把琴</h3><p>市面上的 Ukulele 可以分为三种：高音（Soprano）、中音（Concert）、次中音（Tenor），分别简称 S 型、C 型、T 型。其实还有一种 B 型，但是由于音太低，新手不宜考虑。</p>
<p>S 型最小，琴身长 21 寸，音色最为清亮。可以给小盆友买用来玩耍，个子小的萌妹子也可以用。不过由于它比较小，所以适合弹唱，而不适合指弹（弹唱就是边弹边唱，指弹就是只弹不唱）。</p>
<p>C 型适中，琴身长 23寸，指弹和弹唱都可以，女生非常适合这款，男生你得考虑下身高，个子高而用这把显得不是很协调。</p>
<p>T 型最长，琴身长26寸，音色稍低，大部分男生选这款。</p>
<p>我觉得新手可以只考虑型号就好了，剩下的共鸣、音准、琴弦、琴身材质等可以等进阶的时候再买。至于价钱，某宝上价格参差不齐，不过我建议<strong>买个在你承受范围内偏贵那么一小点的</strong>，这样你一方面会好好珍惜它，多练习，另一方面音色好弹出来的效果就好，容易有成就感，有成就感就会坚持下来。</p>
<h3 id="2-你得学会调音"><a href="#2-你得学会调音" class="headerlink" title="2.你得学会调音"></a>2.你得学会调音</h3><p>调音就是把每根弦的音调（diao）调（tiao）到它该发的调（diao）上。由于 Ukulele 的弦是尼龙弦而不是金属弦，所以弹着弹着容易音不准，要经常调校，有完美强迫症的人每次弹之前估计都得调一下。</p>
<p>我是在某宝入的琴，店家送了调音器。把调音器夹在琴头上，然后依次波动每个琴弦，观察调音器上的音阶字母对应正确且显示为绿色即可。看这个视频一下就懂了：</p>
<div class="video-container"><iframe src="http://player.youku.com/embed/XNDQ1NTgxNjg4" frameborder="0" allowfullscreen></iframe></div>
<p>是不是非常简单∩_∩</p>
<h3 id="3-姿势"><a href="#3-姿势" class="headerlink" title="3.姿势"></a>3.姿势</h3><p>Ukulele 小巧可爱，怎么抱着都能弹，你可以坐着弹，躺着弹，站着弹。<strong>但是越到后面越觉得姿势非常重要</strong>。基本的持琴姿势是这样的：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/9.png" alt="持琴方法（图片来自《最易上手尤克里里弹唱超精选》）"></p>
<p>用右肘的内侧来夹住琴，让它在弹奏过程中不要乱跑，但又不能让你的右手失去灵活，总之这里需要一个巧劲，慢慢摸索。<br>左手也分两种，一种是用虎口托住琴，一种是虎口那悬空。如图：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/10.png" alt="左手姿势（图片来自《最易上手尤克里里弹唱超精选》）"></p>
<p>以上左右手的姿势中的要点都是我的亲身体会，其他的地方，如按弦方法，是指肚按弦还是指尖按弦（推荐指尖），我觉得问题不大，怎么舒服怎么来。</p>
<p>按弦的样子可以参考这张：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/13.jpg" alt="按弦姿势（图片来自网络）"></p>
<p><strong>但我在练习过程中还遇到了一个大坑：</strong>那就是用拇指拨4弦或3弦时，总会碰到另一根。困扰了我很久，直到看到网上的这张图片：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/11.jpg" alt="错误的右手姿势（图片来自网络）"></p>
<p>虽然这是吉他的右手，但对 Uku 同样适用。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/12.jpg" alt="正确的右手姿势（图片来自网络）"></p>
<p>所以<strong>一开始最好力求姿势准确</strong>，可以避免后来的很多坑。为什么姿势很重要可以看看知乎上<a href="http://www.zhihu.com/question/23935947/answer/26247357" target="_blank" rel="external">如何快速地自学 Ukulele？</a>（这个问题也是我当初提的）。</p>
<h3 id="4-无敌四和弦"><a href="#4-无敌四和弦" class="headerlink" title="4.无敌四和弦"></a>4.无敌四和弦</h3><p>和弦是啥？一般人玩一个乐器，第一句肯定问：这个哆在哪？ 没错，和弦就可以看作是哆唻咪等音符的组合，左手按住和弦，右手拨琴弦就会发出悦耳的声音了。我们的目的是快速上手，快速演奏出想唱的歌，所以这些细节没必要一开始搞懂，等学到瓶颈再来深入。</p>
<p><strong>C  Am  F  G7</strong> 这四个和弦被称为无敌四和弦。之所以无敌，是因为掌握了它们就可以演奏很多歌曲，不信你去搜关键字「Ukulele 无敌四和弦」，就可以看到很多曲谱。其指法如下：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/7.jpg" alt="无敌四和弦（图片来自网络）"></p>
<p>另外 <strong>G</strong> 和弦也是经常用，它和 <strong>G7</strong> 听起来差不多，所以前期如果按 <strong>G</strong> 吃力，就先用 <strong>G7</strong> 代替。我当初按 <strong>G</strong> 无名指怎么也够不着T_T，练了好久才习惯自如……总之，先用左手把这四个和弦练熟。</p>
<p>接下来可以看一下主要的和弦图（不要怕，如果是弹唱则一首歌用到的很少）：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/8.jpg" alt="主要和弦图（图片来自网络）"></p>
<h3 id="5-节奏型与扫弦"><a href="#5-节奏型与扫弦" class="headerlink" title="5.节奏型与扫弦"></a>5.节奏型与扫弦</h3><p>啥又是节奏型？其实就是节奏，动次打次，或者动动次打动打。。还是没必要搞懂它，我们每个人都会打拍子，除非是完全没乐感。会打拍子就可以直接来弹比较简单的节奏型。</p>
<p>那右手怎么弹呢？答案并不是像吉他那样所有指头都上，而是<strong>一指禅</strong>！没错，只用食指！上下扫就行了！</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/14.png" alt="一指禅（图片来自《最易上手尤克里里弹唱超精选》）"></p>
<p>知道如何扫弦，就可以来学习简单的节奏型了。我推荐新手看这位张松涛老师的视频，我就是看他的第五课学会了第一首歌《莫名我就喜欢你》：</p>
<div class="video-container"><iframe src="http://player.youku.com/embed/XMzE2NjgzNjg4" frameborder="0" allowfullscreen></iframe></div>
<p>接着看第六课把《You Are My Sunshine》学会（两首都是一样的最简单下下下下四拍和弦），基本上就可以宣告你的 Ukulele 旅程要开始了！</p>
<p>非常推荐 <a href="http://v.youku.com/v_show/id_XNzU4MzA5NDYw.html" target="_blank" rel="external">这个系列视频</a>，介绍了17个常用节奏型，你到后期肯定会用到。</p>
<h3 id="6-练"><a href="#6-练" class="headerlink" title="6.练"></a>6.练</h3><p>入门之后，你要做的就一个字：练！吃完饭练，Debug 期间练，起床之后练，无时不刻在练。你要找那种你特别想学会弹唱的曲子，这样学着会特别有动力，不一段时间你就会突飞猛进。如果你是偏向指弹的，那就不像弹唱这么简单了，弹唱可以用嗓音把你弹奏的瑕疵遮盖掉，而指弹单纯的靠拨弦发音，所以一首歌得无数次。</p>
<p>我一般习惯浏览以下资源：</p>
<ul>
<li><a href="http://www.zhihu.com/question/23935947" target="_blank" rel="external">如何快速地自学 Ukulele？</a>这个是我当初在知乎提的问题，里面妹纸回答的很不错。</li>
<li>我还买了《最易上手尤克里里弹唱超精选》这本书，不过感觉帮助不大，全是曲谱……</li>
</ul>
<p><strong>教程和曲谱：</strong></p>
<ul>
<li><a href="http://www.ukulelecn.com/forum.php" target="_blank" rel="external">Ukulelecn</a></li>
<li><a href="http://www.ukulelefan.com/" target="_blank" rel="external">尤克里里 Fans</a></li>
</ul>
<p><strong>视频：</strong></p>
<ul>
<li>不得不提的 <a href="http://i.youku.com/shushuMa" target="_blank" rel="external">马叔叔</a></li>
<li>刚才提到的 <a href="http://i.youku.com/ukulele" target="_blank" rel="external">优客伙计</a></li>
<li><a href="http://i.youku.com/u/UNjI1NDI5NTEy" target="_blank" rel="external">广州弹吧小吉他教室</a></li>
<li><a href="http://i.youku.com/zixunyq" target="_blank" rel="external">子熏乐器张SIR</a> 张 sir 很帅</li>
<li><a href="http://i.youku.com/ukulelemm" target="_blank" rel="external">maixueguonian</a></li>
</ul>
<p>最后你可以膜拜一下公认的大神 <a href="http://baike.baidu.com/view/6195265.htm" target="_blank" rel="external">Jake Shimabukuro</a>，听过他的<a href="http://www.zhihu.com/question/20457612" target="_blank" rel="external">弹奏</a>才知道 Ukulele 也能玩到这种境界。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/6.jpg" alt="Jake Shimabukuro（图片来自网络）"></p>
<h2 id="从玩-Ukulele-中学到的"><a href="#从玩-Ukulele-中学到的" class="headerlink" title="从玩 Ukulele 中学到的"></a>从玩 Ukulele 中学到的</h2><ol>
<li>学一样东西的时候应该简单粗暴，掌握大体方向而不拘泥细节，直接实践做出效果，然后再从中找不足，查漏补缺，研究细枝末节。</li>
<li>难是因为没有开始，开始了就不会难。</li>
<li>学习新的技能，会为你的生活打开一扇窗。</li>
<li>对于兴趣，一天进步一点点就好，没必要贪多，也不求速成。长年累月的积累会让量变达到质变。</li>
<li>菜鸟有菜鸟的乐趣。</li>
</ol>
<p>虽然网上已经有很多入门教程了，但仍希望这篇文章能给你些许的帮助，谢谢:)</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个人都幻想过自己拥有一身的艺术细菌，可以像各种钢琴王子一样在琴键上挥洒自如。但是由于某些不可抗力，从小到大一直没学什么乐器，或者是学了也没坚持下来。最尴尬的是选了一种鸡肋乐器，学有所成却不接地气，比如二胡（我真不是黑，因为我也学过那么两年），总不能在同学聚会激战正酣的时候拿出来即兴演奏吧……还是老老实实戴个圆框墨镜到地铁口来一曲二泉映月……&lt;/p&gt;
&lt;p&gt;人生苦短，为了圆我们的音（zhuang）乐（bi）梦，Ukulele 可以说是应运而生。本文将从 what、why、how 三方面介绍如何快速玩转 Ukulele，争取把我在学习过程中遇到的坑都写出来供大家参考。&lt;/p&gt;
&lt;h2 id=&quot;What-什么是-Ukulele&quot;&gt;&lt;a href=&quot;#What-什么是-Ukulele&quot; class=&quot;headerlink&quot; title=&quot;What-什么是 Ukulele&quot;&gt;&lt;/a&gt;What-什么是 Ukulele&lt;/h2&gt;&lt;p&gt;Ukulele 翻译为夏威夷吉他、四弦琴，音译为乌克丽丽、悠可力力、尤克里里、优可乐乐，简称 Uku、Uke……没错，这么多名字都是在说一个玩意。不要纠结到底中文叫那个名字合适，你直接用 Ukulele 一词以蔽之。&lt;/p&gt;
&lt;p&gt;它是一种弦乐器，正常情况下长这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/1.jpg&quot; alt=&quot;正常的 Ukulele（图片来自网络）&quot;&gt;&lt;/p&gt;
&lt;p&gt;不正常情况下长这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/2.jpeg&quot; alt=&quot;不正常的 Ukulele（图片来自网络）&quot;&gt;&lt;/p&gt;
&lt;p&gt;还有各种奇形怪状的，都非常可爱。从图上可以看出它整体和吉他非常类似，唯一的不同是少了两根弦，这就大大降低了学习成本！而且它音色清脆入耳，弹起来节奏活泼畅快，可以说是居家旅行必备之良品。如果对它的起源或背景感兴趣，可以去&lt;a href=&quot;http://baike.baidu.com/subview/3963326/10243259.htm&quot;&gt;百度百科-乌克丽丽&lt;/a&gt;了解一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Ukulele" scheme="http://geekplux.com/categories/Ukulele/"/>
    
    
      <category term="新技能" scheme="http://geekplux.com/tags/%E6%96%B0%E6%8A%80%E8%83%BD/"/>
    
      <category term="Skill" scheme="http://geekplux.com/tags/Skill/"/>
    
      <category term="乐器" scheme="http://geekplux.com/tags/%E4%B9%90%E5%99%A8/"/>
    
      <category term="Instrument" scheme="http://geekplux.com/tags/Instrument/"/>
    
      <category term="Ukulele" scheme="http://geekplux.com/tags/Ukulele/"/>
    
  </entry>
  
  <entry>
    <title>告别社交网络有多难</title>
    <link href="http://geekplux.com/2014/08/02/farewell_social_network.html"/>
    <id>http://geekplux.com/2014/08/02/farewell_social_network.html</id>
    <published>2014-08-02T12:50:46.000Z</published>
    <updated>2015-01-04T11:58:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>我猜 QQ 空间最初应该是作为和新浪博客竞争才出现的，当时我还在初中，不会写什么 Blog，所以空间出来正迎合了我们这些学生的需求。随后「非主流」、「火星文」开始火，又是抓住了青春期学生的叛逆心理。不过我当时对非主流不是太感冒，一直很用心的经营着空间，犹记得当年幼稚的我还写了篇文章宣称空间是我的心灵归宿（正如现在矫情的我写这篇应该退出社交网络的文章）。所以从初中开始我的喜怒哀乐全在空间里，文章写了上百篇，照片更是几千张。</p>
<p>尽管后来开始沉迷微博、豆瓣、知乎等，空间一直是我割舍不下的一块，因为那里有旧友，有牵绊，这是一份长久以来捆绑着我的数据库。然而，随着认知的渐渐成熟，我越来越觉得<strong>人应该远离社交网络</strong>，不止是空间。理由也是在一次次和所谓羁绊的牵扯过程中感悟出来的：</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>刚开始我天真的以为社交网络是用来分享的，后来发现并不是。社交网络沦为了一个表演的舞台，每个人在上面表演，把想展示给别人的一面展示出来。发表一段状态，分享一篇文章或视频，并不是共享他的感受，也不是觉得这段信息真的有价值，而是在传递一种他<strong>自以为很重要的自我展示的信息</strong>，翻看朋友圈或其他的 timeline，随便找一条仔细分析一下就会发现他并不是在描述他的感受，而是在展现一些信息，或者直接说是炫耀。自从「逼格」一词横空出现，更是很好的定义了这种社交网站的分享行为其实就是为了<strong>彰显逼格</strong>。收到的评论，互相的交流根本无足轻重，因为这本身就不是输入，而是变相地输出。人们渐渐的带上了面具，因为社交网站上的你，并不是真正的你，而是<strong>你想让别人看到的你</strong>。</p>
<a id="more"></a>
<h3 id="偏见"><a href="#偏见" class="headerlink" title="偏见"></a>偏见</h3><p>每个社交网络都有它的特点。微博烹饪着毫无营养的段子只供一乐；豆瓣是文艺青年的温床；空间：不转不是中国人……在很久很久以前，社交网络分享还存在价值的时候（可能是当时认知浅薄觉得什么都很吸引人），我竟然还有过信息焦虑，生怕错过什么重要的信息。但焦虑很快就没了，接踵而至的是厌烦。社交网络里开始充斥着软文。软文还是好的，更甚者是赤裸的代购广告、谣言和虚假信息。我很是怀疑转发这些信息的同学的分辨能力，实在受不了就屏蔽掉（现在看来，果然 QQ 空间里我屏蔽的人最多）。随着屏蔽人数的上升，我质疑过自己的这种行为：屏蔽的人多了，剩下的都是和我价值观差不多的，减少了信息获取渠道，是不是更容易形成我固有的偏见？后来发现正好相反，因为：</p>
<ul>
<li>偏见一旦形成就不是很容易修正了。</li>
<li>多读书、多游历才是减少偏见的良方。</li>
<li>其实屏蔽的这些人很少有掷地有声的见解。垃圾信息还是屏蔽了好。</li>
</ul>
<h3 id="好友"><a href="#好友" class="headerlink" title="好友"></a>好友</h3><p>其实放不下社交网络，最多的理由都是因为那里还有自己的很多老友，如果不玩社交网络，如何得知他们的近况，如何能保持联系？这个确实是一个问题，我只说说我自己的看法：</p>
<p>刚进大学的第一年，我参加了很多学生工作和活动，认识了很多朋友，渐渐的认识到<strong>人和人的社交，本质上是一种价值交换</strong>。你和他作朋友，可能是你身上的某一点值得他利用，他身上的某一点值得你利用，你们可以互相交换自身的价值。（虽然「利用」这个词有点消极，可确实是利用，当然有的利用也可以是积极的，比如互相学习。）想通这个之后，就感觉一下子看清了朋友间的各种复杂关系，你自己的价值越大，能提供给别人的越多，那你就越受欢迎。这就像一个市场，每一次的社交活动，你都可以看成是一场交易。你请客他办事，或者是你们互相帮对方办一件事等等，所谓「人情」就是交易的货币。价值相等的两个人，往往关系会比较稳定。这里就不多扯了，我们把这种类型的朋友称为<strong>「浅交」</strong>。你可能觉得这样说朋友之间的关系有点现实了，但我们要在认清本质的基础上，保有一颗相信爱的心。这类朋友和你有互相认同的价值观，你们彼此付出过，倾注过真实的情感，这类朋友可以叫<strong>「挚友」</strong>。</p>
<p>我们的社交网络上，多是「浅交」，而非「挚友」。浅交的状态其实你根本没必要去关心，他去哪旅游了，和谁分手了，对你来说意义又有多少呢？简短的评论似乎也不会增进感情。只要你的<strong>价值</strong>还在，你们的关系就不会断，即使断了……你活到现在，生命中的过客恐怕有的已忘得一干二净了吧……所以，我们没必要刻意去关心这些信息，真正需要关心的是挚友。而我们关心挚友更好的方式是一封 Email，一通电话。想象一下你接到老友电话或是收到远方寄来明信片的兴奋程度吧。</p>
<p>说了这么多，我觉得不论对方是谁，我们都要以诚相待。相信爱的存在，珍惜出现在生命中的每个人。</p>
<h3 id="道理"><a href="#道理" class="headerlink" title="道理"></a>道理</h3><p>在网络上游荡时，总会有读到一段话或一篇文章，忽然如醍醐灌顶般顿悟的时刻。比如：</p>
<blockquote>
<p>人们的痛苦都是源于对于自己无能的愤怒。   ——王小波</p>
</blockquote>
<p>或是：</p>
<blockquote>
<p>你的问题主要是读书不多而想得太多    ——杨绛</p>
</blockquote>
<p>等等。我把这些叫做「人生经验」。我们被击中原因可能是我们还停留在<strong>「能理解，但是还不能体会的情况」</strong>。就是说我们确实能明白这句话，也了解这句话的重要性，但是下次我们遇到类似的事情还是照旧，这句话完全记不起来。</p>
<p>很多道理、人生经验我们会从别人文章读到，会从别人嘴里听得。但无论听到还是读到，这都还不是我们的，我们无法领悟。确切的说是体会。因为只有我们经历过同样的事情，体验过类似的情形我们才能真正懂得，真正领悟。「吃一堑长一智」就是这个理。</p>
<p>因此在社交网络上看到这类信息，可以记下来，但不用放在心上。等到了该懂的时候自然会懂。</p>
<h3 id="发泄"><a href="#发泄" class="headerlink" title="发泄"></a>发泄</h3><p>其实社交网络并不只是分（zhuang）享（bi），还是一个发泄的出口。不吐不快的时候，社交网络的确是一个很好的平台，你吐槽出来，大家会一起跟着吐，从而找到心理上的认同感。但是发泄的渠道很多，没必要在社交网络上：</p>
<ul>
<li>不一定所有人和你的想法一样，万一他跟你唱反调怎么办。</li>
<li>消极思想和负能量最好是不要影响到他人，因为在自己心里认为天大的事在别人那里微不足道。</li>
<li>发泄还是找一个健康的方式吧，囧。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>综上所述，我觉得我们更应该专注于自己的内心，更加注重现实中的情感，而不是虚拟中的互动。在这个信息繁杂的社会，增加自己独处的时间，反而能发现更大的世界。</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我猜 QQ 空间最初应该是作为和新浪博客竞争才出现的，当时我还在初中，不会写什么 Blog，所以空间出来正迎合了我们这些学生的需求。随后「非主流」、「火星文」开始火，又是抓住了青春期学生的叛逆心理。不过我当时对非主流不是太感冒，一直很用心的经营着空间，犹记得当年幼稚的我还写了篇文章宣称空间是我的心灵归宿（正如现在矫情的我写这篇应该退出社交网络的文章）。所以从初中开始我的喜怒哀乐全在空间里，文章写了上百篇，照片更是几千张。&lt;/p&gt;
&lt;p&gt;尽管后来开始沉迷微博、豆瓣、知乎等，空间一直是我割舍不下的一块，因为那里有旧友，有牵绊，这是一份长久以来捆绑着我的数据库。然而，随着认知的渐渐成熟，我越来越觉得&lt;strong&gt;人应该远离社交网络&lt;/strong&gt;，不止是空间。理由也是在一次次和所谓羁绊的牵扯过程中感悟出来的：&lt;/p&gt;
&lt;h3 id=&quot;输出&quot;&gt;&lt;a href=&quot;#输出&quot; class=&quot;headerlink&quot; title=&quot;输出&quot;&gt;&lt;/a&gt;输出&lt;/h3&gt;&lt;p&gt;刚开始我天真的以为社交网络是用来分享的，后来发现并不是。社交网络沦为了一个表演的舞台，每个人在上面表演，把想展示给别人的一面展示出来。发表一段状态，分享一篇文章或视频，并不是共享他的感受，也不是觉得这段信息真的有价值，而是在传递一种他&lt;strong&gt;自以为很重要的自我展示的信息&lt;/strong&gt;，翻看朋友圈或其他的 timeline，随便找一条仔细分析一下就会发现他并不是在描述他的感受，而是在展现一些信息，或者直接说是炫耀。自从「逼格」一词横空出现，更是很好的定义了这种社交网站的分享行为其实就是为了&lt;strong&gt;彰显逼格&lt;/strong&gt;。收到的评论，互相的交流根本无足轻重，因为这本身就不是输入，而是变相地输出。人们渐渐的带上了面具，因为社交网站上的你，并不是真正的你，而是&lt;strong&gt;你想让别人看到的你&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Thought" scheme="http://geekplux.com/categories/Thought/"/>
    
    
      <category term="生活" scheme="http://geekplux.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="Life" scheme="http://geekplux.com/tags/Life/"/>
    
      <category term="感想" scheme="http://geekplux.com/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="Thought" scheme="http://geekplux.com/tags/Thought/"/>
    
      <category term="思考" scheme="http://geekplux.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>双拼学习记</title>
    <link href="http://geekplux.com/2014/07/06/learn_shuangpin.html"/>
    <id>http://geekplux.com/2014/07/06/learn_shuangpin.html</id>
    <published>2014-07-06T14:59:29.000Z</published>
    <updated>2015-01-04T11:51:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>转移到<strong>双拼</strong>阵营差不多三个星期了。现在打字真的是「飞一般的感觉」。</p>
<p>双拼是输入法的一种，绝大多数人都只听过<strong>全拼</strong>和<strong>五笔</strong>两种输入法。如果你不清楚你现在用的是什么输入法，那么基本上可以断定你用的是全拼。至于五笔，我们虽然如雷贯耳，但没有经过专门训练的话，实在是可望而不可及。双拼提供给我们一种折中的方案，使我们的<strong>学习成本和全拼一样，打字速度却和五笔一样</strong>。那么到底什么是双拼呢？维基百科这样解释：</p>
<blockquote>
<p>双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。</p>
</blockquote>
<p>大家都知道，我们伟大的汉字大部分都可以用一个<strong>声母</strong>加一个<strong>韵母</strong>拼出来<em>（少部分只有韵母构成，如 奥ao、而 er、偶 ou 等）</em>，所以用双拼输入一个汉字<strong>最多按两个字母键</strong>，而全拼可能要用两个以上。举例来说，用全拼输入「天真」，可能需要「tianzhen」这么多字母，而用双拼只需要「tmvf」，字数多了之后优势更加明显。</p>
<p>由此可见，双拼的原理十分简单，而它学起来更简单。众所周知五笔打字速度很快，但是你从开始学起到最后熟练使用，中间需要几个月的时间，黄花菜都凉了。而<strong>双拼从学起到驾轻就熟只需要三周</strong>，输入量大的人一周都能炉火纯青。一般的学习流程是这样的：</p>
<ol>
<li>熟记键位</li>
<li>使用即练习</li>
<li>掌握双拼打字的节奏感</li>
</ol>
<a id="more"></a>
<p>在以上步骤开始之前，我们需要选择一种<strong>双拼方案</strong>。双拼有很多种输入方案供你选择，你不用害怕，这些方案只是键位不同而已，并没有本质的区别。你可以参考知乎的回答<a href="http://www.zhihu.com/question/20191383" target="_blank" rel="external">「各双拼输入方案之间有明显的优劣之分吗？」</a>。大家各有所爱，我自己用的是<a href="http://www.flypy.com/" target="_blank" rel="external">小鹤双拼</a>。接下来你就可以记小鹤的键位了，我当时并没有真的刻意去背，只是把键位图抄了下来放在键盘旁，打字想不起来的时候瞄一眼键位图。<em>（这里有个技巧，大部分输入法，如搜狗，都有「双拼下同时使用全拼」的选项。勾选之后你就可以在双拼实在想不起来，或者是着急打字的时候用全拼，它可以帮你平滑过渡到完全使用双拼）</em>。</p>
<p><img src="http://www.flypy.com/images/hejp.png" alt=""></p>
<p>不出一两个小时键位你就记得差不多了，接着就是受折磨的一周……刚切换过来会很别扭，经常卡住，半天打不出一个字，和你聊天的妹纸总会埋怨你聊天不专心……忍了，我们应该庆幸，学习双拼的成本真的太低了，所有学习过程都在真正使用的场景中完成，不知不觉，简直是 learning by doing 的最佳典范。</p>
<p>等你完全习惯用双拼的时候，会发现打字有一种节奏感。可能是因为我们用全拼时并不确定每个字得按几下键盘才能打出来，而用双拼，三下键盘一个字，习惯之后非常带感。从此全拼是路人……</p>
<p>综上所述，学习双拼是一件极具性价比的事。</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转移到&lt;strong&gt;双拼&lt;/strong&gt;阵营差不多三个星期了。现在打字真的是「飞一般的感觉」。&lt;/p&gt;
&lt;p&gt;双拼是输入法的一种，绝大多数人都只听过&lt;strong&gt;全拼&lt;/strong&gt;和&lt;strong&gt;五笔&lt;/strong&gt;两种输入法。如果你不清楚你现在用的是什么输入法，那么基本上可以断定你用的是全拼。至于五笔，我们虽然如雷贯耳，但没有经过专门训练的话，实在是可望而不可及。双拼提供给我们一种折中的方案，使我们的&lt;strong&gt;学习成本和全拼一样，打字速度却和五笔一样&lt;/strong&gt;。那么到底什么是双拼呢？维基百科这样解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家都知道，我们伟大的汉字大部分都可以用一个&lt;strong&gt;声母&lt;/strong&gt;加一个&lt;strong&gt;韵母&lt;/strong&gt;拼出来&lt;em&gt;（少部分只有韵母构成，如 奥ao、而 er、偶 ou 等）&lt;/em&gt;，所以用双拼输入一个汉字&lt;strong&gt;最多按两个字母键&lt;/strong&gt;，而全拼可能要用两个以上。举例来说，用全拼输入「天真」，可能需要「tianzhen」这么多字母，而用双拼只需要「tmvf」，字数多了之后优势更加明显。&lt;/p&gt;
&lt;p&gt;由此可见，双拼的原理十分简单，而它学起来更简单。众所周知五笔打字速度很快，但是你从开始学起到最后熟练使用，中间需要几个月的时间，黄花菜都凉了。而&lt;strong&gt;双拼从学起到驾轻就熟只需要三周&lt;/strong&gt;，输入量大的人一周都能炉火纯青。一般的学习流程是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;熟记键位&lt;/li&gt;
&lt;li&gt;使用即练习&lt;/li&gt;
&lt;li&gt;掌握双拼打字的节奏感&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://geekplux.com/categories/Tool/"/>
    
    
      <category term="Tool" scheme="http://geekplux.com/tags/Tool/"/>
    
      <category term="工具" scheme="http://geekplux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="新技能" scheme="http://geekplux.com/tags/%E6%96%B0%E6%8A%80%E8%83%BD/"/>
    
      <category term="Skill" scheme="http://geekplux.com/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>CoffeeScript 编码风格指南（译）</title>
    <link href="http://geekplux.com/2014/06/21/coffeescript_style_guide.html"/>
    <id>http://geekplux.com/2014/06/21/coffeescript_style_guide.html</id>
    <published>2014-06-21T15:47:32.000Z</published>
    <updated>2015-01-04T11:41:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>这份指南阐述了一些 <a href="http://jashkenas.github.com/coffee-script/" target="_blank" rel="external">CoffeeScript</a> 的最佳实践和编码惯例。</p>
<p>这份指南是社群驱动的，非常鼓励大家来贡献内容。</p>
<p>请注意这还是一份正在完善的指南：仍有很多地方可以改进，有些已制定的准则也不一定是社区惯用的（基于此，在适当的情况下，这些有待斟酌的准则将有可能被修改或删除。）</p>
<h2 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h2><p>本指南中的很多细节受到了几份现有的风格指南和其他资源的启发。特别是：</p>
<ul>
<li><a href="http://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">PEP-8</a>: Style Guide for Python Code</li>
<li>Bozhidar Batsov’s <a href="https://github.com/bbatsov/ruby-style-guide" target="_blank" rel="external">Ruby Style Guide</a></li>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml" target="_blank" rel="external">Google’s JavaScript Style Guide</a></li>
<li><a href="http://arcturo.github.com/library/coffeescript/04_idioms.html" target="_blank" rel="external">Common CoffeeScript Idioms</a></li>
<li>Thomas Reynolds’ <a href="http://awardwinningfjords.com/2011/05/13/coffeescript-specific-style-guide.html" target="_blank" rel="external">CoffeeScript-specific Style Guide</a></li>
<li>Jeremy Ashkenas’ <a href="https://gist.github.com/1005723" target="_blank" rel="external">code review</a> of <a href="http://spinejs.com/" target="_blank" rel="external">Spine</a></li>
<li>The <a href="https://github.com/jashkenas/coffee-script/wiki/FAQ" target="_blank" rel="external">CoffeeScript FAQ</a></li>
</ul>
<a id="more"></a>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#guide">CoffeeScript 风格指南</a><ul>
<li><a href="#code_layout">代码布局（Code Layout）</a><ul>
<li><a href="#tabs_or_spaces">Tab 还是 空格？（Tabs or Spaces?）</a></li>
<li><a href="#maximum_line_length">最大行宽（Maximum Line Length）</a></li>
<li><a href="#blank_lines">空行（Blank Lines）</a></li>
<li><a href="#trailing_whitespace">结尾空白（Trailing Whitespace）</a></li>
<li><a href="#optional_commas">可选的逗号（Optional Commas）</a></li>
<li><a href="#encoding">编码（Encoding）</a></li>
</ul>
</li>
<li><a href="#module_imports">模块导入（Module Imports）</a></li>
<li><a href="#whitespace">表达式和语句中的空白（Whitespace in Expressions and Statements）</a></li>
<li><a href="#comments">注释（Comments）</a><ul>
<li><a href="#block_comments">块注释（Block Comments）</a></li>
<li><a href="#inline_comments">行内注释（Inline Comments）</a></li>
</ul>
</li>
<li><a href="#naming_conventions">命名规范（Naming Conventions）</a></li>
<li><a href="#functions">函数（Functions）</a></li>
<li><a href="#strings">字符串（Strings）</a></li>
<li><a href="#conditionals">条件判断（Conditionals）</a></li>
<li><a href="#looping_and_comprehensions">循环和列表解析（Looping and Comprehensions）</a></li>
<li><a href="#extending_native_objects">扩展本地对象（Extending Native Objects）</a></li>
<li><a href="#exceptions">异常（Exceptions）</a></li>
<li><a href="#annotations">注解（Annotations）</a></li>
<li><a href="#miscellaneous">其他（Miscellaneous）</a></li>
</ul>
</li>
</ul>
<p><a name="code_layout"></a></p>
<h2 id="代码布局（Code-Layout）"><a href="#代码布局（Code-Layout）" class="headerlink" title="代码布局（Code Layout）"></a>代码布局（Code Layout）</h2><p><a name="tabs_or_spaces"></a></p>
<h3 id="Tab-还是-空格？（Tabs-or-Spaces-）"><a href="#Tab-还是-空格？（Tabs-or-Spaces-）" class="headerlink" title="Tab 还是 空格？（Tabs or Spaces?）"></a>Tab 还是 空格？（Tabs or Spaces?）</h3><p>只用 <strong>空格</strong>，每级缩进均为 <strong>2 个空格</strong>。切勿混用 Tab 和空格。</p>
<p><a name="maximum_line_length"></a></p>
<h3 id="最大行宽（Maximum-Line-Length）"><a href="#最大行宽（Maximum-Line-Length）" class="headerlink" title="最大行宽（Maximum Line Length）"></a>最大行宽（Maximum Line Length）</h3><p>限制每行最多 79 个字符。</p>
<p><a name="blank_lines"></a></p>
<h3 id="空行（Blank-Lines）"><a href="#空行（Blank-Lines）" class="headerlink" title="空行（Blank Lines）"></a>空行（Blank Lines）</h3><p>顶级函数和类的定义用一个空行分开。</p>
<p>类内部的函数定义也用一个空行分开。</p>
<p>对于每个函数体内，只在为了提高可读性的情况下才使用一个空行（例如：为了达到划分逻辑的目的）。</p>
<p><a name="trailing_whitespace"></a></p>
<h3 id="结尾空白（Trailing-Whitespace）"><a href="#结尾空白（Trailing-Whitespace）" class="headerlink" title="结尾空白（Trailing Whitespace）"></a>结尾空白（Trailing Whitespace）</h3><p>不要在任何一行保留行尾空白。</p>
<p><a name="optional_commas"></a></p>
<h3 id="可选的逗号（Optional-Commas）"><a href="#可选的逗号（Optional-Commas）" class="headerlink" title="可选的逗号（Optional Commas）"></a>可选的逗号（Optional Commas）</h3><p>当对象（或数组）的属性（或元素）作为单独一行列出时，避免在换行符前使用逗号。如下：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 好</span></div><div class="line">foo = [</div><div class="line">  <span class="string">'some'</span></div><div class="line">  <span class="string">'string'</span></div><div class="line">  <span class="string">'values'</span></div><div class="line">]</div><div class="line">bar:</div><div class="line">  label: <span class="string">'test'</span></div><div class="line">  value: <span class="number">87</span></div><div class="line"></div><div class="line"><span class="comment"># 差</span></div><div class="line">foo = [</div><div class="line">  <span class="string">'some'</span>,</div><div class="line">  <span class="string">'string'</span>,</div><div class="line">  <span class="string">'values'</span></div><div class="line">]</div><div class="line">bar:</div><div class="line">  label: <span class="string">'test'</span>,</div><div class="line">  value: <span class="number">87</span></div></pre></td></tr></table></figure>
<p><a name="encoding"></a></p>
<h3 id="编码（Encoding）"><a href="#编码（Encoding）" class="headerlink" title="编码（Encoding）"></a>编码（Encoding）</h3><p>UTF-8 是首选的源文件编码。</p>
<p><a name="module_imports"></a></p>
<h2 id="模块导入（Module-Imports）"><a href="#模块导入（Module-Imports）" class="headerlink" title="模块导入（Module Imports）"></a>模块导入（Module Imports）</h2><p>如果需要导入模块 (CommonJS 模块，AMD，等等.), <code>require</code> 语句应该单独作为一行。如下：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span> <span class="string">'lib/setup'</span></div><div class="line">Backbone = <span class="built_in">require</span> <span class="string">'backbone'</span></div></pre></td></tr></table></figure>
<p>这些语句应该按以下顺序去分组：</p>
<ol>
<li>标准库的导入 <em>（如果标准库存在）</em></li>
<li>第三方库的导入</li>
<li>本地导入 <em>（导入这个应用程序的或库的具体依赖）</em></li>
</ol>
<p><a name="whitespace"></a></p>
<h2 id="表达式和语句中的空白（Whitespace-in-Expressions-and-Statements）"><a href="#表达式和语句中的空白（Whitespace-in-Expressions-and-Statements）" class="headerlink" title="表达式和语句中的空白（Whitespace in Expressions and Statements）"></a>表达式和语句中的空白（Whitespace in Expressions and Statements）</h2><p>下列情况应该避免多余的空格：</p>
<ul>
<li><p>紧贴着圆括号、方括号和大括号内部</p>
  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">($ <span class="string">'body'</span>) <span class="comment"># 好</span></div><div class="line">( $ <span class="string">'body'</span> ) <span class="comment"># 差</span></div></pre></td></tr></table></figure>
</li>
<li><p>紧贴在逗号前</p>
  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log x, y <span class="comment"># 好</span></div><div class="line"><span class="built_in">console</span>.log x , y <span class="comment"># 差</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>额外建议：</p>
<ul>
<li><p>在下列二元操作符的左右两边都保留 <strong>一个空格</strong></p>
<ul>
<li><p>赋值运算符: <code>=</code></p>
<ul>
<li><p><em>注意这同样适用于函数定义中的默认参数</em></p>
 <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">test: <span class="function"><span class="params">(param = <span class="literal">null</span>)</span> -&gt;</span> <span class="comment"># 好</span></div><div class="line">test: <span class="function"><span class="params">(param=<span class="literal">null</span>)</span> -&gt;</span> <span class="comment"># 差</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自增运算符: <code>+=</code>, <code>-=</code>, 等等。</p>
</li>
<li>比较运算符: <code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>unless</code>, 等等。</li>
<li><p>算术运算符: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, 等等。</p>
</li>
<li><p><em>（这些操作符两边的空格不要多于一个）</em></p>
  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 好</span></div><div class="line">x = <span class="number">1</span></div><div class="line">y = <span class="number">1</span></div><div class="line">fooBar = <span class="number">3</span></div><div class="line"></div><div class="line"><span class="comment"># 差</span></div><div class="line">x      = <span class="number">1</span></div><div class="line">y      = <span class="number">1</span></div><div class="line">fooBar = <span class="number">3</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><a name="comments"></a></p>
<h2 id="注释（Comments）"><a href="#注释（Comments）" class="headerlink" title="注释（Comments）"></a>注释（Comments）</h2><p>如果你修改了一段已有注释说明的代码，则也要更新它对应的注释。（理想状态是，重构这段代码直到它不需要注释说明，然后再把之前的注释全删掉。）</p>
<p>注释的首字母要大写，除非第一个单词是以小写字母开头的标识符。</p>
<p>如果注释很短，可以省略末尾的句号。</p>
<p><a name="block_comments"></a></p>
<h3 id="块注释（Block-Comments）"><a href="#块注释（Block-Comments）" class="headerlink" title="块注释（Block Comments）"></a>块注释（Block Comments）</h3><p>注释块通常应用于尾随其后的一段代码。</p>
<p>每一行注释都以 <code>#</code> 加一个空格开头，而且和被注释的代码有相同的缩进层次。</p>
<p>注释块内的段落以仅含单个 <code>#</code> 的行分割。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这是一个块注释。请注意假如这是一段块注释，</span></div><div class="line"><span class="comment"># 则它描述的就应该是接下来的这段代码。</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 这是块注释的第二段。</span></div><div class="line"><span class="comment"># 请注意这段是由上一行带有 # 号的空行分开的。（P.S. 最好用英文写注释）</span></div><div class="line"></div><div class="line">init()</div><div class="line">start()</div><div class="line">stop()</div></pre></td></tr></table></figure>
<p><a name="inline_comments"></a></p>
<h3 id="行内注释（Inline-Comments）"><a href="#行内注释（Inline-Comments）" class="headerlink" title="行内注释（Inline Comments）"></a>行内注释（Inline Comments）</h3><p>行内注释紧贴在被描述的代码的上一行，如果行内注释足够短，则可以处在同一行行尾（由一个空格隔开）。</p>
<p>所有行内注释都以 <code>#</code> 加一个空格开头。</p>
<p>应该限制行内注释的使用，因为它们的存在通常是一个代码异味的标志。</p>
<p>不要给显而易见的情况作行内注释：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 差</span></div><div class="line">x = x + <span class="number">1</span> <span class="comment"># x 自增</span></div></pre></td></tr></table></figure>
<p>然而，行内注释在某些情况下是有用的：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 好</span></div><div class="line">x = x + <span class="number">1</span> <span class="comment"># 边界补足</span></div></pre></td></tr></table></figure>
<p><a name="naming_conventions"></a></p>
<h2 id="命名规范（Naming-Conventions）"><a href="#命名规范（Naming-Conventions）" class="headerlink" title="命名规范（Naming Conventions）"></a>命名规范（Naming Conventions）</h2><p>使用 <code>小驼峰命名法</code> （第一个词的首字母小写，后面每个词的首字母大写）来命名所有的变量、方法和对象属性。</p>
<p>使用 <code>大驼峰命名法</code> （第一个词的首字母，以及后面每个词的首字母都大写）来命名所有的类 <em>（在<a href="http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms" target="_blank" rel="external">其他类似的命名法</a>中，这种风格通常也被称为 <code>帕斯卡命名法（PascalCase）</code>、 <code>大写驼峰命名法（CamelCaps）</code> 或 <code>首字母大写命名法（CapWords）</code>。）</em></p>
<p><em>（CoffeeScript <strong>官方</strong>  约定是用驼峰命名法，因为这可以简化与 JavaScript 的相互转化，想了解更多，请看<a href="https://github.com/jashkenas/coffee-script/issues/425" target="_blank" rel="external">这里</a>.)</em></p>
<p>对于常量，单词全部大写，用下划线隔开即可：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CONSTANT_LIKE_THIS</div></pre></td></tr></table></figure>
<p>私有函数和私有变量都应该在前面加一个下划线：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_privateMethod: <span class="function">-&gt;</span></div></pre></td></tr></table></figure>
<p><a name="functions"></a></p>
<h2 id="函数（Functions）"><a href="#函数（Functions）" class="headerlink" title="函数（Functions）"></a>函数（Functions）</h2><p><em>（以下这些准则同样适用于类中的方法。）</em></p>
<p>当声明一个带参函数时，应在参数列表的右圆括号后空出一个空格：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">foo</span> = <span class="params">(arg1, arg2)</span> -&gt;</span> <span class="comment"># 好</span></div><div class="line"><span class="function"><span class="title">foo</span> = <span class="params">(arg1, arg2)</span>-&gt;</span> <span class="comment"># 差</span></div></pre></td></tr></table></figure>
<p>无参函数不要用圆括号：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">bar</span> = -&gt;</span> <span class="comment"># 好</span></div><div class="line"><span class="function"><span class="title">bar</span> = <span class="params">()</span> -&gt;</span> <span class="comment"># 差</span></div></pre></td></tr></table></figure>
<p>当函数链式调用，却在一行放不下时，则把每个函数调用都另起一行，且都缩进一级（即在 <code>.</code> 前加两个空格）。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1.</span><span class="number">.3</span>]</div><div class="line">  .map(<span class="function"><span class="params">(x)</span> -&gt;</span> x * x)</div><div class="line">  .concat([<span class="number">10.</span><span class="number">.12</span>])</div><div class="line">  .filter(<span class="function"><span class="params">(x)</span> -&gt;</span> x &lt; <span class="number">11</span>)</div><div class="line">  .reduce(<span class="function"><span class="params">(x, y)</span> -&gt;</span> x + y)</div></pre></td></tr></table></figure>
<p>当调用函数时，我们应该为了提高可读性而去掉圆括号。请记住，「可读性」是我们主观臆断的。只有类似下面几个例子的情况才被社区认为是最佳的：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">baz <span class="number">12</span></div><div class="line"></div><div class="line">brush.ellipse x: <span class="number">10</span>, y: <span class="number">20</span> <span class="comment"># 大括号在适当的时候也可以去掉</span></div><div class="line"></div><div class="line">foo(<span class="number">4</span>).bar(<span class="number">8</span>)</div><div class="line"></div><div class="line">obj.value(<span class="number">10</span>, <span class="number">20</span>) / obj.value(<span class="number">20</span>, <span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="built_in">print</span> inspect value</div><div class="line"></div><div class="line"><span class="keyword">new</span> Tag(<span class="keyword">new</span> Value(a, b), <span class="keyword">new</span> Arg(c))</div></pre></td></tr></table></figure>
<p>有时候你会发现圆括号用来包裹的是函数体（而不是函数的参数）。请看下面的例子（以下简称为「函数体风格」）：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">($ <span class="string">'#selektor'</span>).addClass <span class="string">'klass'</span></div><div class="line"></div><div class="line">(foo <span class="number">4</span>).bar <span class="number">8</span></div></pre></td></tr></table></figure>
<p>这段代码会编译为：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#selektor'</span>).addClass <span class="string">'klass'</span></div><div class="line"></div><div class="line">foo(<span class="number">4</span>).bar <span class="number">8</span></div></pre></td></tr></table></figure>
<p>一些习惯链式调用的人会巧用「函数体风格」进行单独初始化：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">($ <span class="string">'#selektor'</span>).addClass(<span class="string">'klass'</span>).hide() <span class="comment"># 单独初始化调用</span></div><div class="line">(($ <span class="string">'#selektor'</span>).addClass <span class="string">'klass'</span>).hide() <span class="comment"># 全部调用</span></div></pre></td></tr></table></figure>
<p>「函数体风格」并不得到推荐。但是， <strong>当它适应一些特殊的项目需求时，还是得用它。</strong></p>
<p><a name="strings"></a></p>
<h2 id="字符串（Strings）"><a href="#字符串（Strings）" class="headerlink" title="字符串（Strings）"></a>字符串（Strings）</h2><p>用字符串插值代替字符串连接符：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"this is an <span class="subst">#&#123;adjective&#125;</span> string"</span> <span class="comment"># 好</span></div><div class="line"><span class="string">"this is an "</span> + adjective + <span class="string">" string"</span> <span class="comment"># 差</span></div></pre></td></tr></table></figure>
<p>最好用单引号 (<code>&#39;&#39;</code>) 而不是双引号 (<code>&quot;&quot;</code>) 。除非是插入到另一段现有的字符串中（类似字符串插值）。</p>
<p><a name="conditionals"></a></p>
<h2 id="条件判断（Conditionals）"><a href="#条件判断（Conditionals）" class="headerlink" title="条件判断（Conditionals）"></a>条件判断（Conditionals）</h2><p>用 <code>unless</code> 来代替 <code>if</code> 的否定情况。</p>
<p>不要用 <code>unless...else</code>， 而用 <code>if...else</code>:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 好</span></div><div class="line"><span class="keyword">if</span> <span class="literal">true</span></div><div class="line">  ...</div><div class="line"><span class="keyword">else</span></div><div class="line">  ...</div><div class="line"></div><div class="line"><span class="comment"># 差</span></div><div class="line"><span class="keyword">unless</span> <span class="literal">false</span></div><div class="line">  ...</div><div class="line"><span class="keyword">else</span></div><div class="line">  ...</div></pre></td></tr></table></figure>
<p>多行的 if/else 语句应该缩进：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 好</span></div><div class="line"><span class="keyword">if</span> <span class="literal">true</span></div><div class="line">  ...</div><div class="line"><span class="keyword">else</span></div><div class="line">  ...</div><div class="line"></div><div class="line"><span class="comment"># 差</span></div><div class="line"><span class="keyword">if</span> <span class="literal">true</span> <span class="keyword">then</span> ...</div><div class="line"><span class="keyword">else</span> ...</div></pre></td></tr></table></figure>
<p><a name="looping_and_comprehensions"></a></p>
<h2 id="循环和列表解析（Looping-and-Comprehensions）"><a href="#循环和列表解析（Looping-and-Comprehensions）" class="headerlink" title="循环和列表解析（Looping and Comprehensions）"></a>循环和列表解析（Looping and Comprehensions）</h2><p>尽可能的使用列表解析：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 好</span></div><div class="line">result = (item.name <span class="keyword">for</span> item <span class="keyword">in</span> array)</div><div class="line"></div><div class="line"><span class="comment"># 差</span></div><div class="line">results = []</div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> array</div><div class="line">  results.push item.name</div></pre></td></tr></table></figure>
<p>还可以过滤结果：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result = (item <span class="keyword">for</span> item <span class="keyword">in</span> array <span class="keyword">when</span> item.name <span class="keyword">is</span> <span class="string">"test"</span>)</div></pre></td></tr></table></figure>
<p>遍历对象的键值：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">object = one: <span class="number">1</span>, two: <span class="number">2</span></div><div class="line">alert(<span class="string">"<span class="subst">#&#123;key&#125;</span> = <span class="subst">#&#123;value&#125;</span>"</span>) <span class="keyword">for</span> key, value <span class="keyword">of</span> object</div></pre></td></tr></table></figure>
<p><a name="extending_native_objects"></a></p>
<h2 id="扩展本地对象（Extending-Native-Objects）"><a href="#扩展本地对象（Extending-Native-Objects）" class="headerlink" title="扩展本地对象（Extending Native Objects）"></a>扩展本地对象（Extending Native Objects）</h2><p>不要修改本地对象。</p>
<p>比如，不要给 <code>Array.prototype</code> 引入 <code>Array#forEach</code> 。</p>
<p><a name="exceptions"></a></p>
<h2 id="异常（Exceptions）"><a href="#异常（Exceptions）" class="headerlink" title="异常（Exceptions）"></a>异常（Exceptions）</h2><p>不要抑制异常抛出。</p>
<p><a name="annotations"></a></p>
<h2 id="注解（Annotations）"><a href="#注解（Annotations）" class="headerlink" title="注解（Annotations）"></a>注解（Annotations）</h2><p>必要的时候应该写注解，来指明接下来的代码块具体将干什么。</p>
<p>注解应紧贴在被描述代码的上一行。</p>
<p>注解关键字后面应该跟一个冒号加一个空格，加一个描述性的注释。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># <span class="doctag">FIXME:</span> The client's current state should *not* affect payload processing.</span></div><div class="line">resetClientState()</div><div class="line">processPayload()</div></pre></td></tr></table></figure>
<p>如果注解不止一行，则下一行缩进两个空格。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># <span class="doctag">TODO:</span> Ensure that the value returned by this call falls within a certain</span></div><div class="line"><span class="comment">#   range, or throw an exception.</span></div><div class="line">analyze()</div></pre></td></tr></table></figure>
<p>注解有以下几类：</p>
<ul>
<li><code>TODO</code>: 描述缺失的功能，以便日后加入</li>
<li><code>FIXME</code>: 描述需要修复的代码</li>
<li><code>OPTIMIZE</code>: 描述性能低下，或难以优化的代码</li>
<li><code>HACK</code>: 描述一段值得质疑（或很巧妙）的代码</li>
<li><code>REVIEW</code>: 描述需要确认其编码意图是否正确的代码</li>
</ul>
<p>如果你必须自定义一个新的注解类型，则应该把这个注解类型记录在项目的 README 里面。</p>
<p><a name="miscellaneous"></a></p>
<h2 id="其他（Miscellaneous）"><a href="#其他（Miscellaneous）" class="headerlink" title="其他（Miscellaneous）"></a>其他（Miscellaneous）</h2><p><code>and</code> 更优于 <code>&amp;&amp;</code>.</p>
<p><code>or</code> 更优于 <code>||</code>.</p>
<p><code>is</code> 更优于 <code>==</code>.</p>
<p><code>not</code> 更优于 <code>!</code>.</p>
<p><code>or=</code> 应在可能的情况下使用：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">temp <span class="keyword">or</span>= &#123;&#125; <span class="comment"># 好</span></div><div class="line">temp = temp || &#123;&#125; <span class="comment"># 差</span></div></pre></td></tr></table></figure>
<p>最好用 (<code>::</code>) 访问对象的原型：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Array::slice <span class="comment"># 好</span></div><div class="line">Array.prototype.slice <span class="comment"># 差</span></div></pre></td></tr></table></figure>
<p>最好用 <code>@property</code> 而不是 <code>this.property</code>.</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> @property <span class="comment"># 好</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.property <span class="comment"># 差</span></div></pre></td></tr></table></figure>
<p>但是，避免使用 <strong>单独的</strong> <code>@</code>:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">this</span> <span class="comment"># 好</span></div><div class="line"><span class="keyword">return</span> @ <span class="comment"># 差</span></div></pre></td></tr></table></figure>
<p>没有返回值的时候避免使用 <code>return</code> ，其他情况则需要显示 return 。</p>
<p>当函数需要接收可变数量的参数时，使用 splats  (<code>...</code>)。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log args... <span class="comment"># 好</span></div><div class="line"></div><div class="line">(a, b, c, rest...) -&gt; <span class="comment"># 好</span></div></pre></td></tr></table></figure>
<p>（译文完）</p>
<hr>
<ul>
<li><a href="https://github.com/polarmobile/coffeescript-style-guide/blob/master/README.md" target="_blank" rel="external">原文地址</a></li>
<li><a href="http://geekplux.github.io/coffeescript-style-guide" target="_blank" rel="external">中文版地址</a></li>
<li><a href="https://github.com/polarmobile/coffeescript-style-guide" target="_blank" rel="external">原 Github 地址</a></li>
<li><a href="https://github.com/geekplux/coffeescript-style-guide" target="_blank" rel="external">中文版 Github 地址</a></li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这份指南阐述了一些 &lt;a href=&quot;http://jashkenas.github.com/coffee-script/&quot;&gt;CoffeeScript&lt;/a&gt; 的最佳实践和编码惯例。&lt;/p&gt;
&lt;p&gt;这份指南是社群驱动的，非常鼓励大家来贡献内容。&lt;/p&gt;
&lt;p&gt;请注意这还是一份正在完善的指南：仍有很多地方可以改进，有些已制定的准则也不一定是社区惯用的（基于此，在适当的情况下，这些有待斟酌的准则将有可能被修改或删除。）&lt;/p&gt;
&lt;h2 id=&quot;灵感&quot;&gt;&lt;a href=&quot;#灵感&quot; class=&quot;headerlink&quot; title=&quot;灵感&quot;&gt;&lt;/a&gt;灵感&lt;/h2&gt;&lt;p&gt;本指南中的很多细节受到了几份现有的风格指南和其他资源的启发。特别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.python.org/dev/peps/pep-0008/&quot;&gt;PEP-8&lt;/a&gt;: Style Guide for Python Code&lt;/li&gt;
&lt;li&gt;Bozhidar Batsov’s &lt;a href=&quot;https://github.com/bbatsov/ruby-style-guide&quot;&gt;Ruby Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml&quot;&gt;Google’s JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arcturo.github.com/library/coffeescript/04_idioms.html&quot;&gt;Common CoffeeScript Idioms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Thomas Reynolds’ &lt;a href=&quot;http://awardwinningfjords.com/2011/05/13/coffeescript-specific-style-guide.html&quot;&gt;CoffeeScript-specific Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jeremy Ashkenas’ &lt;a href=&quot;https://gist.github.com/1005723&quot;&gt;code review&lt;/a&gt; of &lt;a href=&quot;http://spinejs.com/&quot;&gt;Spine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://github.com/jashkenas/coffee-script/wiki/FAQ&quot;&gt;CoffeeScript FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web" scheme="http://geekplux.com/categories/Web/"/>
    
      <category term="CoffeeScript" scheme="http://geekplux.com/categories/Web/CoffeeScript/"/>
    
    
      <category term="Web" scheme="http://geekplux.com/tags/Web/"/>
    
      <category term="CoffeeScript" scheme="http://geekplux.com/tags/CoffeeScript/"/>
    
      <category term="译文" scheme="http://geekplux.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Translation" scheme="http://geekplux.com/tags/Translation/"/>
    
  </entry>
  
  <entry>
    <title>CoffeeScript 笔记</title>
    <link href="http://geekplux.com/2014/05/15/coffeescript_note.html"/>
    <id>http://geekplux.com/2014/05/15/coffeescript_note.html</id>
    <published>2014-05-15T11:06:09.000Z</published>
    <updated>2015-08-04T08:59:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近读了《CoffeeScript程序设计》的前半部分「核心 CoffeeScript」。对 CoffeeScript 也是有了初步的了解，本文只是我的随手笔记，并没有非常系统的总结 CoffeeScript 语法，想学习语法的同学可以看以下两份中文材料：</p>
<ul>
<li><a href="http://island205.github.io/tlboc/" target="_blank" rel="external">CoffeeScript中文手册</a></li>
<li><a href="http://island205.github.io/coffeescript-cookbook.github.com/" target="_blank" rel="external">CoffeeScript Cookbook</a></li>
</ul>
<h2 id="为什么要用-CoffeeScript？"><a href="#为什么要用-CoffeeScript？" class="headerlink" title="为什么要用 CoffeeScript？"></a>为什么要用 CoffeeScript？</h2><ul>
<li>采用了 JavaScript 中的 Good Parts，符合 JS 最佳实践</li>
<li>代码简洁清晰，有很多语法糖</li>
</ul>
<h2 id="一些特性"><a href="#一些特性" class="headerlink" title="一些特性"></a>一些特性</h2><h4 id="1-有意义的空格"><a href="#1-有意义的空格" class="headerlink" title="1.有意义的空格"></a>1.有意义的空格</h4><p>CoffeeScript 移除了所有的大括号和分号。</p>
<p>JS 会自动在行尾添加<code>;</code>，但它又没有纯粹的设计为一款不需要加分号的语言，所以有时候会引起一些蛋疼的Bug。而 CoffeeScript 会在编译出的 JS 代码里每行都加<code>;</code>，很方便。</p>
<p>CoffeeScript 和 Python、Ruby 一样，采用强制缩进（Coffee的很多地方与 ruby 类似)，这种简洁，可读性又很强的代码，让人大爱。</p>
<a id="more"></a>
<h4 id="2-变量作用域的控制"><a href="#2-变量作用域的控制" class="headerlink" title="2.变量作用域的控制"></a>2.变量作用域的控制</h4><p>JS 中的变量作用域一直让人诟病。</p>
<p>CoffeeScript 把编译生成的 JS 封装在一个匿名函数中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// 这里是编译生成的代码</span></div><div class="line">&#125;).call(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p>这样就巧妙避免了全局作用域的污染。同时，CoffeeScript 始终在编译生成的 JS 代码中用 <code>var</code> 声明变量。</p>
<h4 id="3-存在性判断"><a href="#3-存在性判断" class="headerlink" title="3.存在性判断"></a>3.存在性判断</h4><p>CoffeeScript 中有个操作符 <code>?</code>，用于检测变量是否存在。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log html <span class="keyword">if</span> html?</div></pre></td></tr></table></figure>
<p>这句 CoffeeScript 编译过来为（去掉了匿名封装函数，为了方便，之后的编译后代码都去掉）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> html !== <span class="string">"undefined"</span> &amp;&amp; html !== <span class="literal">null</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(html);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可见，<code>?</code> 会先检测变量有没有定义，如果定义了再检测是否为 null。</p>
<h4 id="4-函数和-splat-操作符"><a href="#4-函数和-splat-操作符" class="headerlink" title="4.函数和 splat 操作符"></a>4.函数和 splat 操作符</h4><p>CoffeeScript 中去掉了 <code>function</code> 关键字。用 <code>() -&gt;</code> 定义一个函数。括号内为参数，可以为参数设置默认值。如：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">myFunction</span> = <span class="params">(a, b = <span class="number">2</span>)</span> -&gt;</span></div><div class="line">  a + b</div></pre></td></tr></table></figure>
<p>编译为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myFunction;</div><div class="line"></div><div class="line">myFunction = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (b == <span class="literal">null</span>) &#123;</div><div class="line">    b = <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> a + b;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>调用函数的时候，还可以不用括号。如：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myFunction <span class="number">3</span>, <span class="number">5</span></div></pre></td></tr></table></figure>
<p>有一点需要注意一下，CoffeeScript 会在编译后的 JS 代码中自动为最后一行添加 <code>return</code> 关键字。所以不论函数的最后一行是什么，都会成为返回值。如果你不想让最后一行成为返回值，就需要另起一行自己加上 <code>return</code>。</p>
<p>splat 操作符非常强大。在你的函数需要接受<strong>可变数量的参数</strong>时就需要它了。书上的栗子：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">splatter</span> = <span class="params">(etc...)</span> -&gt;</span></div><div class="line">  <span class="built_in">console</span>.log <span class="string">"Length: <span class="subst">#&#123;etc.length&#125;</span>, Values: <span class="subst">#&#123;etc.join(<span class="string">', '</span>)&#125;</span>"</span></div><div class="line">  <span class="regexp">//</span> CoffeeScript 中字符串插值用 <span class="comment">#&#123;&#125;</span></div><div class="line"></div><div class="line">splatter()</div><div class="line">splatter(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</div><div class="line"></div><div class="line"><span class="regexp">//</span> 输出</div><div class="line">Length: <span class="number">0</span>, Values:</div><div class="line">Length: <span class="number">3</span>, Values: a, b, c</div></pre></td></tr></table></figure>
<p>就在某个参数后面加上<code>...</code>，就使传入的参数自动转化为一个数组。<strong>splat 操作符可以出现在参数列表的任意位置，但是参数列表中只能有一个 splat 操作符</strong>。</p>
<h4 id="5-数组与区间"><a href="#5-数组与区间" class="headerlink" title="5.数组与区间"></a>5.数组与区间</h4><p>一般定义数组是这样：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</div></pre></td></tr></table></figure>
<p>在 CoffeeScript 里你还可以这样：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">myArray = [</div><div class="line">            <span class="string">"a"</span></div><div class="line">            <span class="string">"b"</span></div><div class="line">            <span class="string">"c"</span></div><div class="line">          ]</div></pre></td></tr></table></figure>
<ul>
<li>在 JS 中判断是否存在于数组，需要用 <code>Array.prototype.indexOf</code>，在 CoffeeScript 中只需要用 <code>in</code>：</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log <span class="string">"d was not be found"</span> <span class="keyword">unless</span> <span class="string">"d"</span> <span class="keyword">in</span> myArray</div><div class="line"></div><div class="line"><span class="regexp">//</span> 输出</div><div class="line">d was <span class="keyword">not</span> be found</div></pre></td></tr></table></figure>
<ul>
<li>交换赋值</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x = <span class="string">"X"</span></div><div class="line">y = <span class="string">"Y"</span></div><div class="line"></div><div class="line">[x, y] = [y, x]</div></pre></td></tr></table></figure>
<p>交换 x、y 的值就这么简单！</p>
<ul>
<li>多重赋值</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">myArray = [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>]</div><div class="line"></div><div class="line">[start, middle..., end] = myArray  <span class="regexp">//</span> 可配合 splat 操作符使用</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log <span class="string">"start: <span class="subst">#&#123;start&#125;</span>"</span></div><div class="line"><span class="built_in">console</span>.log <span class="string">"middle: <span class="subst">#&#123;middle&#125;</span>"</span></div><div class="line"><span class="built_in">console</span>.log <span class="string">"end: <span class="subst">#&#123;end&#125;</span>"</span></div><div class="line"></div><div class="line"><span class="regexp">//</span> 输出</div><div class="line">start: A</div><div class="line">middle: B,C</div><div class="line">end: D</div></pre></td></tr></table></figure>
<ul>
<li><strong>区间</strong></li>
</ul>
<p>区间能让<strong>定义包含两个数字之间所有数字的数组</strong>变得很容易。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">myRange = [<span class="number">1.</span><span class="number">.10</span>]</div><div class="line"><span class="built_in">console</span>.log myRange</div><div class="line"></div><div class="line"><span class="regexp">//</span> 输出 [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> ]</div></pre></td></tr></table></figure>
<p>如果不想包括结束数值，可以用 <code>...</code> 代替 <code>..</code>。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">myRange = [<span class="number">10.</span>.<span class="number">.1</span>]</div><div class="line"><span class="built_in">console</span>.log myRange</div><div class="line"></div><div class="line"><span class="regexp">//</span> 输出 [ <span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span> ]</div></pre></td></tr></table></figure>
<p>常见的数组操作，都可以通过区间完成：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">myArray = [<span class="number">1.</span><span class="number">.10</span>]</div><div class="line"></div><div class="line"><span class="regexp">//</span> 分割数组</div><div class="line">part = myArray[<span class="number">0.</span><span class="number">.2</span>]</div><div class="line"><span class="built_in">console</span>.log part</div><div class="line"><span class="regexp">//</span> 输出 [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</div><div class="line"></div><div class="line"></div><div class="line"><span class="regexp">//</span> 替换数组值</div><div class="line">myArray = [<span class="number">1.</span><span class="number">.10</span>]</div><div class="line">myArray[<span class="number">4.</span><span class="number">.7</span>] = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</div><div class="line"><span class="built_in">console</span>.log myArray</div><div class="line"><span class="regexp">//</span> 输出 [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="number">9</span>, <span class="number">10</span> ]</div><div class="line"></div><div class="line"></div><div class="line"><span class="regexp">//</span> 插入值</div><div class="line">myArray = [<span class="number">1.</span><span class="number">.10</span>]</div><div class="line">myArray[<span class="number">4.</span>.<span class="number">-1</span>] = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</div><div class="line"><span class="built_in">console</span>.log myArray</div><div class="line"><span class="regexp">//</span> 输出 [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> ]</div></pre></td></tr></table></figure>
<h4 id="6-类和继承"><a href="#6-类和继承" class="headerlink" title="6.类和继承"></a>6.类和继承</h4><p>一例胜千言：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></div><div class="line">  constructor: <span class="function"><span class="params">(@name)</span> -&gt;</span></div><div class="line"></div><div class="line">  move: <span class="function"><span class="params">(meters)</span> -&gt;</span></div><div class="line">    alert @name + <span class="string">" moved <span class="subst">#&#123;meters&#125;</span>m."</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line">  move: <span class="function">-&gt;</span></div><div class="line">    alert <span class="string">"Slithering..."</span></div><div class="line">    <span class="keyword">super</span> <span class="number">5</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Horse</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line">  move: <span class="function">-&gt;</span></div><div class="line">    alert <span class="string">"Galloping..."</span></div><div class="line">    <span class="keyword">super</span> <span class="number">45</span></div><div class="line"></div><div class="line">sam = <span class="keyword">new</span> Snake <span class="string">"Sammy the Python"</span></div><div class="line">tom = <span class="keyword">new</span> Horse <span class="string">"Tommy the Palomino"</span></div><div class="line"></div><div class="line">sam.move()</div><div class="line">tom.move()</div></pre></td></tr></table></figure>
<p>这是官网的例子，麻麻再也不用担心我在 JS 里使用类和继承了 T_T。</p>
<ul>
<li>consturctor 函数为类的构造函数。在 <code>new</code> 的时候调用，可以重写它。</li>
<li><code>::</code> 就和 JS 里的 <code>prototype</code> 一样</li>
</ul>
<h2 id="很多语法糖"><a href="#很多语法糖" class="headerlink" title="很多语法糖"></a>很多语法糖</h2><p>我对「语法糖」的理解就是让代码的读写更简单。</p>
<p>CoffeeScript 中添加了一些关键字，如 <code>unless when then until do</code> 等。不仅如此，CoffeeScript 引入了很多<strong>别名</strong>来代替一些关键字：</p>
<table>
<thead>
<tr>
<th>别名</th>
<th>对应关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td>is</td>
<td>===</td>
</tr>
<tr>
<td>isnt</td>
<td>!==</td>
</tr>
<tr>
<td>not</td>
<td>!</td>
</tr>
<tr>
<td>and</td>
<td>&amp;&amp;</td>
</tr>
<tr>
<td>or</td>
<td>&#124;&#124;</td>
</tr>
<tr>
<td>true, yes, on</td>
<td>true</td>
</tr>
<tr>
<td>false, no, off</td>
<td>false</td>
</tr>
<tr>
<td>@, this</td>
<td>this</td>
</tr>
<tr>
<td>of</td>
<td>in</td>
</tr>
<tr>
<td>in</td>
<td>no JS equivalent</td>
</tr>
</tbody>
</table>
<p>运用别名和新关键字，使代码读起来就和普通的英文一样。而且 CoffeeScript 还自动为你添加关键字，如函数最后的 <code>return</code>，<code>switch</code> 后自动添加 <code>break</code>（这种符合我们惰性的改进都是伟大的！ヽ( ^∀^)ﾉ）。</p>
<h2 id="安装及用法"><a href="#安装及用法" class="headerlink" title="安装及用法"></a>安装及用法</h2><p>1.安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g coffee-script</div></pre></td></tr></table></figure></p>
<p>2.用法：</p>
<p>安装完成后，直接在命令行中输入 <code>coffee</code>，就进入了 CoffeeScript 的 REPL（Read-eval-print-loop） 模式，这是一个可交互的控制台，你可以输入 CoffeeScript 代码立即执行。如图：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5Ccoffeescript_noteBF073048-AB31-4C6C-84FD-BEDE15DB9E62.png" alt=""></p>
<p>也可以用<strong>指令</strong>编译 CoffeeScript 代码执行（<em>CoffeeScript 代码文件后缀名为 coffee</em>）：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">coffee -c hello_world.coffee</div></pre></td></tr></table></figure>
<p>还有一些其他选项，我目前用的最多的是 <code>-o</code>、<code>-p</code>、<code>-w</code> 这三个。</p>
<p><code>-o</code> 即 <code>--output</code>，设置编译后 JS 文件输出到指定文件夹<br><code>-p</code> 即 <code>--print</code> ，直接在终端打印出编译后的 JS 代码<br><code>-w</code> 即 <code>--watch</code>，监视文件改变，一有变化就重新执行这条指令</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">coffee -c hello_world.coffee -o ./js -w</div></pre></td></tr></table></figure>
<p>搭配起来就可以边写边编译到指定文件夹。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>有篇文章<a href="http://amix.dk/blog/post/19612" target="_blank" rel="external">《CoffeeScript: The beautiful way to write JavaScript》</a>，对 JS 和 CoffeeScript 的论述很中肯。但文中对「什么才是优美的代码」的总结更让人印象深刻：</p>
<blockquote>
<ul>
<li>beautiful code uses the least amount of code to solve a given problem</li>
<li>beautiful code is readable and understandable</li>
<li>beautiful code is achieved not when there is nothing more to add, but when there is nothing left to take away (just like great designs)</li>
<li>the minimal length is a side-effect of beautiful code and not a goal or a measure</li>
</ul>
</blockquote>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="http://book.douban.com/subject/20509115/" target="_blank" rel="external">《CoffeeScript 程序设计》</a></li>
<li><a href="http://coffeescript.org/" target="_blank" rel="external">CoffeeScript 官网</a></li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近读了《CoffeeScript程序设计》的前半部分「核心 CoffeeScript」。对 CoffeeScript 也是有了初步的了解，本文只是我的随手笔记，并没有非常系统的总结 CoffeeScript 语法，想学习语法的同学可以看以下两份中文材料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://island205.github.io/tlboc/&quot;&gt;CoffeeScript中文手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://island205.github.io/coffeescript-cookbook.github.com/&quot;&gt;CoffeeScript Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;为什么要用-CoffeeScript？&quot;&gt;&lt;a href=&quot;#为什么要用-CoffeeScript？&quot; class=&quot;headerlink&quot; title=&quot;为什么要用 CoffeeScript？&quot;&gt;&lt;/a&gt;为什么要用 CoffeeScript？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;采用了 JavaScript 中的 Good Parts，符合 JS 最佳实践&lt;/li&gt;
&lt;li&gt;代码简洁清晰，有很多语法糖&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一些特性&quot;&gt;&lt;a href=&quot;#一些特性&quot; class=&quot;headerlink&quot; title=&quot;一些特性&quot;&gt;&lt;/a&gt;一些特性&lt;/h2&gt;&lt;h4 id=&quot;1-有意义的空格&quot;&gt;&lt;a href=&quot;#1-有意义的空格&quot; class=&quot;headerlink&quot; title=&quot;1.有意义的空格&quot;&gt;&lt;/a&gt;1.有意义的空格&lt;/h4&gt;&lt;p&gt;CoffeeScript 移除了所有的大括号和分号。&lt;/p&gt;
&lt;p&gt;JS 会自动在行尾添加&lt;code&gt;;&lt;/code&gt;，但它又没有纯粹的设计为一款不需要加分号的语言，所以有时候会引起一些蛋疼的Bug。而 CoffeeScript 会在编译出的 JS 代码里每行都加&lt;code&gt;;&lt;/code&gt;，很方便。&lt;/p&gt;
&lt;p&gt;CoffeeScript 和 Python、Ruby 一样，采用强制缩进（Coffee的很多地方与 ruby 类似)，这种简洁，可读性又很强的代码，让人大爱。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://geekplux.com/categories/Web/"/>
    
      <category term="CoffeeScript" scheme="http://geekplux.com/categories/Web/CoffeeScript/"/>
    
    
      <category term="Web" scheme="http://geekplux.com/tags/Web/"/>
    
      <category term="笔记" scheme="http://geekplux.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Note" scheme="http://geekplux.com/tags/Note/"/>
    
      <category term="CoffeeScript" scheme="http://geekplux.com/tags/CoffeeScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS 最核心的几个概念</title>
    <link href="http://geekplux.com/2014/04/25/several_core_concepts_of_css.html"/>
    <id>http://geekplux.com/2014/04/25/several_core_concepts_of_css.html</id>
    <published>2014-04-25T12:28:33.000Z</published>
    <updated>2015-08-04T09:00:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将讲述 CSS 中最核心的几个概念，包括：盒模型、position、float等。这些是 CSS 的基础，也是最常用的几个属性，它们之间看似独立却又相辅相成。为了掌握它们，有必要写出来探讨一下，如有错误欢迎指正。</p>
<h1 id="元素类型"><a href="#元素类型" class="headerlink" title="元素类型"></a>元素类型</h1><p>HTML 的元素可以分为两种：</p>
<ul>
<li>块级元素（block level element）</li>
<li>内联元素（inline element 有的人也叫它行内元素）</li>
</ul>
<p>两者的区别在于以下三点：</p>
<ol>
<li>块级元素会独占一行（即无法与其他元素显示在同一行内，除非你显式修改元素的 display 属性），而内联元素则都会在一行内显示。</li>
<li>块级元素可以设置 width、height 属性，而内联元素设置无效。</li>
<li>块级元素的 width 默认为 100%，而内联元素则是根据其自身的内容或子元素来决定其宽度。</li>
</ol>
<p><em>最常见块级元素应该是 <code>&lt;div&gt;</code> 吧，内联元素有 <code>&lt;span&gt;</code> <code>&lt;a&gt;</code> <code>&lt;img&gt;</code> 等等，完整的元素列表可以谷歌一下。</em></p>
<p>具体来说一下吧,</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.example</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们为 <code>&lt;div&gt;</code> 设置上面的样式，是有效果的，因为其是块级元素，而对 <code>&lt;span&gt;</code> 设置上面的样式是没用的。要想让 <code>&lt;span&gt;</code> 也可以改变宽高，可以通过设置 <code>display: block;</code> 来达到效果。当 display 的值设为 block 时，元素将以块级形式呈现；当 display 值设为 inline 时，元素将以内联形式呈现。</p>
<a id="more"></a>
<p>若既想让元素在行内显示，又能设置宽高，可以设置：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</div></pre></td></tr></table></figure>
<p>inline-block 在我看来就是让元素对外呈内联元素，可以和其他元素共处与一行内；对内则让元素呈块级元素，可改变其宽高。</p>
<hr>
<p>HTML 代码是顺序执行的，一份无任何 CSS 样式的 HTML 代码最终呈现出的页面是根据元素出现的顺序和类型排列的。块级元素就从上到下排列，遇到内联元素则从左到右排列。这种无样式的情况下，元素的分布叫<strong>普通流</strong>，元素出现的位置应该叫<strong>正常位置</strong>（这是我瞎起的），同时<strong>所有元素会在页面上占据一个空间</strong>，空间大小由其盒模型决定。</p>
<h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><p>页面上显示的每个元素（包括内联元素）都可以看作一个盒子，即盒模型( box model )。请看 Chrome DevTools 里的截图：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5Cthree_core_concepts_of_cssD65A4E60-A213-481C-86D6-A3929A0A8D28.png" alt=""></p>
<p>可以显而易见的看出盒模型由 4 部分组成。从内到外分别是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">content -&gt; padding -&gt; border -&gt; margin</div></pre></td></tr></table></figure>
<p>按理来说一个元素的宽度（高度以此类推）应该这样计算：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">总宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right</div></pre></td></tr></table></figure>
<p>但是不同浏览器（你没有猜错，就是那个与众不同的浏览器）对宽度的诠释不一样。符合 W3C 标准的浏览器认为一个元素的宽度只等于其 content 的宽度，其余都要额外算。于是你规定一个元素：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.example</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>则他最终的宽度应为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">宽度 = width(200px) + padding(10px * 2) + border(5px * 2) + margin(20px * 2) = 270px;</div></pre></td></tr></table></figure>
<p>而在 IE（低于IE9） 下，最终宽度为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">宽度 = width(200px) + margin(20px * 2) = 240px;</div></pre></td></tr></table></figure>
<p>我个人觉得 IE 的更符合人类思维，毕竟 padding 叫内边距，边框算作额外的宽度也说不下去。W3C 最后为了解决这个问题，在 CSS3 中加了 box-sizing 这个属性。当我们设置 <code>box-sizing: border-box;</code> 时，border 和 padding 就被包含在了宽高之内，和 IE 之前的标准是一样的。所以，为了避免你同一份 css 在不同浏览器下表现不同，最好加上：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">-moz-box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">-webkit-box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里还有两种特殊情况：</p>
<ul>
<li>无宽度 —— 绝对定位（position: absolute;） 元素</li>
<li>无宽度 —— 浮动（float） 元素</li>
</ul>
<p>它们在页面上的表现均<strong>不占据空间</strong>（脱离普通流，感觉像浮在页面上层一样，移动它们不影响其他元素的定位）。这就涉及到另外两个核心概念 position 和 float。</p>
<h1 id="position"><a href="#position" class="headerlink" title="position"></a>position</h1><p>position 这个属性决定了元素将如何定位。它的值大概有以下五种：</p>
<table>
<thead>
<tr>
<th style="text-align:left">position 值</th>
<th style="text-align:left">如何定位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">static</td>
<td style="text-align:left">position的<strong>默认值</strong>。元素将定位到它的正常位置（上文提到过），其实也就相当于没有定位。元素在页面上<strong>占据</strong>位置。<strong>不能</strong>使用 top right bottom left 移动元素位置。</td>
</tr>
<tr>
<td style="text-align:left">relative</td>
<td style="text-align:left">相对定位，相对于元素的正常位置来进行定位。元素在页面<strong>占据</strong>位置。<strong>可以</strong>使用 top right bottom left 移动元素位置。</td>
</tr>
<tr>
<td style="text-align:left">absolute</td>
<td style="text-align:left">绝对定位，相对于<em>最近一级的</em> <strong>定位不是 static 的</strong>父元素来进行定位。元素在页面<strong>不占据</strong>位置。 <strong>可以</strong>使用 top right bottom left 移动元素位置。</td>
</tr>
<tr>
<td style="text-align:left">fixed</td>
<td style="text-align:left">绝对定位，相对于<strong>浏览器窗口</strong>来进行定位。其余和 absolute 一样，相当于一种特殊的 absolute。</td>
</tr>
<tr>
<td style="text-align:left">inherit</td>
<td style="text-align:left">从父元素继承 position 属性的值。</td>
</tr>
</tbody>
</table>
<p>具体效果可以参考<a href="http://www.w3school.com.cn/cssref/pr_class_position.asp" target="_blank" rel="external">w3school的实例</a>，或者自己写一下就明白了。</p>
<p>每个网页都可以看成是由一层一层页面堆叠起来的，如下图所示。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5Cthree_core_concepts_of_css2012-08-14-59d1deed94-70c5-48bb-b2ff-8421d516a981.gif" alt="图片来自网络"></p>
<p>position 设置为 relative 的时候，元素依然在普通流中，位置是正常位置，你可以通过 left right 等移动元素。会影响其他元素的位置。</p>
<p>而当一个元素的 position 值为 absolute 或 fixed 的时候，会发生三件事：</p>
<ol>
<li>把该元素往 Z 轴方向移了一层，<strong>元素脱离了普通流，所以不再占据原来那层的空间</strong>，还会覆盖下层的元素。</li>
<li>该元素将<strong>变为块级元素</strong>，相当于给该元素设置了 <code>display: block;</code>（给一个内联元素，如 <code>&lt;span&gt;</code> ，设置 absolute 之后发现它可以设置宽高了）。</li>
<li>如果该元素是块级元素，元素的宽度由原来的 width: 100%（占据一行），变为了 auto。</li>
</ol>
<p>由此观之，当 position 设置为 absolute 或 fixed，就没必要设置 display 为 block 了。而且如果你不想覆盖下层的元素，可以设置 z-index 值 达到效果。</p>
<h1 id="float"><a href="#float" class="headerlink" title="float"></a>float</h1><p>float 顾名思义，就是把元素浮动，它的取值一共有四个：left right none inherit，光看名字就懂了，无需多言。</p>
<p>最初的 float 只是用来实现<strong>文字环绕图片</strong>的效果，仅此而已。而现在 float 的应用已不止这个，前辈们也是写了无数博文来深入浅出的讲解它。<br>浅如：<br><a href="http://www.cnblogs.com/iyangyuan/archive/2013/03/27/2983813.html" target="_blank" rel="external">经验分享：CSS浮动(float,clear)通俗讲解</a> 篇幅不长，通俗易懂，可以看完这篇文章再回过头来看本文。<br>深如：<br><a href="http://www.zhangxinxu.com/wordpress/2010/01/css-float%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E3%80%81%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%8B%93%E5%B1%95%E4%B8%80/" target="_blank" rel="external">CSS float浮动的深入研究、详解及拓展(一)</a><br><a href="http://www.zhangxinxu.com/wordpress/2010/01/css-float%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E3%80%81%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%8B%93%E5%B1%95%E4%BA%8C/" target="_blank" rel="external">CSS float浮动的深入研究、详解及拓展(二)</a><br>从本质上讲解了 float 的原理。</p>
<p>我就不班门弄斧写原理了，只说说 float 的几个要点就行了：</p>
<ol>
<li>只有左右浮动，没有上下浮动。</li>
<li>元素设置 float 之后，它会<strong>脱离普通流</strong>（和 <code>position: absolute;</code> 一样），不再占据原来那层的空间，还会覆盖下一层的元素。</li>
<li>浮动不会对该元素的上一个兄弟元素有任何影响。</li>
<li>浮动之后，该元素的下一个兄弟元素会紧贴到该元素之前没有设置 float 的元素之后（很好理解，因为该元素脱离普通流了，或者说不在这一层了，所以它的下一个元素当然要补上它的位置）。</li>
<li>如果该元素的下一个兄弟元素中有内联元素（通常是文字），则会围绕该元素显示，形成类似「文字围绕图片」的效果。（可参考<a href="http://www.zhangxinxu.com/wordpress/2010/01/css-float%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E3%80%81%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%8B%93%E5%B1%95%E4%B8%80/" target="_blank" rel="external">CSS float浮动的深入研究、详解及拓展(一)</a>中的讲解）。这个我还是实践了一下的：<iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/9yAH8/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe></li>
<li>下一个兄弟元素如果也设置了同一方向的 float，则会紧随该元素之后显示。</li>
<li>该元素将<strong>变为块级元素</strong>，相当于给该元素设置了 <code>display: block;</code>（和<code>position: absolute;</code> 一样）。</li>
</ol>
<p>这里还有个东西，就是广为人知的——<strong>清除浮动</strong>。具体的方法五花八门，可以看这篇：<a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="external">那些年我们一起清除过的浮动</a>，我就不多说了。</p>
<p>写完本文后，脑子中又出现了一系列问题，假如 position 和 float 同时设置会出现什么问题？兼容性如何？哪个属性会被覆盖？还没来得及实践，改天以排列组合的方式看看到底是什么效果……如果有人实践过可以偷偷告诉我^_^</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将讲述 CSS 中最核心的几个概念，包括：盒模型、position、float等。这些是 CSS 的基础，也是最常用的几个属性，它们之间看似独立却又相辅相成。为了掌握它们，有必要写出来探讨一下，如有错误欢迎指正。&lt;/p&gt;
&lt;h1 id=&quot;元素类型&quot;&gt;&lt;a href=&quot;#元素类型&quot; class=&quot;headerlink&quot; title=&quot;元素类型&quot;&gt;&lt;/a&gt;元素类型&lt;/h1&gt;&lt;p&gt;HTML 的元素可以分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块级元素（block level element）&lt;/li&gt;
&lt;li&gt;内联元素（inline element 有的人也叫它行内元素）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两者的区别在于以下三点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;块级元素会独占一行（即无法与其他元素显示在同一行内，除非你显式修改元素的 display 属性），而内联元素则都会在一行内显示。&lt;/li&gt;
&lt;li&gt;块级元素可以设置 width、height 属性，而内联元素设置无效。&lt;/li&gt;
&lt;li&gt;块级元素的 width 默认为 100%，而内联元素则是根据其自身的内容或子元素来决定其宽度。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;最常见块级元素应该是 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 吧，内联元素有 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 等等，完整的元素列表可以谷歌一下。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;具体来说一下吧,&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.example&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们为 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 设置上面的样式，是有效果的，因为其是块级元素，而对 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 设置上面的样式是没用的。要想让 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 也可以改变宽高，可以通过设置 &lt;code&gt;display: block;&lt;/code&gt; 来达到效果。当 display 的值设为 block 时，元素将以块级形式呈现；当 display 值设为 inline 时，元素将以内联形式呈现。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://geekplux.com/categories/Web/"/>
    
      <category term="CSS" scheme="http://geekplux.com/categories/Web/CSS/"/>
    
    
      <category term="Web" scheme="http://geekplux.com/tags/Web/"/>
    
      <category term="笔记" scheme="http://geekplux.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Note" scheme="http://geekplux.com/tags/Note/"/>
    
      <category term="CSS" scheme="http://geekplux.com/tags/CSS/"/>
    
      <category term="总结" scheme="http://geekplux.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="Summary" scheme="http://geekplux.com/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>响应式设计简易指南（译）</title>
    <link href="http://geekplux.com/2014/04/06/simple_guide_to_responsive_design.html"/>
    <id>http://geekplux.com/2014/04/06/simple_guide_to_responsive_design.html</id>
    <published>2014-04-06T14:54:42.000Z</published>
    <updated>2015-01-04T11:59:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>####为什么要使用响应式设计？<br>我们想让我们的网站通过响应用户的行为、设备的屏幕大小和屏幕方向，从而在所有设备上都能用。</p>
<p>####一个碎片化的世界<br>截止2013年，有成千上万种不同的设备在浏览网页，所以我们不可能设计出适应所有屏幕大小的网页。相反，我们必须得采用一种更加流畅的方式去设计。</p>
<p>####移动优先<br>最近一个比较火的词叫移动优先。它的意思是，先为移动端设计样式，然后再根据需求去优化更大屏幕的样式。换句话说，假如你把移动端样式当成网站的默认样式，且以后不用去优化它，一步到位。那就更省事了！</p>
<blockquote>
<p>“假定默认使用一个灵活但简单的布局，你的确可以适配各种浏览器，但这还不算是完全做到了响应式布局。所以当我们谈论「移动优先」，实际上是在说「渐进增强」。” —Ethan Marcotte</p>
</blockquote>
<p>##用 Min-width 进行媒体查询（ Media Queries ）<br>现在来介绍一种特别的布局方式。 通过 min-width 来界定不同屏幕该如何布局。它能就近检测出不同设备的屏幕大小（即 media queries，可直译为媒体查询），比在样式表末尾或一个单独文件中处理更简单。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Small screens (default) */</span></div><div class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">100%</span>; &#125;</div><div class="line"></div><div class="line"><span class="comment">/* Medium screens (640px) */</span></div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">40rem</span>) &#123;</div><div class="line">  <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">112%</span>; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Large screens (1024px) */</span></div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">64rem</span>) &#123;</div><div class="line">  <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">120%</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>##步骤</p>
<p>####1. 不是所有浏览器生而平等<br>同一份 CSS，不同浏览器渲染出来的效果不一样。为了避免出现这种情况，你可以使用类似 <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="external">Normalize.css</a> 这种更好的 CSS 来帮助你实现跨浏览器显示。当然，你要把这份CSS放在你样式表最前面。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/normalize.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/grid.css"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>####2. 在 Viewport 里加 Meta 标签<br>在你 HTML 的 <code>head</code> 代码里添加 Meta 标签。它可以使 media queries 在不同设备上起作用</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>####3. CSS 盒模型<br>在 CSS 文件最顶端设置 box-sizing。运用 <code>*</code> 通用选择器使其应用到页面的每个元素上。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">-moz-box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">-webkit-box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####4. 创建容器<br>一个容器将包含页面所有标签，并控制页面最大宽度. 运用容器，让我们的响应式设计更进了一步！</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">48rem</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Your Content --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>####5. 创建列<br>在移动优先里，列默认均是 <code>block</code> 级别的（可以占满整行的宽度）。不需要额外的样式！</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Your Content --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>####6. 创建列宽<br>在大屏中，用 <code>float: left</code> 将列水平排列。然后运用 padding 设置相邻两列之间的间隙，忘掉传统的margin吧。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column half"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column half"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">40rem</span>) &#123;</div><div class="line">  <span class="selector-class">.column</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">1rem</span>;</div><div class="line">    <span class="attribute">padding-right</span>: <span class="number">1rem</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.column</span><span class="selector-class">.full</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; &#125;</div><div class="line">  <span class="selector-class">.column</span><span class="selector-class">.two-thirds</span> &#123; <span class="attribute">width</span>: <span class="number">66.7%</span>; &#125;</div><div class="line">  <span class="selector-class">.column</span><span class="selector-class">.half</span> &#123; <span class="attribute">width</span>: <span class="number">50%</span>; &#125;</div><div class="line">  <span class="selector-class">.column</span><span class="selector-class">.third</span> &#123; <span class="attribute">width</span>: <span class="number">33.3%</span>; &#125;</div><div class="line">  <span class="selector-class">.column</span><span class="selector-class">.fourth</span> &#123; <span class="attribute">width</span>: <span class="number">24.95%</span>; &#125;</div><div class="line">  <span class="selector-class">.column</span><span class="selector-class">.flow-opposite</span> &#123; <span class="attribute">float</span>: right; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####7. 创建行<br>列应该包裹在行内，以避免其他元素堆放在其旁边造成布局混乱。否则就会出现广为人知的 clearing 问题。出现之后可以使用由 <a href="http://nicolasgallagher.com/micro-clearfix-hack/" target="_blank" rel="external">Nicolas Gallagher</a> 发明的 <code>clearfix</code> 解决。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row clearfix"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column half"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column half"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row clearfix"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column half"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column half"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.clearfix:before,</div><div class="line">.clearfix:after &#123;</div><div class="line">  content: " ";</div><div class="line">  display: table;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.clearfix:after &#123;</div><div class="line">  clear: both;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.clearfix &#123;</div><div class="line">  *zoom: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="相对流（-Flow-Opposite-）"><a href="#相对流（-Flow-Opposite-）" class="headerlink" title="相对流（ Flow Opposite ）"></a>相对流（ Flow Opposite ）</h4><p>给你想让它在移动端优先显示，而在大屏幕中右侧显示的列，添加 <code>.flow-opposite</code> 类。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row clearfix"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column half flow-opposite"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column half"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">40rem</span>) &#123;</div><div class="line">  <span class="selector-class">.column</span><span class="selector-class">.flow-opposite</span> &#123; <span class="attribute">float</span>: right; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####延伸阅读</p>
<ul>
<li><a href="http://www.abookapart.com/products/mobile-first" target="_blank" rel="external">A Book Apart: Mobile First</a></li>
<li><a href="http://www.abookapart.com/products/responsive-web-design" target="_blank" rel="external">A Book Apart: Responsive Web Design</a></li>
<li><a href="http://blog.teamtreehouse.com/beginners-guide-to-responsive-web-design" target="_blank" rel="external">Beginner’s Guide to Responsive Web Design</a></li>
<li><a href="http://www.paulirish.com/2012/box-sizing-border-box-ftw/" target="_blank" rel="external">Box-sizing: Border-box FTW</a></li>
<li><a href="http://dev.tutsplus.com/articles/quick-tip-dont-forget-the-viewport-meta-tag--webdesign-5972" target="_blank" rel="external">Don’t Forget the Viewport Meta Tag</a></li>
<li><a href="http://bradfrostweb.com/blog/mobile/the-many-faces-of-mobile-first/" target="_blank" rel="external">The Many Faces of ‘Mobile First’</a></li>
<li><a href="http://fuseinteractive.ca/blog/understanding-humble-clearfix" target="_blank" rel="external">Understanding the Humble Clearfix</a></li>
</ul>
<p>####参考文献</p>
<ul>
<li><a href="http://opensignal.com/reports/fragmentation-2013/" target="_blank" rel="external">Android Fragmentation Visualized</a></li>
<li><a href="http://daneden.github.io/animate.css/" target="_blank" rel="external">Animate.css</a></li>
<li><a href="http://developer.mozilla.org/en-US/docs/Web/CSS/box_model" target="_blank" rel="external">Box Model</a></li>
<li><a href="http://developers.google.com/chrome-developer-tools/" target="_blank" rel="external">Chrome Developer Tools</a></li>
<li><a href="https://gist.github.com/aekaplan" target="_blank" rel="external">Code samples by GitHub Gist</a></li>
<li><a href="http://en.wikipedia.org/wiki/Internet_Explorer_box_model_bug" target="_blank" rel="external">Internet Explorer Box Model</a></li>
<li><a href="http://coding.smashingmagazine.com/2009/04/22/progressive-enhancement-what-it-is-and-how-to-use-it/" target="_blank" rel="external">Progressive Enhancement</a></li>
</ul>
<h2 id="（译文完）"><a href="#（译文完）" class="headerlink" title="（译文完）"></a>（译文完）</h2><p>这是我最近翻译的一篇我觉得非常不错的指南。</p>
<ul>
<li><a href="http://www.adamkaplan.me/grid" target="_blank" rel="external">原文地址</a></li>
<li><a href="http://geekplux.github.io/grid" target="_blank" rel="external">中文版地址</a></li>
<li><a href="https://github.com/aekaplan/grid" target="_blank" rel="external">原 Github 地址</a></li>
<li><a href="https://github.com/geekplux/grid" target="_blank" rel="external">中文版 Github 地址</a></li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####为什么要使用响应式设计？&lt;br&gt;我们想让我们的网站通过响应用户的行为、设备的屏幕大小和屏幕方向，从而在所有设备上都能用。&lt;/p&gt;
&lt;p&gt;####一个碎片化的世界&lt;br&gt;截止2013年，有成千上万种不同的设备在浏览网页，所以我们不可能设计出适应所有屏幕大小的网页。相反，我们必须得采用一种更加流畅的方式去设计。&lt;/p&gt;
&lt;p&gt;####移动优先&lt;br&gt;最近一个比较火的词叫移动优先。它的意思是，先为移动端设计样式，然后再根据需求去优化更大屏幕的样式。换句话说，假如你把移动端样式当成网站的默认样式，且以后不用去优化它，一步到位。那就更省事了！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“假定默认使用一个灵活但简单的布局，你的确可以适配各种浏览器，但这还不算是完全做到了响应式布局。所以当我们谈论「移动优先」，实际上是在说「渐进增强」。” —Ethan Marcotte&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##用 Min-width 进行媒体查询（ Media Queries ）&lt;br&gt;现在来介绍一种特别的布局方式。 通过 min-width 来界定不同屏幕该如何布局。它能就近检测出不同设备的屏幕大小（即 media queries，可直译为媒体查询），比在样式表末尾或一个单独文件中处理更简单。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Small screens (default) */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Medium screens (640px) */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; (min-width: &lt;span class=&quot;number&quot;&gt;40rem&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;112%&lt;/span&gt;; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Large screens (1024px) */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; (min-width: &lt;span class=&quot;number&quot;&gt;64rem&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;120%&lt;/span&gt;; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web" scheme="http://geekplux.com/categories/Web/"/>
    
    
      <category term="Guide" scheme="http://geekplux.com/tags/Guide/"/>
    
      <category term="入门" scheme="http://geekplux.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Web" scheme="http://geekplux.com/tags/Web/"/>
    
      <category term="译文" scheme="http://geekplux.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Translation" scheme="http://geekplux.com/tags/Translation/"/>
    
      <category term="Responsive Design" scheme="http://geekplux.com/tags/Responsive-Design/"/>
    
  </entry>
  
  <entry>
    <title>初识 TDD</title>
    <link href="http://geekplux.com/2014/03/21/understand_tdd.html"/>
    <id>http://geekplux.com/2014/03/21/understand_tdd.html</id>
    <published>2014-03-20T16:20:09.000Z</published>
    <updated>2015-01-04T12:01:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近团队进驻了 Innospace（一个创业孵化基地），感觉一切要走上正轨的节奏。每周 Innospace 会提供一些来自业内大牛的创业和技术方面的培训指导，活动也非常多。感谢我的实习团队，让我有机会可以学到更多的东西。今天的主题是 TDD（测试驱动开发），对我来说这个东西不仅是新鲜的，还是陌生的，所以我也是认真记了记，顺便整理成文。</p>
<h1 id="神马是-TDD"><a href="#神马是-TDD" class="headerlink" title="神马是 TDD"></a>神马是 TDD</h1><p>维基百科上是这样说的：测试驱动开发（Test-driven development）是极限编程中倡导的程序开发方法，以其倡导<strong>先写测试程序，然后编码实现其功能</strong>得名。</p>
<p>好吧，上面那段翻译的真是让人捉急，人家原文是这样的：</p>
<blockquote>
<p>Test-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle: first the developer writes an (initially failing) automated test case that defines a desired improvement or new function, then produces the minimum amount of code to pass that test, and finally refactors the new code to acceptable standards. </p>
</blockquote>
<p>看完英文应该比较好理解。通俗点就是：<strong>先写测试，再写只能让测试通过的代码，然后不停的循环这两个步骤，直到重构出满足需求的代码</strong>。以每个测试来推动整个开发的进行，这样有助于编写简洁和高质量的代码，并加速开发过程。</p>
<a id="more"></a>
<h1 id="TDD-流程"><a href="#TDD-流程" class="headerlink" title="TDD 流程"></a>TDD 流程</h1><p><img src="http://upload.wikimedia.org/wikipedia/en/9/9c/Test-driven_development.PNG" alt=""></p>
<ol>
<li>先写一个测试，覆盖的需求很少</li>
<li>检查是否运行失败</li>
<li>编写能通过这个测试的代码</li>
<li>运行该测试</li>
<li>如果测试通过，则写新的测试，覆盖更多需求；如果测试没有通过，则更改代码直到通过</li>
<li>重构代码，使其能通过新写的测试</li>
<li>重复第 5 步</li>
<li>重复第 6 步<br>……</li>
</ol>
<h1 id="一个好的-Test-Case-应有下列特点："><a href="#一个好的-Test-Case-应有下列特点：" class="headerlink" title="一个好的 Test Case 应有下列特点："></a>一个好的 Test Case 应有下列特点：</h1><ul>
<li>快    –天下武功，唯快不破</li>
<li>独立    –不依赖于其他的测试用例的输出结果</li>
<li>可读    –基本上别人一看你的代码就知道是在测试什么功能，都不用写注释</li>
<li>完整    –包括目的，输入，预期结果</li>
<li>可重复    –无论谁测试结果都一样，且可以根据之前的测试编写下一个测试</li>
<li>一个assert    –只有一个判断结果，准确、简洁</li>
</ul>
<p>要实现前两点，则测试用例就不能涉及到文件、数据库、网络、环境（第三方类库）等。</p>
<h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>TDD 作为一种敏捷开发方式，越来越为人所吹。毕竟敏捷开发越来越流行，所以 TDD 也是越来越被人吹捧。而且整个 TDD 开发过程看起来效果非常棒，尤其是在敏捷教练现场演示了一遍之后（果然例子理解起来永远比理论容易）。感觉是把大事化小，逐步解决。</p>
<p>不过，任何东西都有利有弊。比如，测试的范围就是个很麻烦的问题，怎么才能写出一个好的测试用例。既不会覆盖的需求太多，又不会覆盖的太少……</p>
<p>不管怎样，还是学到了东西，非常感谢两位敏捷教练。</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近团队进驻了 Innospace（一个创业孵化基地），感觉一切要走上正轨的节奏。每周 Innospace 会提供一些来自业内大牛的创业和技术方面的培训指导，活动也非常多。感谢我的实习团队，让我有机会可以学到更多的东西。今天的主题是 TDD（测试驱动开发），对我来说这个东西不仅是新鲜的，还是陌生的，所以我也是认真记了记，顺便整理成文。&lt;/p&gt;
&lt;h1 id=&quot;神马是-TDD&quot;&gt;&lt;a href=&quot;#神马是-TDD&quot; class=&quot;headerlink&quot; title=&quot;神马是 TDD&quot;&gt;&lt;/a&gt;神马是 TDD&lt;/h1&gt;&lt;p&gt;维基百科上是这样说的：测试驱动开发（Test-driven development）是极限编程中倡导的程序开发方法，以其倡导&lt;strong&gt;先写测试程序，然后编码实现其功能&lt;/strong&gt;得名。&lt;/p&gt;
&lt;p&gt;好吧，上面那段翻译的真是让人捉急，人家原文是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Test-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle: first the developer writes an (initially failing) automated test case that defines a desired improvement or new function, then produces the minimum amount of code to pass that test, and finally refactors the new code to acceptable standards. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看完英文应该比较好理解。通俗点就是：&lt;strong&gt;先写测试，再写只能让测试通过的代码，然后不停的循环这两个步骤，直到重构出满足需求的代码&lt;/strong&gt;。以每个测试来推动整个开发的进行，这样有助于编写简洁和高质量的代码，并加速开发过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Agile Development" scheme="http://geekplux.com/categories/Agile-Development/"/>
    
    
      <category term="笔记" scheme="http://geekplux.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Note" scheme="http://geekplux.com/tags/Note/"/>
    
      <category term="Agile Development" scheme="http://geekplux.com/tags/Agile-Development/"/>
    
  </entry>
  
  <entry>
    <title>Collapsing margins——合并的外边距</title>
    <link href="http://geekplux.com/2014/03/14/collapsing_margins.html"/>
    <id>http://geekplux.com/2014/03/14/collapsing_margins.html</id>
    <published>2014-03-14T13:10:19.000Z</published>
    <updated>2015-08-04T08:59:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在写 CSS 时遇到一个小问题，困扰了我好长时间，最后 Google 之，发现早有前人踩过此坑。为免以后再掉进坑，记下来比较好。</p>
<p>昨天遇到的问题是这样的。我设置了一对父子元素如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span>Parent</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"children"</span>&gt;</span>Children</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它们的样式如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">background-color</span>: yellow;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.children</span> &#123;</div><div class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.divider</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">    <span class="attribute">background-color</span>: black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>产生的效果如图所示：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CCollapsing%20margins%20%E5%90%88%E5%B9%B6%E7%9A%84%E5%A4%96%E8%BE%B9%E8%B7%9D%5CScreen%20Shot%202014-03-14%20at%209.13.00%20PM.png" alt=""></p>
<p>为什么分割线跑到了 Children 里面？这两个父子元素都设置了 <code>margin-bottom</code>，加起来应该是 30px，为什么现在成了 20px？种种疑问在我脑中盘旋。刚开始以为是万恶的 <code>position</code>，但是我把所有能想到的属性排列组合都设置了一遍，发现还是不行。果断 Google，才知道这个问题由来已久……</p>
<a id="more"></a>
<h1 id="collapsed-margin"><a href="#collapsed-margin" class="headerlink" title="collapsed margin"></a>collapsed margin</h1><p>关于collapsing-margin，有 <a href="http://www.w3.org/TR/CSS21/box.html#collapsing-margins" target="_blank" rel="external">W3C 的官方介绍</a>：</p>
<blockquote>
<p>In CSS, the adjoining margins of two or more boxes (which might or might not be siblings) can combine to form a single margin. Margins that combine this way are said to collapse, and the resulting combined margin is called a <strong>collapsed margin</strong>.</p>
</blockquote>
<p>在CSS中，<strong>两个或多个毗邻（父子元素或兄弟元素）的普通流中的块元素垂直方向上的 margin 会发生叠加</strong>。这种方式形成的外边距即可称为外边距叠加(collapsed margin)。</p>
<ul>
<li>何为毗邻：是指没有被非空内容、padding、border 或 clear 分隔开。</li>
<li>何为普通流：除浮动（ float ）、绝对定位（ absolute ）外的代码即为普通流。</li>
</ul>
<p>好吧，这下理解了，原来 <strong>挨着的、且没有任何东西分割的</strong> 两个普通元素会在垂直方向上合并 margin。我们可以想象出有 4 种情况会发生合并，看图比较直观（图来自网络）：</p>
<ul>
<li>兄弟元素</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CCollapsingct_css_margin_collapsing_example_1.gif" alt=""></p>
<ul>
<li>父子元素</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CCollapsingct_css_margin_collapsing_example_2.gif" alt=""></p>
<ul>
<li>空元素</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CCollapsingct_css_margin_collapsing_example_3.gif" alt=""></p>
<ul>
<li>以上三种混合</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CCollapsingct_css_margin_collapsing_example_4.gif" alt=""></p>
<p>到底怎么才算毗邻，其实<a href="http://www.w3.org/TR/CSS21/box.html#collapsing-margins" target="_blank" rel="external">官网</a>对于<strong>毗邻</strong>作了很详细的解释（<em>保证你看完会晕</em>）：</p>
<p>首先是一个<strong>大前提</strong>：元素之间没有被非空内容、padding、border 或 clear 分隔开。然后有下面几种情况算是毗邻：</p>
<blockquote>
<ul>
<li><p>top margin of a box and top margin of its first in-flow child</p>
<p>  一个元素的 margin-top 和它的第一个子元素的 margin-top</p>
</li>
<li><p>bottom margin of box and top margin of its next in-flow following sibling</p>
<p>  普通流中一个元素的 margtin-bottom 和它的紧邻的兄弟元素的的 margin-top</p>
</li>
<li><p>bottom margin of a last in-flow child and bottom margin of its parent if the parent has ‘auto’ computed height</p>
<p>  一个元素（ height 为 auto ）的 margin-bottom 和它的最后一个子元素的margin-bottom</p>
</li>
<li><p>top and bottom margins of a box that does not establish a new block formatting context and that has zero computed ‘min-height’, zero or ‘auto’ computed ‘height’, and no in-flow children</p>
<p>  一个没有创建 BFC、没有子元素、height 为0的元素自身的 margin-top 和 margin-bottom</p>
</li>
</ul>
</blockquote>
<p>不管你晕不晕，反正我晕了……</p>
<h1 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h1><p>避免外边距叠加，只要破坏它的 4 个必要条件（2个或多个、毗邻、垂直方向、普通流）中的一个即可。下面是<a href="http://www.w3.org/TR/CSS21/box.html#collapsing-margins" target="_blank" rel="external">官网</a>不构成外边距叠加的各种情况。</p>
<blockquote>
<ul>
<li>浮动元素和其他任何元素之间不发生外边距叠加 (包括和它的子元素).</li>
<li>创建了 BFC 的元素不会和它的子元素发生外边距叠加</li>
<li>绝对定位元素和其他任何元素之间不发生外边距叠加(包括和它的子元素).</li>
<li>inline-block 元素和其他任何元素之间不发生外边距叠加 (包括和它的子元素).</li>
<li>普通流中的块级元素的 margin-bottom 永远和它相邻的下一个块级元素的 margin-top 叠加（除非相邻的兄弟元素clear）</li>
<li>普通流中的块级元素（没有 border-top、没有 padding-top ）的 margin-top 和它的第一个普通流中的子元素（没有 clear ）发生 margin-top 叠加</li>
<li>普通流中的块级元素（ height 为 auto、min-height 为 0、没有 border-bottom、没有 padding-bottom ）和它的最后一个普通流中的子元素（没有自身发生 margin 叠加或 clear ）发生 margin-bottom 叠加</li>
<li>如果一个元素的 min-height 为 0、没有 border、没有 padding、高度为 0 或者 auto、不包含子元素，那么它自身的外边距会发生叠加</li>
</ul>
</blockquote>
<p>同样会看晕，总结下来，我们<strong>最好的办法是</strong>：</p>
<ul>
<li>为父元素设置 BFC 或 padding 或 border</li>
<li>兄弟元素间设置 float 或 inline-block 或 absolute</li>
<li>写结构的时候最好用一个方向，要不都 top 要不都 bottom</li>
</ul>
<p>整个问题解决下来，我感觉其实并没有那么复杂的东西却被文档表述的很复杂，也可能是我英语比较差。而且在开发过程中许多细节我认为没必要去抠它，只要遇到时能迅速定位出原因（我昨天遇到这个问题，第一时间就无法定位，不停换关键词去搜才慢慢明白，还是经验少啊），就可以依靠 Google 搜索出解决方案，这样可以保证开发效率。如果想深入了解，还是抽业余时间吧……下面的文章可供参考（如怎么计算 margin 的最终值）。网上的资源太丰富了，感谢这些前辈。</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/CSS/margin_collapsing" target="_blank" rel="external">外边距合并</a></li>
<li><a href="http://blog.csdn.net/yuanxin1113/article/details/8829170" target="_blank" rel="external">子元素的margin-top与父元素合并的问题</a></li>
<li><a href="http://css-tricks.com/almanac/properties/m/margin/" target="_blank" rel="external">Collapsing margins</a></li>
<li><a href="http://www.w3.org/TR/CSS21/box.html#collapsing-margins" target="_blank" rel="external">Box model</a></li>
<li><a href="http://www.w3help.org/zh-cn/kb/006/" target="_blank" rel="external">CSS 框模型( Box module )</a>  — 涉及如何计算合并后的 margin 值</li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天在写 CSS 时遇到一个小问题，困扰了我好长时间，最后 Google 之，发现早有前人踩过此坑。为免以后再掉进坑，记下来比较好。&lt;/p&gt;
&lt;p&gt;昨天遇到的问题是这样的。我设置了一对父子元素如下：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Parent&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;children&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Children&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;divider&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它们的样式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.parent&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin-bottom&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;80px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: yellow;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.children&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin-bottom&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;80px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.divider&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: black;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;产生的效果如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CCollapsing%20margins%20%E5%90%88%E5%B9%B6%E7%9A%84%E5%A4%96%E8%BE%B9%E8%B7%9D%5CScreen%20Shot%202014-03-14%20at%209.13.00%20PM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为什么分割线跑到了 Children 里面？这两个父子元素都设置了 &lt;code&gt;margin-bottom&lt;/code&gt;，加起来应该是 30px，为什么现在成了 20px？种种疑问在我脑中盘旋。刚开始以为是万恶的 &lt;code&gt;position&lt;/code&gt;，但是我把所有能想到的属性排列组合都设置了一遍，发现还是不行。果断 Google，才知道这个问题由来已久……&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://geekplux.com/categories/Web/"/>
    
      <category term="CSS" scheme="http://geekplux.com/categories/Web/CSS/"/>
    
    
      <category term="Web" scheme="http://geekplux.com/tags/Web/"/>
    
      <category term="笔记" scheme="http://geekplux.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Note" scheme="http://geekplux.com/tags/Note/"/>
    
      <category term="CSS" scheme="http://geekplux.com/tags/CSS/"/>
    
  </entry>
  
</feed>
