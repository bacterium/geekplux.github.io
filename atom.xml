<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[GeekPlux]]></title>
  <subtitle><![CDATA[知行合一]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.geekplux.com/"/>
  <updated>2015-09-24T11:40:28.000Z</updated>
  <id>http://www.geekplux.com/</id>
  
  <author>
    <name><![CDATA[GeekPlux]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何管理好自己的密码]]></title>
    <link href="http://www.geekplux.com/2015/09/24/password-management.html"/>
    <id>http://www.geekplux.com/2015/09/24/password-management.html</id>
    <published>2015-09-24T09:08:59.000Z</published>
    <updated>2015-09-24T11:40:28.000Z</updated>
    <content type="html"><![CDATA[<p>最近 Xcode Ghost 席卷三大平台，有预谋有组织有纪律。很多人看到这个消息纷纷修改常用密码，但我觉得密码管理其实功在平时，一个好的密码可以大幅提升你账户的安全系数。</p>
<p>而且，现在基本上每个网站都需要注册才能享用全部服务，我自己注册了上百个网站，意味者我有上百个账号密码需要记，用脑子记根本记不住（没办法，记忆力差）。后来我慢慢摸索出自己的一套策略用来管理密码，感觉实用且不算复杂。</p>
<h2 id="设计方法">设计方法</h2><ol>
<li>首先要对账号和密码进行<strong>分级分类</strong>。根据重要性、产品使用频率、产品应用场景来分。我自己分为五类：银行卡类、涉及支付类、社交账号、涉及数据存储类（各种云存储、云服务等）、其他。</li>
<li>银行卡类：<strong>单独</strong>设6位数字，每张银行卡都有各自的密码（规则自己定：比如前三位是自己想的，后三位是卡号的某几位）。</li>
<li>涉及支付类：<strong>单独</strong>设密码，方法参考5、6两点。</li>
<li>社交账号类、涉及数据存储类：<strong>着重对待</strong>，方法同样参考5、6两点。</li>
<li>密码设计方法：单独想出一句话，用这句话每个字的<strong>首字母</strong>构成密码最基本的部分。大小写和符号自己<strong>有规律</strong>地加。</li>
<li><strong>排列组合</strong>：密码太多记不住很正常。可以用两组（或多组）短语排列组合成整套密码。</li>
<li>银行、涉及支付类、重度使用产品均<strong>定期更换</strong>密码。一般密码位数不低于15位（不要以为15位很长）。</li>
</ol>
<a id="more"></a>
<h2 id="密码存储">密码存储</h2><p>那么密码设计出来，要存到哪里去呢？</p>
<ul>
<li><strong>全部用脑子记住</strong>。这种最安全也是最高效的方法，但是需要记忆力。</li>
<li>用 1Password, Lastpass 等密码管理软件记。我觉得这个适用于上文提到的「其他类」。</li>
<li>用文本笔记、表格记录。这个也没什么不可以，但是你一定要保存好这份文件，否则后果很严重。这里有个小技巧，你可以把密码全记录到一个 excel 文件中，然后把文件后缀改为 <code>.avi</code>，以此类推。</li>
</ul>
<p>以上就是我全部的方法了。之所以分成五类主要是因为涉及钱的账号密码，一旦泄密损失的是自己，而社交账号和数据泄密损失的是他人。</p>
<p>一般人可能会觉得自己的数据没什么价值，而且朋友们也都很机智。但是在特定情况下，你的数据会有可怕的功用。想象一下，一个人如果拥有你的绝大部分数据，同时又拥有你所有的人际关系。那么他就可以轻易的运用数据去模仿出你的样子，从而获取他人的信任。一旦获得对方的完全信任，注意，是完全信任，那对方就会沦为待宰的羔羊，任人摆布。</p>
<p>总之，密码和我们的生活息息相关，管理好自己的密码说不定还会有意外的收获：<br><a href="http://www.jianshu.com/p/a1220fd27e2f" target="_blank" rel="external">一个密码改变了我的人生</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近 Xcode Ghost 席卷三大平台，有预谋有组织有纪律。很多人看到这个消息纷纷修改常用密码，但我觉得密码管理其实功在平时，一个好的密码可以大幅提升你账户的安全系数。</p>
<p>而且，现在基本上每个网站都需要注册才能享用全部服务，我自己注册了上百个网站，意味者我有上百个账号密码需要记，用脑子记根本记不住（没办法，记忆力差）。后来我慢慢摸索出自己的一套策略用来管理密码，感觉实用且不算复杂。</p>
<h2 id="设计方法">设计方法</h2><ol>
<li>首先要对账号和密码进行<strong>分级分类</strong>。根据重要性、产品使用频率、产品应用场景来分。我自己分为五类：银行卡类、涉及支付类、社交账号、涉及数据存储类（各种云存储、云服务等）、其他。</li>
<li>银行卡类：<strong>单独</strong>设6位数字，每张银行卡都有各自的密码（规则自己定：比如前三位是自己想的，后三位是卡号的某几位）。</li>
<li>涉及支付类：<strong>单独</strong>设密码，方法参考5、6两点。</li>
<li>社交账号类、涉及数据存储类：<strong>着重对待</strong>，方法同样参考5、6两点。</li>
<li>密码设计方法：单独想出一句话，用这句话每个字的<strong>首字母</strong>构成密码最基本的部分。大小写和符号自己<strong>有规律</strong>地加。</li>
<li><strong>排列组合</strong>：密码太多记不住很正常。可以用两组（或多组）短语排列组合成整套密码。</li>
<li>银行、涉及支付类、重度使用产品均<strong>定期更换</strong>密码。一般密码位数不低于15位（不要以为15位很长）。</li>
</ol>]]>
    
    </summary>
    
      <category term="Tool" scheme="http://www.geekplux.com/tags/Tool/"/>
    
      <category term="工具" scheme="http://www.geekplux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="生活" scheme="http://www.geekplux.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="Life" scheme="http://www.geekplux.com/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Backbone View 之间通信的三种方式]]></title>
    <link href="http://www.geekplux.com/2015/07/04/communicating-between-views-in-backbone.html"/>
    <id>http://www.geekplux.com/2015/07/04/communicating-between-views-in-backbone.html</id>
    <published>2015-07-04T12:49:33.000Z</published>
    <updated>2015-07-04T13:52:50.000Z</updated>
    <content type="html"><![CDATA[<p>掌握一个 MVC 框架，最关键的一节就是掌握如何在各个 View 之间通信。之前用 Angular 时，觉得基于事件的通信方式 ($on, $emit, $boardcast) 或者 基于 service 的方式都非常好用。转战 Backbone 之后，由于对 Backbone 的事件机制理解不够且使用非常灵活，一直没找到一个好的通信方式。直到看见这篇文章，作者通过一个简单的例子，层层深入，把 Backbone View 之间通信的三种方式讲的清晰明了。译文如下（已拿到授权）：</p>
<hr>
<p>我正在开发的这个网页主要有两部分，分别是 document 和 sidebar。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/backbone-application.png" alt="Backbone Application"></p>
<p>如上图所示，我设立了三个视图 (view) :</p>
<p><code>ApplicationView</code> - 作为最外层视图来包含下级视图<br><code>DocumentView</code> - 展示正在编辑或浏览的内容<br><code>SidebarView</code> - 展示一些和 document 相关的信息</p>
<p><code>DocumentView</code> 和 <code>SidebarView</code> 作为 <code>ApplicationView</code> 的子视图，所以整体的视图结构如下图所示：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/backbone-view-structure.png" alt="Backbone View Structure"></p>
<p>用户在任意一个子视图进行操作，另一个子视图都需要随之变化。但由于两个子视图之间并不能直接通知对方（也就是说，它们的作用域没有直接联系，不像父视图，可以包含它所有子视图的作用域），所以，我需要一个事件机制。</p>
<p>在我谷歌和参考其他人的方法之后，我总结出了如下三种不同的通信方式。</p>
<a id="more"></a>
<h3 id="1-_通过父视图传递事件">1. 通过父视图传递事件</h3><p>我通过父视图 (<code>ApplicationView</code>) 来为它的两个子视图传递事件。因为父视图包含它所有子视图的作用域，因此用它作为事件传递的媒介最好不过。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/backbone-view-event-relay.png" alt="Backbone View Event Relay"></p>
<p>JavaScript 代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> ApplicationView = Backbone.View.extend(&#123;</span><br><span class="line"></span><br><span class="line">  initialize : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.documentView = <span class="keyword">new</span> DocumentView(&#123;parent:<span class="keyword">this</span>&#125;);</span><br><span class="line">    <span class="keyword">this</span>.sidebarView = <span class="keyword">new</span> SidebarView(&#123;parent:<span class="keyword">this</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.documentView.on(<span class="string">'edit'</span>, <span class="keyword">this</span>.documentEdited, <span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  documentEdited : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// do some stuff</span></span><br><span class="line">    <span class="keyword">this</span>.sidebarView.trigger(<span class="string">'documentEdit'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DocumentView = Backbone.View.extend(&#123;</span><br><span class="line"></span><br><span class="line">  onEdit : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.trigger(<span class="string">'edit'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> SidebarView = Backbone.View.extend(&#123;</span><br><span class="line"></span><br><span class="line">  initialize : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.on(<span class="string">'documentEdit'</span>, <span class="keyword">this</span>.onDocumentEdit, <span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onDocumentEdit : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// react to document edit.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>但是，这种方法并不高效。因为我需要在 <code>ApplicationView</code> 中添加一个额外的事件处理函数 <code>documentEdited()</code> 。如果子视图有一堆事件传过来，则在父视图中会不断触发事件处理函数，导致它不堪重负。</p>
<p>那么来看看第二种方法。</p>
<h3 id="2-_通过_EventBus_在视图间通信">2. 通过 EventBus 在视图间通信</h3><p>我通过继承 <strong>Backbone.Events</strong> 来创建一个全局对象 <code>EventBus</code>。把它注入到各个子视图中，用来广播事件。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/backbone-views-event-bus.png" alt="Backbone Views Event Bus"></p>
<p>JavaScript 代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> ApplicationView = Backbone.View.extend(&#123;</span><br><span class="line"></span><br><span class="line">  initialize : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.eventBus = _.extend(&#123;&#125;, Backbone.Events);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.documentView = <span class="keyword">new</span> DocumentView(&#123;</span><br><span class="line">      eventBus : <span class="keyword">this</span>.eventBus</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.sidebarView = <span class="keyword">new</span> SidebarView(&#123;</span><br><span class="line">      eventBus : <span class="keyword">this</span>.eventBus</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DocumentView = Backbone.View.extend(&#123;</span><br><span class="line"></span><br><span class="line">  initialize : <span class="function"><span class="keyword">function</span><span class="params">(options)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.eventBus = options.eventBus;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onEdit : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.eventBus.trigger(<span class="string">'documentEdit'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> SidebarView = Backbone.View.extend(&#123;</span><br><span class="line"></span><br><span class="line">  initialize : <span class="function"><span class="keyword">function</span><span class="params">(options)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.eventBus = options.eventBus;</span><br><span class="line">    <span class="keyword">this</span>.eventBus.on(<span class="string">'documentEdit'</span>, <span class="keyword">this</span>.onDocumentEdit, <span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onDocumentEdit : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// react to document edit.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在这个方法中，我把 <code>EventBus</code> 作为一个全局对象用来注册事件。如果我想在各个视图之间通信，只需要在视图中注入 <code>EventBus</code>，就可以通过它方便地触发或监听事件了。</p>
<p><strong>注意</strong>：如果你不想要创建全局对象，你仍然可以创建模块 (module) 或视图 (view) 级别的 <code>EventBus</code> 用来通信。</p>
<p>这个方法已经明显优于第一种方法了。但是需要我们手动的在子视图中引入 <code>EventBus</code>，说明还有可以改进的空间，那么，来看看第三种方法。</p>
<h3 id="3-_直接用_Backbone_作为事件注册机">3. 直接用 Backbone 作为事件注册机</h3><p>在第二种方法中，我创建了一个单独的 <code>EventBus</code>，继承自 <code>Backbone.Events</code>。但最近我悟到 <code>Backbone</code> 对象本身就是一个混合了 <code>Events</code> 的对象，所以我直接用 <code>Backbone</code> 广播事件，就无需单另创建的 <code>EventBus</code> 了。</p>
<p>而且 Backbone 对象可以直接调用，这样我就不必在每个子视图中手动注入它了。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/backbone-views-backbone-event-bus.png" alt="Backbone as EventBus"></p>
<p>JavaScript 代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ApplicationView = Backbone.View.extend(&#123;</span><br><span class="line"></span><br><span class="line">  initialize : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.documentView = <span class="keyword">new</span> DocumentView();</span><br><span class="line">    <span class="keyword">this</span>.sidebarView = <span class="keyword">new</span> SidebarView();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DocumentView = Backbone.View.extend(&#123;</span><br><span class="line"></span><br><span class="line">  onEdit : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Backbone.trigger(<span class="string">'documentEdit'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> SidebarView = Backbone.View.extend(&#123;</span><br><span class="line"></span><br><span class="line">  initialize : <span class="function"><span class="keyword">function</span><span class="params">(options)</span></span>&#123;</span><br><span class="line">    Backbone.on(<span class="string">'documentEdit'</span>, <span class="keyword">this</span>.onDocumentEdit, <span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onDocumentEdit : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// react to document edit.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="总结">总结</h3><p>我最终在我的项目中使用了第三种方法。而且在我看来，虽然它直接依赖了全局的 <code>Backbone</code> 对象，但是用起来却异常简洁。</p>
<p>如果有比这更好的方法，欢迎分享交流。</p>
<p>（译文完）</p>
<hr>
<p><strong>原文地址</strong>：<a href="http://veerasundar.com/blog/2013/04/communicating-between-views-in-backbone/" target="_blank" rel="external">Communicating between views in Backbone</a><br><strong>译文地址</strong>：<a href="http://www.geekplux.com/2015/07/04/communicating-between-views-in-backbone.html" target="_blank" rel="external">Backbone View 之间通信的三种方式</a></p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>掌握一个 MVC 框架，最关键的一节就是掌握如何在各个 View 之间通信。之前用 Angular 时，觉得基于事件的通信方式 ($on, $emit, $boardcast) 或者 基于 service 的方式都非常好用。转战 Backbone 之后，由于对 Backbone 的事件机制理解不够且使用非常灵活，一直没找到一个好的通信方式。直到看见这篇文章，作者通过一个简单的例子，层层深入，把 Backbone View 之间通信的三种方式讲的清晰明了。译文如下（已拿到授权）：</p>
<hr>
<p>我正在开发的这个网页主要有两部分，分别是 document 和 sidebar。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/backbone-application.png" alt="Backbone Application"></p>
<p>如上图所示，我设立了三个视图 (view) :</p>
<p><code>ApplicationView</code> - 作为最外层视图来包含下级视图<br><code>DocumentView</code> - 展示正在编辑或浏览的内容<br><code>SidebarView</code> - 展示一些和 document 相关的信息</p>
<p><code>DocumentView</code> 和 <code>SidebarView</code> 作为 <code>ApplicationView</code> 的子视图，所以整体的视图结构如下图所示：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/backbone-view-structure.png" alt="Backbone View Structure"></p>
<p>用户在任意一个子视图进行操作，另一个子视图都需要随之变化。但由于两个子视图之间并不能直接通知对方（也就是说，它们的作用域没有直接联系，不像父视图，可以包含它所有子视图的作用域），所以，我需要一个事件机制。</p>
<p>在我谷歌和参考其他人的方法之后，我总结出了如下三种不同的通信方式。</p>]]>
    
    </summary>
    
      <category term="Backbone" scheme="http://www.geekplux.com/tags/Backbone/"/>
    
      <category term="Translation" scheme="http://www.geekplux.com/tags/Translation/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/tags/Web/"/>
    
      <category term="译文" scheme="http://www.geekplux.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/categories/Web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vim - 适合自己的，才是最好的]]></title>
    <link href="http://www.geekplux.com/2015/06/06/vim-those-fit-yourself-are-the-best.html"/>
    <id>http://www.geekplux.com/2015/06/06/vim-those-fit-yourself-are-the-best.html</id>
    <published>2015-06-06T12:28:21.000Z</published>
    <updated>2015-06-06T12:59:55.000Z</updated>
    <content type="html"><![CDATA[<p>Vim 被称为编辑器之神，是我用过之后才体会到的，用之前实在不敢对它做出什么评价。在大学时代，Vim 的大名就已如雷贯耳，但由于它陡峭的学习曲线，一直望而却步。等真正开始学习之后，发现并没有想象中的复杂，也没有所谓的瓶颈，只要在实际写代码中强迫自己使用就可以了，无形中就会形成习惯。最初的不适，换来的是效率的飞升。这和我当初学习<a href="http://www.geekplux.com/2014/07/06/learn_shuangpin.html" target="_blank" rel="external">双拼</a>的感觉一样。下图是我的 Vim 界面：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/vim.png" alt="我的 Vim 界面"></p>
<h2 id="学习方式">学习方式</h2><p>我一开始也是看了很多教程，这里我就不说具体的学习方法了，因为 Google 上一搜一大堆。</p>
<p>我只想谈一点：很多「过来人」告诫新手，一开始使用 Vim 一定不能使用插件，<strong>要从最纯净的 Vim 开始练习</strong>。他们认为一上手就使用别人的配置，很容易被别人影响，不能领会到自己配置 Vim，这种从无到有的感觉。虽然我也很喜欢折腾的感觉，但这对于学习、入门一个工具来说有点<strong>南辕北辙</strong>，我们学习一个工具就是为了用好它，或者<strong>用它来为我们服务</strong>。为什么要我们去适应它呢？也许这不符合 Vim 的哲学，但是我觉得：</p>
<ul>
<li>Vim 存在这么多年，已经有很多优秀的 Vim 配置（比如：<a href="https://github.com/spf13/spf13-vim" target="_blank" rel="external">spf13-vim</a>），可以为我们节省很多折腾的时间。不过如果你非常喜欢折（zuo）腾（si），那也可以从头开始。</li>
<li>对于新手来说，自己的配置总是很不成熟，到头来还是得参考一些高手的配置。索性一开始用他们的，慢慢删改。</li>
<li>从纯净版开始你会觉得很枯燥，Vim 远没别人口中、视频中所述的酷炫，效率不升反降。这很容易丧失进阶的兴趣。</li>
<li>天下武功，唯快不破，这个时代求快。我不否认先夯实基础，再层层递进的学习方式，但针对不同的学习对象，不同的环境背景，我们还是应该采取最快、最有效的学习方式。</li>
</ul>
<a id="more"></a>
<p>如果你学习 Vim 是为了体验学习的新鲜感，或者业余玩味，请忽略我上面的话。但如果你的最终目的是为了在实际中用到它，提升我们的工作效率，那你不妨和我一样，直接拉别人的配置下来，在 Shell 里输入 Vim 启动，开始写代码！</p>
<p>当时我找到了 <a href="https://github.com/wklken/k-vim" target="_blank" rel="external">k-vim</a>，按照他的安装步骤，很简单就把 Vim 配置好了，启动 Vim，发现界面也很漂亮，嗯，这就是我要的效果。接着，我打开自己那两天正在写的项目，通过仅会的四个快捷键 <strong>HJKL</strong> 移动光标来查看文件。然后我仔细阅读了 <a href="https://github.com/wklken/k-vim" target="_blank" rel="external">k-vim</a> 的 README 文件，把它提到的几个快捷键试了试，感觉很不错。接下来的几天，它的 README 网页我一直开着，遇到想要的快捷键一搜就搞定，虽然写代码的效率确实下降了很多，但对编辑器的使用越来越纯熟。一周之后我已经习惯用 Vim 来编程了。</p>
<p>接下来开始进一步研究 Vim，理解 Vim  的<strong>三种模式</strong>（正常模式、命令模式、视图模式），然后掌握如何配置<strong>插件</strong>和<strong>快捷键</strong>就OK了。最关键一点就是要实战，强迫自己所有的操作只用键盘，强迫只用 Vim 作编辑器。</p>
<h2 id="插件与快捷键">插件与快捷键</h2><p>Vim 的插件可以通过 <a href="https://github.com/gmarik/Vundle.vim" target="_blank" rel="external">Vundle</a> 来管理。（据说 <a href="https://github.com/junegunn/vim-plug" target="_blank" rel="external">vim-plug</a> 也挺好用）</p>
<p>只需两步：</p>
<ul>
<li>在 <code>vimrc.bundles</code> 文件中配置你想要的插件</li>
<li>在 Vim 的命令模式中输入<code>:BundleInstall</code></li>
</ul>
<p>其他的命令有：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:BundleUpdate    //&#26356;&#26032;&#25554;&#20214;&#10;:BundleClean     //&#21024;&#38500;&#25554;&#20214;</span><br></pre></td></tr></table></figure>
<p>个人觉得必备的插件：</p>
<ul>
<li>syntastic 多语言语法检查</li>
<li>YouCompleteMe 代码自动补全</li>
<li>ctrlp.vim 文件搜索，类似 Sublime Text 里面的 Cmd + P</li>
<li>vim-airline 状态栏增强</li>
<li>nerdtree目录树</li>
<li>vim-ctrlspace tab/buffer导航增强</li>
</ul>
<p>而快捷键的学习方法，就是用到的时候去 Google，多用几次就记住了。如果它自带的快捷键用着不舒服，你完全可以自己重设，Vim 就是自由，不必拘泥条条框框。</p>
<h2 id="哲学">哲学</h2><p>非常推荐阅读 Stack Overflow 上的这篇回答：</p>
<p><a href="http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim" target="_blank" rel="external">What is your most productive shortcut with Vim?</a></p>
<p>这篇真正阐述了 Vim 作者当初设计 Vim 快捷键时的哲学，看懂这篇对 Vim 快捷键的掌握会更上一层。</p>
<h2 id="感悟">感悟</h2><p>在学习 Vim、使用 Vim 的过程中，我最大的感悟就是<strong>「适合自己的，才是最好的」</strong>。</p>
<p>很多插件看起来很酷炫，快捷键几下就能实现很繁杂的操作，但是你不一定会有使用这个插件的需求，或者即使用也用的不多。有人总喜欢拿 IDE 和 Vim 比，我觉得这根本没有比较的必要，你两个都用也没什么问题。大的项目，复杂的文件结构和引用，你不用 IDE 而用 Vim，是浪费时间。而且一般 IDE 都提供了 Vim 模式，你仍可以在 IDE 中继续击键如飞。</p>
<p>用 Vim 体验的是一种<strong>轻便、自由、可塑</strong>的感觉。你可以根据自己的需求来培养 Vim，这就像恋（gao）爱（ji）一样是两个人互相适应的过程。互相习惯才能把效率最大化。</p>
<hr>
<h3 id="推荐链接">推荐链接</h3><ul>
<li><a href="http://vim-adventures.com/" target="_blank" rel="external">Vim Adventure</a>  Vim 小游戏</li>
<li><a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/" target="_blank" rel="external">Learn Vim Progressively</a> 中文版：<a href="http://coolshell.cn/articles/5426.html" target="_blank" rel="external">简明 Vim 练级攻略</a></li>
<li><a href="http://learnvimscriptthehardway.stevelosh.com/" target="_blank" rel="external">Learn Vimscript the Hard Way</a> 中文版：<a href="http://learnvimscriptthehardway.onefloweroneworld.com/" target="_blank" rel="external">笨方法学Vimscript</a></li>
<li><a href="http://www.openvim.com/tutorial.html" target="_blank" rel="external">交互式学习 Vim</a></li>
<li><a href="http://vimawesome.com/" target="_blank" rel="external">Vim Awesome</a> Awesome Vim plugins from across the universe</li>
<li><a href="http://cenalulu.github.io/linux/all-vim-cheatsheat/" target="_blank" rel="external">史上最全Vim快捷键键位图 — 入门到进阶</a></li>
<li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="external">所需即所获：像 IDE 一样使用 vim</a></li>
<li><a href="http://yuez.me/jiang-ni-de-vim-da-zao-cheng-qing-qiao-qiang-da-de-ide/" target="_blank" rel="external">将你的Vim 打造成轻巧强大的IDE</a></li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Vim 被称为编辑器之神，是我用过之后才体会到的，用之前实在不敢对它做出什么评价。在大学时代，Vim 的大名就已如雷贯耳，但由于它陡峭的学习曲线，一直望而却步。等真正开始学习之后，发现并没有想象中的复杂，也没有所谓的瓶颈，只要在实际写代码中强迫自己使用就可以了，无形中就会形成习惯。最初的不适，换来的是效率的飞升。这和我当初学习<a href="http://www.geekplux.com/2014/07/06/learn_shuangpin.html">双拼</a>的感觉一样。下图是我的 Vim 界面：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/vim.png" alt="我的 Vim 界面"></p>
<h2 id="学习方式">学习方式</h2><p>我一开始也是看了很多教程，这里我就不说具体的学习方法了，因为 Google 上一搜一大堆。</p>
<p>我只想谈一点：很多「过来人」告诫新手，一开始使用 Vim 一定不能使用插件，<strong>要从最纯净的 Vim 开始练习</strong>。他们认为一上手就使用别人的配置，很容易被别人影响，不能领会到自己配置 Vim，这种从无到有的感觉。虽然我也很喜欢折腾的感觉，但这对于学习、入门一个工具来说有点<strong>南辕北辙</strong>，我们学习一个工具就是为了用好它，或者<strong>用它来为我们服务</strong>。为什么要我们去适应它呢？也许这不符合 Vim 的哲学，但是我觉得：</p>
<ul>
<li>Vim 存在这么多年，已经有很多优秀的 Vim 配置（比如：<a href="https://github.com/spf13/spf13-vim">spf13-vim</a>），可以为我们节省很多折腾的时间。不过如果你非常喜欢折（zuo）腾（si），那也可以从头开始。</li>
<li>对于新手来说，自己的配置总是很不成熟，到头来还是得参考一些高手的配置。索性一开始用他们的，慢慢删改。</li>
<li>从纯净版开始你会觉得很枯燥，Vim 远没别人口中、视频中所述的酷炫，效率不升反降。这很容易丧失进阶的兴趣。</li>
<li>天下武功，唯快不破，这个时代求快。我不否认先夯实基础，再层层递进的学习方式，但针对不同的学习对象，不同的环境背景，我们还是应该采取最快、最有效的学习方式。</li>
</ul>]]>
    
    </summary>
    
      <category term="IDE" scheme="http://www.geekplux.com/tags/IDE/"/>
    
      <category term="Tool" scheme="http://www.geekplux.com/tags/Tool/"/>
    
      <category term="Vim" scheme="http://www.geekplux.com/tags/Vim/"/>
    
      <category term="工具" scheme="http://www.geekplux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Tool" scheme="http://www.geekplux.com/categories/Tool/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[轻松玩转 Ukulele]]></title>
    <link href="http://www.geekplux.com/2015/01/05/play-ukulele.html"/>
    <id>http://www.geekplux.com/2015/01/05/play-ukulele.html</id>
    <published>2015-01-05T15:54:00.000Z</published>
    <updated>2015-08-04T09:00:13.000Z</updated>
    <content type="html"><![CDATA[<p>每个人都幻想过自己拥有一身的艺术细菌，可以像各种钢琴王子一样在琴键上挥洒自如。但是由于某些不可抗力，从小到大一直没学什么乐器，或者是学了也没坚持下来。最尴尬的是选了一种鸡肋乐器，学有所成却不接地气，比如二胡（我真不是黑，因为我也学过那么两年），总不能在同学聚会激战正酣的时候拿出来即兴演奏吧……还是老老实实戴个圆框墨镜到地铁口来一曲二泉映月……</p>
<p>人生苦短，为了圆我们的音（zhuang）乐（bi）梦，Ukulele 可以说是应运而生。本文将从 what、why、how 三方面介绍如何快速玩转 Ukulele，争取把我在学习过程中遇到的坑都写出来供大家参考。</p>
<h2 id="What-什么是_Ukulele">What-什么是 Ukulele</h2><p>Ukulele 翻译为夏威夷吉他、四弦琴，音译为乌克丽丽、悠可力力、尤克里里、优可乐乐，简称 Uku、Uke……没错，这么多名字都是在说一个玩意。不要纠结到底中文叫那个名字合适，你直接用 Ukulele 一词以蔽之。</p>
<p>它是一种弦乐器，正常情况下长这样：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/1.jpg" alt="正常的 Ukulele（图片来自网络）"></p>
<p>不正常情况下长这样：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/2.jpeg" alt="不正常的 Ukulele（图片来自网络）"></p>
<p>还有各种奇形怪状的，都非常可爱。从图上可以看出它整体和吉他非常类似，唯一的不同是少了两根弦，这就大大降低了学习成本！而且它音色清脆入耳，弹起来节奏活泼畅快，可以说是居家旅行必备之良品。如果对它的起源或背景感兴趣，可以去<a href="http://baike.baidu.com/subview/3963326/10243259.htm" target="_blank" rel="external">百度百科-乌克丽丽</a>了解一下。</p>
<a id="more"></a>
<h2 id="Why-为什么要玩_Ukulele">Why-为什么要玩 Ukulele</h2><ul>
<li><p><strong>无入门门坎，学习成本极低</strong><br>只要10分钟，就可以弹出一首完整的曲子。如果你会吉他，更是拿起来就能弹。比吉他少了两根弦，学习成本直线下降，而其演奏效果却还和吉他差不多。不需要学习乐理，也不用系统学习，想唱啥歌，找个谱子开练即可。很多小正太小萝莉都能学得会，你当然不在话下。俗话说欲速则不达，Ukulele 却是真心可以速成的。</p>
</li>
<li><p><strong>对手指友好</strong><br>绝大多数 Ukulele 的弦是尼龙弦，按起来不疼，对手指特别友好。不像吉他那么难按，弹十分钟手指就疼的受不了。当然，等你练个一星期，就会发现指头上多了一层茧，怎么按都不会疼。</p>
</li>
<li><p><strong>小巧便携，各种场合都能来一手</strong><br>小巧也是针对吉他来说的，一个胳膊就能夹住，背个小包也根本不费事。同学聚餐来一首调动气氛；草坪边上来一曲深情款款；公司年会来一首技惊四座；调试代码的间隙也可以来一首陶冶情操；马路边，地铁口，放个碗……</p>
</li>
<li><p><strong>小清新，高逼格</strong><br>基本上文艺青年看见 Ukulele 就走不动道了。妹子们弹是这样的：<br><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/3.jpg" alt="妹纸弹 Uku（图片来自网络）"><br>也可能是这样的：<br><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/4.jpg" alt="Taylor Swift 弹唱会弹 Uku（图片来自网络）"><br>男青年的样子是这样的：<br><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/5.jpg" alt="大叔弹 Uku（图片来自网络）"><br>哈哈，是不是如沐春风！可装逼可接地气，更是勾搭文（wu）艺（zhi）女青年的神器。</p>
</li>
</ul>
<ul>
<li><strong>有趣！好玩！</strong><br>喜欢一件事物，必然是因为它有趣啊！我在认识 Ukulele 之后才知道它多有趣，不止是弹情歌，比如下面这位大牛（现在他已经长大了！）。别问我他弹的什么，你听了前三秒就知道！</li>
</ul>
<div class="video-container"><iframe src="http://player.youku.com/embed/XMjk2OTI3MjEy" frameborder="0" allowfullscreen></iframe></div>
<h2 id="How-怎么快速玩转_Ukulele">How-怎么快速玩转 Ukulele</h2><p>我当初是在上司的勾引下，入了这个坑的。把玩了他的琴两天，实在是爱不释手，就迫不及待地也入了一把，从此人生又多了一些欢乐，哈哈。以下从我的经历来说说怎么快速上手：</p>
<h3 id="1-你要有把琴">1.你要有把琴</h3><p>市面上的 Ukulele 可以分为三种：高音（Soprano）、中音（Concert）、次中音（Tenor），分别简称 S 型、C 型、T 型。其实还有一种 B 型，但是由于音太低，新手不宜考虑。</p>
<p>S 型最小，琴身长 21 寸，音色最为清亮。可以给小盆友买用来玩耍，个子小的萌妹子也可以用。不过由于它比较小，所以适合弹唱，而不适合指弹（弹唱就是边弹边唱，指弹就是只弹不唱）。</p>
<p>C 型适中，琴身长 23寸，指弹和弹唱都可以，女生非常适合这款，男生你得考虑下身高，个子高而用这把显得不是很协调。</p>
<p>T 型最长，琴身长26寸，音色稍低，大部分男生选这款。</p>
<p>我觉得新手可以只考虑型号就好了，剩下的共鸣、音准、琴弦、琴身材质等可以等进阶的时候再买。至于价钱，某宝上价格参差不齐，不过我建议<strong>买个在你承受范围内偏贵那么一小点的</strong>，这样你一方面会好好珍惜它，多练习，另一方面音色好弹出来的效果就好，容易有成就感，有成就感就会坚持下来。</p>
<h3 id="2-你得学会调音">2.你得学会调音</h3><p>调音就是把每根弦的音调（diao）调（tiao）到它该发的调（diao）上。由于 Ukulele 的弦是尼龙弦而不是金属弦，所以弹着弹着容易音不准，要经常调校，有完美强迫症的人每次弹之前估计都得调一下。</p>
<p>我是在某宝入的琴，店家送了调音器。把调音器夹在琴头上，然后依次波动每个琴弦，观察调音器上的音阶字母对应正确且显示为绿色即可。看这个视频一下就懂了：</p>
<div class="video-container"><iframe src="http://player.youku.com/embed/XNDQ1NTgxNjg4" frameborder="0" allowfullscreen></iframe></div>
<p>是不是非常简单∩_∩</p>
<h3 id="3-姿势">3.姿势</h3><p>Ukulele 小巧可爱，怎么抱着都能弹，你可以坐着弹，躺着弹，站着弹。<strong>但是越到后面越觉得姿势非常重要</strong>。基本的持琴姿势是这样的：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/9.png" alt="持琴方法（图片来自《最易上手尤克里里弹唱超精选》）"></p>
<p>用右肘的内侧来夹住琴，让它在弹奏过程中不要乱跑，但又不能让你的右手失去灵活，总之这里需要一个巧劲，慢慢摸索。<br>左手也分两种，一种是用虎口托住琴，一种是虎口那悬空。如图：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/10.png" alt="左手姿势（图片来自《最易上手尤克里里弹唱超精选》）"></p>
<p>以上左右手的姿势中的要点都是我的亲身体会，其他的地方，如按弦方法，是指肚按弦还是指尖按弦（推荐指尖），我觉得问题不大，怎么舒服怎么来。</p>
<p>按弦的样子可以参考这张：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/13.jpg" alt="按弦姿势（图片来自网络）"></p>
<p><strong>但我在练习过程中还遇到了一个大坑：</strong>那就是用拇指拨4弦或3弦时，总会碰到另一根。困扰了我很久，直到看到网上的这张图片：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/11.jpg" alt="错误的右手姿势（图片来自网络）"></p>
<p>虽然这是吉他的右手，但对 Uku 同样适用。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/12.jpg" alt="正确的右手姿势（图片来自网络）"></p>
<p>所以<strong>一开始最好力求姿势准确</strong>，可以避免后来的很多坑。为什么姿势很重要可以看看知乎上<a href="http://www.zhihu.com/question/23935947/answer/26247357" target="_blank" rel="external">如何快速地自学 Ukulele？</a>（这个问题也是我当初提的）。</p>
<h3 id="4-无敌四和弦">4.无敌四和弦</h3><p>和弦是啥？一般人玩一个乐器，第一句肯定问：这个哆在哪？ 没错，和弦就可以看作是哆唻咪等音符的组合，左手按住和弦，右手拨琴弦就会发出悦耳的声音了。我们的目的是快速上手，快速演奏出想唱的歌，所以这些细节没必要一开始搞懂，等学到瓶颈再来深入。</p>
<p><strong>C  Am  F  G7</strong> 这四个和弦被称为无敌四和弦。之所以无敌，是因为掌握了它们就可以演奏很多歌曲，不信你去搜关键字「Ukulele 无敌四和弦」，就可以看到很多曲谱。其指法如下：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/7.jpg" alt="无敌四和弦（图片来自网络）"></p>
<p>另外 <strong>G</strong> 和弦也是经常用，它和 <strong>G7</strong> 听起来差不多，所以前期如果按 <strong>G</strong> 吃力，就先用 <strong>G7</strong> 代替。我当初按 <strong>G</strong> 无名指怎么也够不着T_T，练了好久才习惯自如……总之，先用左手把这四个和弦练熟。</p>
<p>接下来可以看一下主要的和弦图（不要怕，如果是弹唱则一首歌用到的很少）：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/8.jpg" alt="主要和弦图（图片来自网络）"></p>
<h3 id="5-节奏型与扫弦">5.节奏型与扫弦</h3><p>啥又是节奏型？其实就是节奏，动次打次，或者动动次打动打。。还是没必要搞懂它，我们每个人都会打拍子，除非是完全没乐感。会打拍子就可以直接来弹比较简单的节奏型。</p>
<p>那右手怎么弹呢？答案并不是像吉他那样所有指头都上，而是<strong>一指禅</strong>！没错，只用食指！上下扫就行了！</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/14.png" alt="一指禅（图片来自《最易上手尤克里里弹唱超精选》）"></p>
<p>知道如何扫弦，就可以来学习简单的节奏型了。我推荐新手看这位张松涛老师的视频，我就是看他的第五课学会了第一首歌《莫名我就喜欢你》：</p>
<div class="video-container"><iframe src="http://player.youku.com/embed/XMzE2NjgzNjg4" frameborder="0" allowfullscreen></iframe></div>
<p>接着看第六课把《You Are My Sunshine》学会（两首都是一样的最简单下下下下四拍和弦），基本上就可以宣告你的 Ukulele 旅程要开始了！</p>
<p>非常推荐 <a href="http://v.youku.com/v_show/id_XNzU4MzA5NDYw.html" target="_blank" rel="external">这个系列视频</a>，介绍了17个常用节奏型，你到后期肯定会用到。</p>
<h3 id="6-练">6.练</h3><p>入门之后，你要做的就一个字：练！吃完饭练，Debug 期间练，起床之后练，无时不刻在练。你要找那种你特别想学会弹唱的曲子，这样学着会特别有动力，不一段时间你就会突飞猛进。如果你是偏向指弹的，那就不像弹唱这么简单了，弹唱可以用嗓音把你弹奏的瑕疵遮盖掉，而指弹单纯的靠拨弦发音，所以一首歌得无数次。</p>
<p>我一般习惯浏览以下资源：</p>
<ul>
<li><a href="http://www.zhihu.com/question/23935947" target="_blank" rel="external">如何快速地自学 Ukulele？</a>这个是我当初在知乎提的问题，里面妹纸回答的很不错。</li>
<li>我还买了《最易上手尤克里里弹唱超精选》这本书，不过感觉帮助不大，全是曲谱……</li>
</ul>
<p><strong>教程和曲谱：</strong></p>
<ul>
<li><a href="http://www.ukulelecn.com/forum.php" target="_blank" rel="external">Ukulelecn</a></li>
<li><a href="http://www.ukulelefan.com/" target="_blank" rel="external">尤克里里 Fans</a></li>
</ul>
<p><strong>视频：</strong></p>
<ul>
<li>不得不提的 <a href="http://i.youku.com/shushuMa" target="_blank" rel="external">马叔叔</a></li>
<li>刚才提到的 <a href="http://i.youku.com/ukulele" target="_blank" rel="external">优客伙计</a></li>
<li><a href="http://i.youku.com/u/UNjI1NDI5NTEy" target="_blank" rel="external">广州弹吧小吉他教室</a></li>
<li><a href="http://i.youku.com/zixunyq" target="_blank" rel="external">子熏乐器张SIR</a> 张 sir 很帅</li>
<li><a href="http://i.youku.com/ukulelemm" target="_blank" rel="external">maixueguonian</a></li>
</ul>
<p>最后你可以膜拜一下公认的大神 <a href="http://baike.baidu.com/view/6195265.htm" target="_blank" rel="external">Jake Shimabukuro</a>，听过他的<a href="http://www.zhihu.com/question/20457612" target="_blank" rel="external">弹奏</a>才知道 Ukulele 也能玩到这种境界。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/6.jpg" alt="Jake Shimabukuro（图片来自网络）"></p>
<h2 id="从玩_Ukulele_中学到的">从玩 Ukulele 中学到的</h2><ol>
<li>学一样东西的时候应该简单粗暴，掌握大体方向而不拘泥细节，直接实践做出效果，然后再从中找不足，查漏补缺，研究细枝末节。</li>
<li>难是因为没有开始，开始了就不会难。</li>
<li>学习新的技能，会为你的生活打开一扇窗。</li>
<li>对于兴趣，一天进步一点点就好，没必要贪多，也不求速成。长年累月的积累会让量变达到质变。</li>
<li>菜鸟有菜鸟的乐趣。</li>
</ol>
<p>虽然网上已经有很多入门教程了，但仍希望这篇文章能给你些许的帮助，谢谢:)</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>每个人都幻想过自己拥有一身的艺术细菌，可以像各种钢琴王子一样在琴键上挥洒自如。但是由于某些不可抗力，从小到大一直没学什么乐器，或者是学了也没坚持下来。最尴尬的是选了一种鸡肋乐器，学有所成却不接地气，比如二胡（我真不是黑，因为我也学过那么两年），总不能在同学聚会激战正酣的时候拿出来即兴演奏吧……还是老老实实戴个圆框墨镜到地铁口来一曲二泉映月……</p>
<p>人生苦短，为了圆我们的音（zhuang）乐（bi）梦，Ukulele 可以说是应运而生。本文将从 what、why、how 三方面介绍如何快速玩转 Ukulele，争取把我在学习过程中遇到的坑都写出来供大家参考。</p>
<h2 id="What-什么是_Ukulele">What-什么是 Ukulele</h2><p>Ukulele 翻译为夏威夷吉他、四弦琴，音译为乌克丽丽、悠可力力、尤克里里、优可乐乐，简称 Uku、Uke……没错，这么多名字都是在说一个玩意。不要纠结到底中文叫那个名字合适，你直接用 Ukulele 一词以蔽之。</p>
<p>它是一种弦乐器，正常情况下长这样：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/1.jpg" alt="正常的 Ukulele（图片来自网络）"></p>
<p>不正常情况下长这样：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration/play-ukulele/2.jpeg" alt="不正常的 Ukulele（图片来自网络）"></p>
<p>还有各种奇形怪状的，都非常可爱。从图上可以看出它整体和吉他非常类似，唯一的不同是少了两根弦，这就大大降低了学习成本！而且它音色清脆入耳，弹起来节奏活泼畅快，可以说是居家旅行必备之良品。如果对它的起源或背景感兴趣，可以去<a href="http://baike.baidu.com/subview/3963326/10243259.htm">百度百科-乌克丽丽</a>了解一下。</p>]]>
    
    </summary>
    
      <category term="Instrument" scheme="http://www.geekplux.com/tags/Instrument/"/>
    
      <category term="Skill" scheme="http://www.geekplux.com/tags/Skill/"/>
    
      <category term="Ukulele" scheme="http://www.geekplux.com/tags/Ukulele/"/>
    
      <category term="乐器" scheme="http://www.geekplux.com/tags/%E4%B9%90%E5%99%A8/"/>
    
      <category term="新技能" scheme="http://www.geekplux.com/tags/%E6%96%B0%E6%8A%80%E8%83%BD/"/>
    
      <category term="Ukulele" scheme="http://www.geekplux.com/categories/Ukulele/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[告别社交网络有多难]]></title>
    <link href="http://www.geekplux.com/2014/08/02/farewell_social_network.html"/>
    <id>http://www.geekplux.com/2014/08/02/farewell_social_network.html</id>
    <published>2014-08-02T12:50:46.000Z</published>
    <updated>2015-01-04T11:58:13.000Z</updated>
    <content type="html"><![CDATA[<p>我猜 QQ 空间最初应该是作为和新浪博客竞争才出现的，当时我还在初中，不会写什么 Blog，所以空间出来正迎合了我们这些学生的需求。随后「非主流」、「火星文」开始火，又是抓住了青春期学生的叛逆心理。不过我当时对非主流不是太感冒，一直很用心的经营着空间，犹记得当年幼稚的我还写了篇文章宣称空间是我的心灵归宿（正如现在矫情的我写这篇应该退出社交网络的文章）。所以从初中开始我的喜怒哀乐全在空间里，文章写了上百篇，照片更是几千张。</p>
<p>尽管后来开始沉迷微博、豆瓣、知乎等，空间一直是我割舍不下的一块，因为那里有旧友，有牵绊，这是一份长久以来捆绑着我的数据库。然而，随着认知的渐渐成熟，我越来越觉得<strong>人应该远离社交网络</strong>，不止是空间。理由也是在一次次和所谓羁绊的牵扯过程中感悟出来的：</p>
<h3 id="输出">输出</h3><p>刚开始我天真的以为社交网络是用来分享的，后来发现并不是。社交网络沦为了一个表演的舞台，每个人在上面表演，把想展示给别人的一面展示出来。发表一段状态，分享一篇文章或视频，并不是共享他的感受，也不是觉得这段信息真的有价值，而是在传递一种他<strong>自以为很重要的自我展示的信息</strong>，翻看朋友圈或其他的 timeline，随便找一条仔细分析一下就会发现他并不是在描述他的感受，而是在展现一些信息，或者直接说是炫耀。自从「逼格」一词横空出现，更是很好的定义了这种社交网站的分享行为其实就是为了<strong>彰显逼格</strong>。收到的评论，互相的交流根本无足轻重，因为这本身就不是输入，而是变相地输出。人们渐渐的带上了面具，因为社交网站上的你，并不是真正的你，而是<strong>你想让别人看到的你</strong>。</p>
<a id="more"></a>
<h3 id="偏见">偏见</h3><p>每个社交网络都有它的特点。微博烹饪着毫无营养的段子只供一乐；豆瓣是文艺青年的温床；空间：不转不是中国人……在很久很久以前，社交网络分享还存在价值的时候（可能是当时认知浅薄觉得什么都很吸引人），我竟然还有过信息焦虑，生怕错过什么重要的信息。但焦虑很快就没了，接踵而至的是厌烦。社交网络里开始充斥着软文。软文还是好的，更甚者是赤裸的代购广告、谣言和虚假信息。我很是怀疑转发这些信息的同学的分辨能力，实在受不了就屏蔽掉（现在看来，果然 QQ 空间里我屏蔽的人最多）。随着屏蔽人数的上升，我质疑过自己的这种行为：屏蔽的人多了，剩下的都是和我价值观差不多的，减少了信息获取渠道，是不是更容易形成我固有的偏见？后来发现正好相反，因为：</p>
<ul>
<li>偏见一旦形成就不是很容易修正了。</li>
<li>多读书、多游历才是减少偏见的良方。</li>
<li>其实屏蔽的这些人很少有掷地有声的见解。垃圾信息还是屏蔽了好。</li>
</ul>
<h3 id="好友">好友</h3><p>其实放不下社交网络，最多的理由都是因为那里还有自己的很多老友，如果不玩社交网络，如何得知他们的近况，如何能保持联系？这个确实是一个问题，我只说说我自己的看法：</p>
<p>刚进大学的第一年，我参加了很多学生工作和活动，认识了很多朋友，渐渐的认识到<strong>人和人的社交，本质上是一种价值交换</strong>。你和他作朋友，可能是你身上的某一点值得他利用，他身上的某一点值得你利用，你们可以互相交换自身的价值。（虽然「利用」这个词有点消极，可确实是利用，当然有的利用也可以是积极的，比如互相学习。）想通这个之后，就感觉一下子看清了朋友间的各种复杂关系，你自己的价值越大，能提供给别人的越多，那你就越受欢迎。这就像一个市场，每一次的社交活动，你都可以看成是一场交易。你请客他办事，或者是你们互相帮对方办一件事等等，所谓「人情」就是交易的货币。价值相等的两个人，往往关系会比较稳定。这里就不多扯了，我们把这种类型的朋友称为<strong>「浅交」</strong>。你可能觉得这样说朋友之间的关系有点现实了，但我们要在认清本质的基础上，保有一颗相信爱的心。这类朋友和你有互相认同的价值观，你们彼此付出过，倾注过真实的情感，这类朋友可以叫<strong>「挚友」</strong>。</p>
<p>我们的社交网络上，多是「浅交」，而非「挚友」。浅交的状态其实你根本没必要去关心，他去哪旅游了，和谁分手了，对你来说意义又有多少呢？简短的评论似乎也不会增进感情。只要你的<strong>价值</strong>还在，你们的关系就不会断，即使断了……你活到现在，生命中的过客恐怕有的已忘得一干二净了吧……所以，我们没必要刻意去关心这些信息，真正需要关心的是挚友。而我们关心挚友更好的方式是一封 Email，一通电话。想象一下你接到老友电话或是收到远方寄来明信片的兴奋程度吧。</p>
<p>说了这么多，我觉得不论对方是谁，我们都要以诚相待。相信爱的存在，珍惜出现在生命中的每个人。</p>
<h3 id="道理">道理</h3><p>在网络上游荡时，总会有读到一段话或一篇文章，忽然如醍醐灌顶般顿悟的时刻。比如：</p>
<blockquote>
<p>人们的痛苦都是源于对于自己无能的愤怒。   ——王小波</p>
</blockquote>
<p>或是：</p>
<blockquote>
<p>你的问题主要是读书不多而想得太多    ——杨绛</p>
</blockquote>
<p>等等。我把这些叫做「人生经验」。我们被击中原因可能是我们还停留在<strong>「能理解，但是还不能体会的情况」</strong>。就是说我们确实能明白这句话，也了解这句话的重要性，但是下次我们遇到类似的事情还是照旧，这句话完全记不起来。</p>
<p>很多道理、人生经验我们会从别人文章读到，会从别人嘴里听得。但无论听到还是读到，这都还不是我们的，我们无法领悟。确切的说是体会。因为只有我们经历过同样的事情，体验过类似的情形我们才能真正懂得，真正领悟。「吃一堑长一智」就是这个理。</p>
<p>因此在社交网络上看到这类信息，可以记下来，但不用放在心上。等到了该懂的时候自然会懂。</p>
<h3 id="发泄">发泄</h3><p>其实社交网络并不只是分（zhuang）享（bi），还是一个发泄的出口。不吐不快的时候，社交网络的确是一个很好的平台，你吐槽出来，大家会一起跟着吐，从而找到心理上的认同感。但是发泄的渠道很多，没必要在社交网络上：</p>
<ul>
<li>不一定所有人和你的想法一样，万一他跟你唱反调怎么办。</li>
<li>消极思想和负能量最好是不要影响到他人，因为在自己心里认为天大的事在别人那里微不足道。</li>
<li>发泄还是找一个健康的方式吧，囧。</li>
</ul>
<h3 id="总结">总结</h3><p>综上所述，我觉得我们更应该专注于自己的内心，更加注重现实中的情感，而不是虚拟中的互动。在这个信息繁杂的社会，增加自己独处的时间，反而能发现更大的世界。</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我猜 QQ 空间最初应该是作为和新浪博客竞争才出现的，当时我还在初中，不会写什么 Blog，所以空间出来正迎合了我们这些学生的需求。随后「非主流」、「火星文」开始火，又是抓住了青春期学生的叛逆心理。不过我当时对非主流不是太感冒，一直很用心的经营着空间，犹记得当年幼稚的我还写了篇文章宣称空间是我的心灵归宿（正如现在矫情的我写这篇应该退出社交网络的文章）。所以从初中开始我的喜怒哀乐全在空间里，文章写了上百篇，照片更是几千张。</p>
<p>尽管后来开始沉迷微博、豆瓣、知乎等，空间一直是我割舍不下的一块，因为那里有旧友，有牵绊，这是一份长久以来捆绑着我的数据库。然而，随着认知的渐渐成熟，我越来越觉得<strong>人应该远离社交网络</strong>，不止是空间。理由也是在一次次和所谓羁绊的牵扯过程中感悟出来的：</p>
<h3 id="输出">输出</h3><p>刚开始我天真的以为社交网络是用来分享的，后来发现并不是。社交网络沦为了一个表演的舞台，每个人在上面表演，把想展示给别人的一面展示出来。发表一段状态，分享一篇文章或视频，并不是共享他的感受，也不是觉得这段信息真的有价值，而是在传递一种他<strong>自以为很重要的自我展示的信息</strong>，翻看朋友圈或其他的 timeline，随便找一条仔细分析一下就会发现他并不是在描述他的感受，而是在展现一些信息，或者直接说是炫耀。自从「逼格」一词横空出现，更是很好的定义了这种社交网站的分享行为其实就是为了<strong>彰显逼格</strong>。收到的评论，互相的交流根本无足轻重，因为这本身就不是输入，而是变相地输出。人们渐渐的带上了面具，因为社交网站上的你，并不是真正的你，而是<strong>你想让别人看到的你</strong>。</p>]]>
    
    </summary>
    
      <category term="Life" scheme="http://www.geekplux.com/tags/Life/"/>
    
      <category term="Thought" scheme="http://www.geekplux.com/tags/Thought/"/>
    
      <category term="思考" scheme="http://www.geekplux.com/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="感想" scheme="http://www.geekplux.com/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="生活" scheme="http://www.geekplux.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="Thought" scheme="http://www.geekplux.com/categories/Thought/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[双拼学习记]]></title>
    <link href="http://www.geekplux.com/2014/07/06/learn_shuangpin.html"/>
    <id>http://www.geekplux.com/2014/07/06/learn_shuangpin.html</id>
    <published>2014-07-06T14:59:29.000Z</published>
    <updated>2015-01-04T11:51:30.000Z</updated>
    <content type="html"><![CDATA[<p>转移到<strong>双拼</strong>阵营差不多三个星期了。现在打字真的是「飞一般的感觉」。</p>
<p>双拼是输入法的一种，绝大多数人都只听过<strong>全拼</strong>和<strong>五笔</strong>两种输入法。如果你不清楚你现在用的是什么输入法，那么基本上可以断定你用的是全拼。至于五笔，我们虽然如雷贯耳，但没有经过专门训练的话，实在是可望而不可及。双拼提供给我们一种折中的方案，使我们的<strong>学习成本和全拼一样，打字速度却和五笔一样</strong>。那么到底什么是双拼呢？维基百科这样解释：</p>
<blockquote>
<p>双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。</p>
</blockquote>
<p>大家都知道，我们伟大的汉字大部分都可以用一个<strong>声母</strong>加一个<strong>韵母</strong>拼出来<em>（少部分只有韵母构成，如 奥ao、而 er、偶 ou 等）</em>，所以用双拼输入一个汉字<strong>最多按两个字母键</strong>，而全拼可能要用两个以上。举例来说，用全拼输入「天真」，可能需要「tianzhen」这么多字母，而用双拼只需要「tmvf」，字数多了之后优势更加明显。</p>
<p>由此可见，双拼的原理十分简单，而它学起来更简单。众所周知五笔打字速度很快，但是你从开始学起到最后熟练使用，中间需要几个月的时间，黄花菜都凉了。而<strong>双拼从学起到驾轻就熟只需要三周</strong>，输入量大的人一周都能炉火纯青。一般的学习流程是这样的：</p>
<ol>
<li>熟记键位</li>
<li>使用即练习</li>
<li>掌握双拼打字的节奏感</li>
</ol>
<a id="more"></a>
<p>在以上步骤开始之前，我们需要选择一种<strong>双拼方案</strong>。双拼有很多种输入方案供你选择，你不用害怕，这些方案只是键位不同而已，并没有本质的区别。你可以参考知乎的回答<a href="http://www.zhihu.com/question/20191383" target="_blank" rel="external">「各双拼输入方案之间有明显的优劣之分吗？」</a>。大家各有所爱，我自己用的是<a href="http://www.flypy.com/" target="_blank" rel="external">小鹤双拼</a>。接下来你就可以记小鹤的键位了，我当时并没有真的刻意去背，只是把键位图抄了下来放在键盘旁，打字想不起来的时候瞄一眼键位图。<em>（这里有个技巧，大部分输入法，如搜狗，都有「双拼下同时使用全拼」的选项。勾选之后你就可以在双拼实在想不起来，或者是着急打字的时候用全拼，它可以帮你平滑过渡到完全使用双拼）</em>。</p>
<p><img src="http://www.flypy.com/images/hejp.png" alt=""></p>
<p>不出一两个小时键位你就记得差不多了，接着就是受折磨的一周……刚切换过来会很别扭，经常卡住，半天打不出一个字，和你聊天的妹纸总会埋怨你聊天不专心……忍了，我们应该庆幸，学习双拼的成本真的太低了，所有学习过程都在真正使用的场景中完成，不知不觉，简直是 learning by doing 的最佳典范。</p>
<p>等你完全习惯用双拼的时候，会发现打字有一种节奏感。可能是因为我们用全拼时并不确定每个字得按几下键盘才能打出来，而用双拼，三下键盘一个字，习惯之后非常带感。从此全拼是路人……</p>
<p>综上所述，学习双拼是一件极具性价比的事。</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转移到<strong>双拼</strong>阵营差不多三个星期了。现在打字真的是「飞一般的感觉」。</p>
<p>双拼是输入法的一种，绝大多数人都只听过<strong>全拼</strong>和<strong>五笔</strong>两种输入法。如果你不清楚你现在用的是什么输入法，那么基本上可以断定你用的是全拼。至于五笔，我们虽然如雷贯耳，但没有经过专门训练的话，实在是可望而不可及。双拼提供给我们一种折中的方案，使我们的<strong>学习成本和全拼一样，打字速度却和五笔一样</strong>。那么到底什么是双拼呢？维基百科这样解释：</p>
<blockquote>
<p>双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。</p>
</blockquote>
<p>大家都知道，我们伟大的汉字大部分都可以用一个<strong>声母</strong>加一个<strong>韵母</strong>拼出来<em>（少部分只有韵母构成，如 奥ao、而 er、偶 ou 等）</em>，所以用双拼输入一个汉字<strong>最多按两个字母键</strong>，而全拼可能要用两个以上。举例来说，用全拼输入「天真」，可能需要「tianzhen」这么多字母，而用双拼只需要「tmvf」，字数多了之后优势更加明显。</p>
<p>由此可见，双拼的原理十分简单，而它学起来更简单。众所周知五笔打字速度很快，但是你从开始学起到最后熟练使用，中间需要几个月的时间，黄花菜都凉了。而<strong>双拼从学起到驾轻就熟只需要三周</strong>，输入量大的人一周都能炉火纯青。一般的学习流程是这样的：</p>
<ol>
<li>熟记键位</li>
<li>使用即练习</li>
<li>掌握双拼打字的节奏感</li>
</ol>]]>
    
    </summary>
    
      <category term="Skill" scheme="http://www.geekplux.com/tags/Skill/"/>
    
      <category term="Tool" scheme="http://www.geekplux.com/tags/Tool/"/>
    
      <category term="工具" scheme="http://www.geekplux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="新技能" scheme="http://www.geekplux.com/tags/%E6%96%B0%E6%8A%80%E8%83%BD/"/>
    
      <category term="Tool" scheme="http://www.geekplux.com/categories/Tool/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CoffeeScript 编码风格指南（译）]]></title>
    <link href="http://www.geekplux.com/2014/06/21/coffeescript_style_guide.html"/>
    <id>http://www.geekplux.com/2014/06/21/coffeescript_style_guide.html</id>
    <published>2014-06-21T15:47:32.000Z</published>
    <updated>2015-01-04T11:41:59.000Z</updated>
    <content type="html"><![CDATA[<p>这份指南阐述了一些 <a href="http://jashkenas.github.com/coffee-script/" target="_blank" rel="external">CoffeeScript</a> 的最佳实践和编码惯例。</p>
<p>这份指南是社群驱动的，非常鼓励大家来贡献内容。</p>
<p>请注意这还是一份正在完善的指南：仍有很多地方可以改进，有些已制定的准则也不一定是社区惯用的（基于此，在适当的情况下，这些有待斟酌的准则将有可能被修改或删除。）</p>
<h2 id="灵感">灵感</h2><p>本指南中的很多细节受到了几份现有的风格指南和其他资源的启发。特别是：</p>
<ul>
<li><a href="http://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">PEP-8</a>: Style Guide for Python Code</li>
<li>Bozhidar Batsov’s <a href="https://github.com/bbatsov/ruby-style-guide" target="_blank" rel="external">Ruby Style Guide</a></li>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml" target="_blank" rel="external">Google’s JavaScript Style Guide</a></li>
<li><a href="http://arcturo.github.com/library/coffeescript/04_idioms.html" target="_blank" rel="external">Common CoffeeScript Idioms</a></li>
<li>Thomas Reynolds’ <a href="http://awardwinningfjords.com/2011/05/13/coffeescript-specific-style-guide.html" target="_blank" rel="external">CoffeeScript-specific Style Guide</a></li>
<li>Jeremy Ashkenas’ <a href="https://gist.github.com/1005723" target="_blank" rel="external">code review</a> of <a href="http://spinejs.com/" target="_blank" rel="external">Spine</a></li>
<li>The <a href="https://github.com/jashkenas/coffee-script/wiki/FAQ" target="_blank" rel="external">CoffeeScript FAQ</a></li>
</ul>
<a id="more"></a>
<h2 id="目录">目录</h2><ul>
<li><a href="#guide">CoffeeScript 风格指南</a><ul>
<li><a href="#code_layout">代码布局（Code Layout）</a><ul>
<li><a href="#tabs_or_spaces">Tab 还是 空格？（Tabs or Spaces?）</a></li>
<li><a href="#maximum_line_length">最大行宽（Maximum Line Length）</a></li>
<li><a href="#blank_lines">空行（Blank Lines）</a></li>
<li><a href="#trailing_whitespace">结尾空白（Trailing Whitespace）</a></li>
<li><a href="#optional_commas">可选的逗号（Optional Commas）</a></li>
<li><a href="#encoding">编码（Encoding）</a></li>
</ul>
</li>
<li><a href="#module_imports">模块导入（Module Imports）</a></li>
<li><a href="#whitespace">表达式和语句中的空白（Whitespace in Expressions and Statements）</a></li>
<li><a href="#comments">注释（Comments）</a><ul>
<li><a href="#block_comments">块注释（Block Comments）</a></li>
<li><a href="#inline_comments">行内注释（Inline Comments）</a></li>
</ul>
</li>
<li><a href="#naming_conventions">命名规范（Naming Conventions）</a></li>
<li><a href="#functions">函数（Functions）</a></li>
<li><a href="#strings">字符串（Strings）</a></li>
<li><a href="#conditionals">条件判断（Conditionals）</a></li>
<li><a href="#looping_and_comprehensions">循环和列表解析（Looping and Comprehensions）</a></li>
<li><a href="#extending_native_objects">扩展本地对象（Extending Native Objects）</a></li>
<li><a href="#exceptions">异常（Exceptions）</a></li>
<li><a href="#annotations">注解（Annotations）</a></li>
<li><a href="#miscellaneous">其他（Miscellaneous）</a></li>
</ul>
</li>
</ul>
<p><a name="code_layout"></a></p>
<h2 id="代码布局（Code_Layout）">代码布局（Code Layout）</h2><p><a name="tabs_or_spaces"></a></p>
<h3 id="Tab_还是_空格？（Tabs_or_Spaces?）">Tab 还是 空格？（Tabs or Spaces?）</h3><p>只用 <strong>空格</strong>，每级缩进均为 <strong>2 个空格</strong>。切勿混用 Tab 和空格。</p>
<p><a name="maximum_line_length"></a></p>
<h3 id="最大行宽（Maximum_Line_Length）">最大行宽（Maximum Line Length）</h3><p>限制每行最多 79 个字符。</p>
<p><a name="blank_lines"></a></p>
<h3 id="空行（Blank_Lines）">空行（Blank Lines）</h3><p>顶级函数和类的定义用一个空行分开。</p>
<p>类内部的函数定义也用一个空行分开。</p>
<p>对于每个函数体内，只在为了提高可读性的情况下才使用一个空行（例如：为了达到划分逻辑的目的）。</p>
<p><a name="trailing_whitespace"></a></p>
<h3 id="结尾空白（Trailing_Whitespace）">结尾空白（Trailing Whitespace）</h3><p>不要在任何一行保留行尾空白。</p>
<p><a name="optional_commas"></a></p>
<h3 id="可选的逗号（Optional_Commas）">可选的逗号（Optional Commas）</h3><p>当对象（或数组）的属性（或元素）作为单独一行列出时，避免在换行符前使用逗号。如下：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span><br><span class="line">foo = [</span><br><span class="line">  <span class="string">'some'</span></span><br><span class="line">  <span class="string">'string'</span></span><br><span class="line">  <span class="string">'values'</span></span><br><span class="line">]</span><br><span class="line"><span class="attribute">bar</span>:</span><br><span class="line">  <span class="attribute">label</span>: <span class="string">'test'</span></span><br><span class="line">  <span class="attribute">value</span>: <span class="number">87</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 差</span></span><br><span class="line">foo = [</span><br><span class="line">  <span class="string">'some'</span>,</span><br><span class="line">  <span class="string">'string'</span>,</span><br><span class="line">  <span class="string">'values'</span></span><br><span class="line">]</span><br><span class="line"><span class="attribute">bar</span>:</span><br><span class="line">  <span class="attribute">label</span>: <span class="string">'test'</span>,</span><br><span class="line">  <span class="attribute">value</span>: <span class="number">87</span></span><br></pre></td></tr></table></figure>
<p><a name="encoding"></a></p>
<h3 id="编码（Encoding）">编码（Encoding）</h3><p>UTF-8 是首选的源文件编码。</p>
<p><a name="module_imports"></a></p>
<h2 id="模块导入（Module_Imports）">模块导入（Module Imports）</h2><p>如果需要导入模块 (CommonJS 模块，AMD，等等.), <code>require</code> 语句应该单独作为一行。如下：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span> <span class="string">'lib/setup'</span></span><br><span class="line">Backbone = <span class="built_in">require</span> <span class="string">'backbone'</span></span><br></pre></td></tr></table></figure>
<p>这些语句应该按以下顺序去分组：</p>
<ol>
<li>标准库的导入 <em>（如果标准库存在）</em></li>
<li>第三方库的导入</li>
<li>本地导入 <em>（导入这个应用程序的或库的具体依赖）</em></li>
</ol>
<p><a name="whitespace"></a></p>
<h2 id="表达式和语句中的空白（Whitespace_in_Expressions_and_Statements）">表达式和语句中的空白（Whitespace in Expressions and Statements）</h2><p>下列情况应该避免多余的空格：</p>
<ul>
<li><p>紧贴着圆括号、方括号和大括号内部</p>
  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">($ <span class="string">'body'</span>) <span class="comment"># 好</span></span><br><span class="line">( $ <span class="string">'body'</span> ) <span class="comment"># 差</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>紧贴在逗号前</p>
  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log x, y <span class="comment"># 好</span></span><br><span class="line"><span class="built_in">console</span>.log x , y <span class="comment"># 差</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>额外建议：</p>
<ul>
<li><p>在下列二元操作符的左右两边都保留 <strong>一个空格</strong></p>
<ul>
<li><p>赋值运算符: <code>=</code></p>
<ul>
<li><p><em>注意这同样适用于函数定义中的默认参数</em></p>
 <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">test</span>: <span class="function"><span class="params">(param = <span class="literal">null</span>)</span> -&gt;</span> <span class="comment"># 好</span></span><br><span class="line"><span class="attribute">test</span>: <span class="function"><span class="params">(param=<span class="literal">null</span>)</span> -&gt;</span> <span class="comment"># 差</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自增运算符: <code>+=</code>, <code>-=</code>, 等等。</p>
</li>
<li>比较运算符: <code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>unless</code>, 等等。</li>
<li><p>算术运算符: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, 等等。</p>
</li>
<li><p><em>（这些操作符两边的空格不要多于一个）</em></p>
  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">1</span></span><br><span class="line">fooBar = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 差</span></span><br><span class="line">x      = <span class="number">1</span></span><br><span class="line">y      = <span class="number">1</span></span><br><span class="line">fooBar = <span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><a name="comments"></a></p>
<h2 id="注释（Comments）">注释（Comments）</h2><p>如果你修改了一段已有注释说明的代码，则也要更新它对应的注释。（理想状态是，重构这段代码直到它不需要注释说明，然后再把之前的注释全删掉。）</p>
<p>注释的首字母要大写，除非第一个单词是以小写字母开头的标识符。</p>
<p>如果注释很短，可以省略末尾的句号。</p>
<p><a name="block_comments"></a></p>
<h3 id="块注释（Block_Comments）">块注释（Block Comments）</h3><p>注释块通常应用于尾随其后的一段代码。</p>
<p>每一行注释都以 <code>#</code> 加一个空格开头，而且和被注释的代码有相同的缩进层次。</p>
<p>注释块内的段落以仅含单个 <code>#</code> 的行分割。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个块注释。请注意假如这是一段块注释，</span></span><br><span class="line"><span class="comment"># 则它描述的就应该是接下来的这段代码。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 这是块注释的第二段。</span></span><br><span class="line"><span class="comment"># 请注意这段是由上一行带有 # 号的空行分开的。（P.S. 最好用英文写注释）</span></span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line">start()</span><br><span class="line">stop()</span><br></pre></td></tr></table></figure>
<p><a name="inline_comments"></a></p>
<h3 id="行内注释（Inline_Comments）">行内注释（Inline Comments）</h3><p>行内注释紧贴在被描述的代码的上一行，如果行内注释足够短，则可以处在同一行行尾（由一个空格隔开）。</p>
<p>所有行内注释都以 <code>#</code> 加一个空格开头。</p>
<p>应该限制行内注释的使用，因为它们的存在通常是一个代码异味的标志。</p>
<p>不要给显而易见的情况作行内注释：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span><br><span class="line">x = x + <span class="number">1</span> <span class="comment"># x 自增</span></span><br></pre></td></tr></table></figure>
<p>然而，行内注释在某些情况下是有用的：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span><br><span class="line">x = x + <span class="number">1</span> <span class="comment"># 边界补足</span></span><br></pre></td></tr></table></figure>
<p><a name="naming_conventions"></a></p>
<h2 id="命名规范（Naming_Conventions）">命名规范（Naming Conventions）</h2><p>使用 <code>小驼峰命名法</code> （第一个词的首字母小写，后面每个词的首字母大写）来命名所有的变量、方法和对象属性。</p>
<p>使用 <code>大驼峰命名法</code> （第一个词的首字母，以及后面每个词的首字母都大写）来命名所有的类 <em>（在<a href="http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms" target="_blank" rel="external">其他类似的命名法</a>中，这种风格通常也被称为 <code>帕斯卡命名法（PascalCase）</code>、 <code>大写驼峰命名法（CamelCaps）</code> 或 <code>首字母大写命名法（CapWords）</code>。）</em></p>
<p><em>（CoffeeScript <strong>官方</strong>  约定是用驼峰命名法，因为这可以简化与 JavaScript 的相互转化，想了解更多，请看<a href="https://github.com/jashkenas/coffee-script/issues/425" target="_blank" rel="external">这里</a>.)</em></p>
<p>对于常量，单词全部大写，用下划线隔开即可：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSTANT_LIKE_THIS</span><br></pre></td></tr></table></figure>
<p>私有函数和私有变量都应该在前面加一个下划线：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">_privateMethod</span>: <span class="function">-&gt;</span></span><br></pre></td></tr></table></figure>
<p><a name="functions"></a></p>
<h2 id="函数（Functions）">函数（Functions）</h2><p><em>（以下这些准则同样适用于类中的方法。）</em></p>
<p>当声明一个带参函数时，应在参数列表的右圆括号后空出一个空格：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">foo</span> = <span class="params">(arg1, arg2)</span> -&gt;</span> <span class="comment"># 好</span></span><br><span class="line"><span class="function"><span class="title">foo</span> = <span class="params">(arg1, arg2)</span>-&gt;</span> <span class="comment"># 差</span></span><br></pre></td></tr></table></figure>
<p>无参函数不要用圆括号：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">bar</span> = -&gt;</span> <span class="comment"># 好</span></span><br><span class="line"><span class="function"><span class="title">bar</span> = <span class="params">()</span> -&gt;</span> <span class="comment"># 差</span></span><br></pre></td></tr></table></figure>
<p>当函数链式调用，却在一行放不下时，则把每个函数调用都另起一行，且都缩进一级（即在 <code>.</code> 前加两个空格）。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1.</span>.<span class="number">3</span>]</span><br><span class="line">  .map(<span class="function"><span class="params">(x)</span> -&gt;</span> x * x)</span><br><span class="line">  .concat([<span class="number">10.</span>.<span class="number">12</span>])</span><br><span class="line">  .filter(<span class="function"><span class="params">(x)</span> -&gt;</span> x &lt; <span class="number">11</span>)</span><br><span class="line">  .reduce(<span class="function"><span class="params">(x, y)</span> -&gt;</span> x + y)</span><br></pre></td></tr></table></figure>
<p>当调用函数时，我们应该为了提高可读性而去掉圆括号。请记住，「可读性」是我们主观臆断的。只有类似下面几个例子的情况才被社区认为是最佳的：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">baz <span class="number">12</span></span><br><span class="line"></span><br><span class="line">brush.ellipse <span class="attribute">x</span>: <span class="number">10</span>, <span class="attribute">y</span>: <span class="number">20</span> <span class="comment"># 大括号在适当的时候也可以去掉</span></span><br><span class="line"></span><br><span class="line">foo(<span class="number">4</span>).bar(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">obj.value(<span class="number">10</span>, <span class="number">20</span>) / obj.value(<span class="number">20</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> inspect value</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Tag(<span class="keyword">new</span> Value(a, b), <span class="keyword">new</span> Arg(c))</span><br></pre></td></tr></table></figure>
<p>有时候你会发现圆括号用来包裹的是函数体（而不是函数的参数）。请看下面的例子（以下简称为「函数体风格」）：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">($ <span class="string">'#selektor'</span>).addClass <span class="string">'klass'</span></span><br><span class="line"></span><br><span class="line">(foo <span class="number">4</span>).bar <span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>这段代码会编译为：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#selektor'</span>).addClass <span class="string">'klass'</span></span><br><span class="line"></span><br><span class="line">foo(<span class="number">4</span>).bar <span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>一些习惯链式调用的人会巧用「函数体风格」进行单独初始化：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">($ <span class="string">'#selektor'</span>).addClass(<span class="string">'klass'</span>).hide() <span class="comment"># 单独初始化调用</span></span><br><span class="line">(($ <span class="string">'#selektor'</span>).addClass <span class="string">'klass'</span>).hide() <span class="comment"># 全部调用</span></span><br></pre></td></tr></table></figure>
<p>「函数体风格」并不得到推荐。但是， <strong>当它适应一些特殊的项目需求时，还是得用它。</strong></p>
<p><a name="strings"></a></p>
<h2 id="字符串（Strings）">字符串（Strings）</h2><p>用字符串插值代替字符串连接符：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"this is an <span class="subst">#&#123;adjective&#125;</span> string"</span> <span class="comment"># 好</span></span><br><span class="line"><span class="string">"this is an "</span> + adjective + <span class="string">" string"</span> <span class="comment"># 差</span></span><br></pre></td></tr></table></figure>
<p>最好用单引号 (<code>&#39;&#39;</code>) 而不是双引号 (<code>&quot;&quot;</code>) 。除非是插入到另一段现有的字符串中（类似字符串插值）。</p>
<p><a name="conditionals"></a></p>
<h2 id="条件判断（Conditionals）">条件判断（Conditionals）</h2><p>用 <code>unless</code> 来代替 <code>if</code> 的否定情况。</p>
<p>不要用 <code>unless...else</code>， 而用 <code>if...else</code>:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">true</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 差</span></span><br><span class="line"><span class="keyword">unless</span> <span class="literal">false</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>多行的 if/else 语句应该缩进：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">true</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 差</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">true</span> <span class="keyword">then</span> ...</span><br><span class="line"><span class="keyword">else</span> ...</span><br></pre></td></tr></table></figure>
<p><a name="looping_and_comprehensions"></a></p>
<h2 id="循环和列表解析（Looping_and_Comprehensions）">循环和列表解析（Looping and Comprehensions）</h2><p>尽可能的使用列表解析：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好</span></span><br><span class="line">result = (item.name <span class="keyword">for</span> item <span class="keyword">in</span> array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 差</span></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> array</span><br><span class="line">  results.push item.name</span><br></pre></td></tr></table></figure>
<p>还可以过滤结果：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = (item <span class="keyword">for</span> item <span class="keyword">in</span> array <span class="keyword">when</span> item.name <span class="keyword">is</span> <span class="string">"test"</span>)</span><br></pre></td></tr></table></figure>
<p>遍历对象的键值：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object = <span class="attribute">one</span>: <span class="number">1</span>, <span class="attribute">two</span>: <span class="number">2</span></span><br><span class="line">alert(<span class="string">"<span class="subst">#&#123;key&#125;</span> = <span class="subst">#&#123;value&#125;</span>"</span>) <span class="keyword">for</span> key, value <span class="keyword">of</span> object</span><br></pre></td></tr></table></figure>
<p><a name="extending_native_objects"></a></p>
<h2 id="扩展本地对象（Extending_Native_Objects）">扩展本地对象（Extending Native Objects）</h2><p>不要修改本地对象。</p>
<p>比如，不要给 <code>Array.prototype</code> 引入 <code>Array#forEach</code> 。</p>
<p><a name="exceptions"></a></p>
<h2 id="异常（Exceptions）">异常（Exceptions）</h2><p>不要抑制异常抛出。</p>
<p><a name="annotations"></a></p>
<h2 id="注解（Annotations）">注解（Annotations）</h2><p>必要的时候应该写注解，来指明接下来的代码块具体将干什么。</p>
<p>注解应紧贴在被描述代码的上一行。</p>
<p>注解关键字后面应该跟一个冒号加一个空格，加一个描述性的注释。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># FIXME: The client's current state should *not* affect payload processing.</span></span><br><span class="line">resetClientState()</span><br><span class="line">processPayload()</span><br></pre></td></tr></table></figure>
<p>如果注解不止一行，则下一行缩进两个空格。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO: Ensure that the value returned by this call falls within a certain</span></span><br><span class="line"><span class="comment">#   range, or throw an exception.</span></span><br><span class="line">analyze()</span><br></pre></td></tr></table></figure>
<p>注解有以下几类：</p>
<ul>
<li><code>TODO</code>: 描述缺失的功能，以便日后加入</li>
<li><code>FIXME</code>: 描述需要修复的代码</li>
<li><code>OPTIMIZE</code>: 描述性能低下，或难以优化的代码</li>
<li><code>HACK</code>: 描述一段值得质疑（或很巧妙）的代码</li>
<li><code>REVIEW</code>: 描述需要确认其编码意图是否正确的代码</li>
</ul>
<p>如果你必须自定义一个新的注解类型，则应该把这个注解类型记录在项目的 README 里面。</p>
<p><a name="miscellaneous"></a></p>
<h2 id="其他（Miscellaneous）">其他（Miscellaneous）</h2><p><code>and</code> 更优于 <code>&amp;&amp;</code>.</p>
<p><code>or</code> 更优于 <code>||</code>.</p>
<p><code>is</code> 更优于 <code>==</code>.</p>
<p><code>not</code> 更优于 <code>!</code>.</p>
<p><code>or=</code> 应在可能的情况下使用：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp <span class="keyword">or</span>= &#123;&#125; <span class="comment"># 好</span></span><br><span class="line">temp = temp || &#123;&#125; <span class="comment"># 差</span></span><br></pre></td></tr></table></figure>
<p>最好用 (<code>::</code>) 访问对象的原型：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Array</span>::slice <span class="comment"># 好</span></span><br><span class="line">Array.prototype.slice <span class="comment"># 差</span></span><br></pre></td></tr></table></figure>
<p>最好用 <code>@property</code> 而不是 <code>this.property</code>.</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="property">@property</span> <span class="comment"># 好</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.property <span class="comment"># 差</span></span><br></pre></td></tr></table></figure>
<p>但是，避免使用 <strong>单独的</strong> <code>@</code>:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">this</span> <span class="comment"># 好</span></span><br><span class="line"><span class="keyword">return</span> @ <span class="comment"># 差</span></span><br></pre></td></tr></table></figure>
<p>没有返回值的时候避免使用 <code>return</code> ，其他情况则需要显示 return 。</p>
<p>当函数需要接收可变数量的参数时，使用 splats  (<code>...</code>)。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log args... <span class="comment"># 好</span></span><br><span class="line"></span><br><span class="line">(a, b, c, rest...) -&gt; <span class="comment"># 好</span></span><br></pre></td></tr></table></figure>
<p>（译文完）</p>
<hr>
<ul>
<li><a href="https://github.com/polarmobile/coffeescript-style-guide/blob/master/README.md" target="_blank" rel="external">原文地址</a></li>
<li><a href="http://geekplux.github.io/coffeescript-style-guide" target="_blank" rel="external">中文版地址</a></li>
<li><a href="https://github.com/polarmobile/coffeescript-style-guide" target="_blank" rel="external">原 Github 地址</a></li>
<li><a href="https://github.com/geekplux/coffeescript-style-guide" target="_blank" rel="external">中文版 Github 地址</a></li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这份指南阐述了一些 <a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a> 的最佳实践和编码惯例。</p>
<p>这份指南是社群驱动的，非常鼓励大家来贡献内容。</p>
<p>请注意这还是一份正在完善的指南：仍有很多地方可以改进，有些已制定的准则也不一定是社区惯用的（基于此，在适当的情况下，这些有待斟酌的准则将有可能被修改或删除。）</p>
<h2 id="灵感">灵感</h2><p>本指南中的很多细节受到了几份现有的风格指南和其他资源的启发。特别是：</p>
<ul>
<li><a href="http://www.python.org/dev/peps/pep-0008/">PEP-8</a>: Style Guide for Python Code</li>
<li>Bozhidar Batsov’s <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a></li>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml">Google’s JavaScript Style Guide</a></li>
<li><a href="http://arcturo.github.com/library/coffeescript/04_idioms.html">Common CoffeeScript Idioms</a></li>
<li>Thomas Reynolds’ <a href="http://awardwinningfjords.com/2011/05/13/coffeescript-specific-style-guide.html">CoffeeScript-specific Style Guide</a></li>
<li>Jeremy Ashkenas’ <a href="https://gist.github.com/1005723">code review</a> of <a href="http://spinejs.com/">Spine</a></li>
<li>The <a href="https://github.com/jashkenas/coffee-script/wiki/FAQ">CoffeeScript FAQ</a></li>
</ul>]]>
    
    </summary>
    
      <category term="CoffeeScript" scheme="http://www.geekplux.com/tags/CoffeeScript/"/>
    
      <category term="Translation" scheme="http://www.geekplux.com/tags/Translation/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/tags/Web/"/>
    
      <category term="译文" scheme="http://www.geekplux.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/categories/Web/"/>
    
      <category term="CoffeeScript" scheme="http://www.geekplux.com/categories/Web/CoffeeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CoffeeScript 笔记]]></title>
    <link href="http://www.geekplux.com/2014/05/15/coffeescript_note.html"/>
    <id>http://www.geekplux.com/2014/05/15/coffeescript_note.html</id>
    <published>2014-05-15T11:06:09.000Z</published>
    <updated>2015-08-04T08:59:03.000Z</updated>
    <content type="html"><![CDATA[<p>最近读了《CoffeeScript程序设计》的前半部分「核心 CoffeeScript」。对 CoffeeScript 也是有了初步的了解，本文只是我的随手笔记，并没有非常系统的总结 CoffeeScript 语法，想学习语法的同学可以看以下两份中文材料：</p>
<ul>
<li><a href="http://island205.github.io/tlboc/" target="_blank" rel="external">CoffeeScript中文手册</a></li>
<li><a href="http://island205.github.io/coffeescript-cookbook.github.com/" target="_blank" rel="external">CoffeeScript Cookbook</a></li>
</ul>
<h2 id="为什么要用_CoffeeScript？">为什么要用 CoffeeScript？</h2><ul>
<li>采用了 JavaScript 中的 Good Parts，符合 JS 最佳实践</li>
<li>代码简洁清晰，有很多语法糖</li>
</ul>
<h2 id="一些特性">一些特性</h2><h4 id="1-有意义的空格">1.有意义的空格</h4><p>CoffeeScript 移除了所有的大括号和分号。</p>
<p>JS 会自动在行尾添加<code>;</code>，但它又没有纯粹的设计为一款不需要加分号的语言，所以有时候会引起一些蛋疼的Bug。而 CoffeeScript 会在编译出的 JS 代码里每行都加<code>;</code>，很方便。</p>
<p>CoffeeScript 和 Python、Ruby 一样，采用强制缩进（Coffee的很多地方与 ruby 类似)，这种简洁，可读性又很强的代码，让人大爱。</p>
<a id="more"></a>
<h4 id="2-变量作用域的控制">2.变量作用域的控制</h4><p>JS 中的变量作用域一直让人诟病。</p>
<p>CoffeeScript 把编译生成的 JS 封装在一个匿名函数中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 这里是编译生成的代码</span></span><br><span class="line">&#125;).call(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>这样就巧妙避免了全局作用域的污染。同时，CoffeeScript 始终在编译生成的 JS 代码中用 <code>var</code> 声明变量。</p>
<h4 id="3-存在性判断">3.存在性判断</h4><p>CoffeeScript 中有个操作符 <code>?</code>，用于检测变量是否存在。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log html <span class="keyword">if</span> html?</span><br></pre></td></tr></table></figure>
<p>这句 CoffeeScript 编译过来为（去掉了匿名封装函数，为了方便，之后的编译后代码都去掉）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> html !== <span class="string">"undefined"</span> &amp;&amp; html !== <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(html);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可见，<code>?</code> 会先检测变量有没有定义，如果定义了再检测是否为 null。</p>
<h4 id="4-函数和_splat_操作符">4.函数和 splat 操作符</h4><p>CoffeeScript 中去掉了 <code>function</code> 关键字。用 <code>() -&gt;</code> 定义一个函数。括号内为参数，可以为参数设置默认值。如：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">myFunction</span> = <span class="params">(a, b = <span class="number">2</span>)</span> -&gt;</span></span><br><span class="line">  a + b</span><br></pre></td></tr></table></figure>
<p>编译为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction;</span><br><span class="line"></span><br><span class="line">myFunction = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b == <span class="literal">null</span>) &#123;</span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>调用函数的时候，还可以不用括号。如：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myFunction <span class="number">3</span>, <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>有一点需要注意一下，CoffeeScript 会在编译后的 JS 代码中自动为最后一行添加 <code>return</code> 关键字。所以不论函数的最后一行是什么，都会成为返回值。如果你不想让最后一行成为返回值，就需要另起一行自己加上 <code>return</code>。</p>
<p>splat 操作符非常强大。在你的函数需要接受<strong>可变数量的参数</strong>时就需要它了。书上的栗子：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">splatter</span> = <span class="params">(etc...)</span> -&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log <span class="string">"Length: <span class="subst">#&#123;etc.length&#125;</span>, Values: <span class="subst">#&#123;etc.join(<span class="string">', '</span>)&#125;</span>"</span></span><br><span class="line">  <span class="regexp">//</span> CoffeeScript 中字符串插值用 <span class="comment">#&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">splatter()</span><br><span class="line">splatter(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 输出</span><br><span class="line"><span class="attribute">Length</span>: <span class="number">0</span>, <span class="attribute">Values</span>:</span><br><span class="line"><span class="attribute">Length</span>: <span class="number">3</span>, <span class="attribute">Values</span>: a, b, c</span><br></pre></td></tr></table></figure>
<p>就在某个参数后面加上<code>...</code>，就使传入的参数自动转化为一个数组。<strong>splat 操作符可以出现在参数列表的任意位置，但是参数列表中只能有一个 splat 操作符</strong>。</p>
<h4 id="5-数组与区间">5.数组与区间</h4><p>一般定义数组是这样：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br></pre></td></tr></table></figure>
<p>在 CoffeeScript 里你还可以这样：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myArray = [</span><br><span class="line">            <span class="string">"a"</span></span><br><span class="line">            <span class="string">"b"</span></span><br><span class="line">            <span class="string">"c"</span></span><br><span class="line">          ]</span><br></pre></td></tr></table></figure>
<ul>
<li>在 JS 中判断是否存在于数组，需要用 <code>Array.prototype.indexOf</code>，在 CoffeeScript 中只需要用 <code>in</code>：</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log <span class="string">"d was not be found"</span> <span class="keyword">unless</span> <span class="string">"d"</span> <span class="keyword">in</span> myArray</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 输出</span><br><span class="line">d was <span class="keyword">not</span> be found</span><br></pre></td></tr></table></figure>
<ul>
<li>交换赋值</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">"X"</span></span><br><span class="line">y = <span class="string">"Y"</span></span><br><span class="line"></span><br><span class="line">[x, y] = [y, x]</span><br></pre></td></tr></table></figure>
<p>交换 x、y 的值就这么简单！</p>
<ul>
<li>多重赋值</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">myArray = [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>]</span><br><span class="line"></span><br><span class="line">[start, middle..., end] = myArray  <span class="regexp">//</span> 可配合 splat 操作符使用</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log <span class="string">"start: <span class="subst">#&#123;start&#125;</span>"</span></span><br><span class="line"><span class="built_in">console</span>.log <span class="string">"middle: <span class="subst">#&#123;middle&#125;</span>"</span></span><br><span class="line"><span class="built_in">console</span>.log <span class="string">"end: <span class="subst">#&#123;end&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 输出</span><br><span class="line"><span class="attribute">start</span>: A</span><br><span class="line"><span class="attribute">middle</span>: B,C</span><br><span class="line"><span class="attribute">end</span>: D</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>区间</strong></li>
</ul>
<p>区间能让<strong>定义包含两个数字之间所有数字的数组</strong>变得很容易。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myRange = [<span class="number">1.</span>.<span class="number">10</span>]</span><br><span class="line"><span class="built_in">console</span>.log myRange</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 输出 [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> ]</span><br></pre></td></tr></table></figure>
<p>如果不想包括结束数值，可以用 <code>...</code> 代替 <code>..</code>。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myRange = [<span class="number">10.</span>..<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log myRange</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 输出 [ <span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span> ]</span><br></pre></td></tr></table></figure>
<p>常见的数组操作，都可以通过区间完成：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">myArray = [<span class="number">1.</span>.<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 分割数组</span><br><span class="line">part = myArray[<span class="number">0.</span>.<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log part</span><br><span class="line"><span class="regexp">//</span> 输出 [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 替换数组值</span><br><span class="line">myArray = [<span class="number">1.</span>.<span class="number">10</span>]</span><br><span class="line">myArray[<span class="number">4.</span>.<span class="number">7</span>] = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</span><br><span class="line"><span class="built_in">console</span>.log myArray</span><br><span class="line"><span class="regexp">//</span> 输出 [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="number">9</span>, <span class="number">10</span> ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 插入值</span><br><span class="line">myArray = [<span class="number">1.</span>.<span class="number">10</span>]</span><br><span class="line">myArray[<span class="number">4.</span>.-<span class="number">1</span>] = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</span><br><span class="line"><span class="built_in">console</span>.log myArray</span><br><span class="line"><span class="regexp">//</span> 输出 [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> ]</span><br></pre></td></tr></table></figure>
<h4 id="6-类和继承">6.类和继承</h4><p>一例胜千言：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line">  <span class="attribute">constructor</span>: <span class="function"><span class="params">(<span class="property">@name</span>)</span> -&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">move</span>: <span class="function"><span class="params">(meters)</span> -&gt;</span></span><br><span class="line">    alert <span class="property">@name</span> + <span class="string">" moved <span class="subst">#&#123;meters&#125;</span>m."</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line">  <span class="attribute">move</span>: <span class="function">-&gt;</span></span><br><span class="line">    alert <span class="string">"Slithering..."</span></span><br><span class="line">    <span class="keyword">super</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Horse</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line">  <span class="attribute">move</span>: <span class="function">-&gt;</span></span><br><span class="line">    alert <span class="string">"Galloping..."</span></span><br><span class="line">    <span class="keyword">super</span> <span class="number">45</span></span><br><span class="line"></span><br><span class="line">sam = <span class="keyword">new</span> Snake <span class="string">"Sammy the Python"</span></span><br><span class="line">tom = <span class="keyword">new</span> Horse <span class="string">"Tommy the Palomino"</span></span><br><span class="line"></span><br><span class="line">sam.move()</span><br><span class="line">tom.move()</span><br></pre></td></tr></table></figure>
<p>这是官网的例子，麻麻再也不用担心我在 JS 里使用类和继承了 T_T。</p>
<ul>
<li>consturctor 函数为类的构造函数。在 <code>new</code> 的时候调用，可以重写它。</li>
<li><code>::</code> 就和 JS 里的 <code>prototype</code> 一样</li>
</ul>
<h2 id="很多语法糖">很多语法糖</h2><p>我对「语法糖」的理解就是让代码的读写更简单。</p>
<p>CoffeeScript 中添加了一些关键字，如 <code>unless when then until do</code> 等。不仅如此，CoffeeScript 引入了很多<strong>别名</strong>来代替一些关键字：</p>
<table>
<thead>
<tr>
<th>别名</th>
<th>对应关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td>is</td>
<td>===</td>
</tr>
<tr>
<td>isnt</td>
<td>!==</td>
</tr>
<tr>
<td>not</td>
<td>!</td>
</tr>
<tr>
<td>and</td>
<td>&amp;&amp;</td>
</tr>
<tr>
<td>or</td>
<td>&#124;&#124;</td>
</tr>
<tr>
<td>true, yes, on</td>
<td>true</td>
</tr>
<tr>
<td>false, no, off</td>
<td>false</td>
</tr>
<tr>
<td>@, this</td>
<td>this</td>
</tr>
<tr>
<td>of</td>
<td>in</td>
</tr>
<tr>
<td>in</td>
<td>no JS equivalent</td>
</tr>
</tbody>
</table>
<p>运用别名和新关键字，使代码读起来就和普通的英文一样。而且 CoffeeScript 还自动为你添加关键字，如函数最后的 <code>return</code>，<code>switch</code> 后自动添加 <code>break</code>（这种符合我们惰性的改进都是伟大的！ヽ( ^∀^)ﾉ）。</p>
<h2 id="安装及用法">安装及用法</h2><p>1.安装：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g coffee-<span class="keyword">script</span></span><br></pre></td></tr></table></figure></p>
<p>2.用法：</p>
<p>安装完成后，直接在命令行中输入 <code>coffee</code>，就进入了 CoffeeScript 的 REPL（Read-eval-print-loop） 模式，这是一个可交互的控制台，你可以输入 CoffeeScript 代码立即执行。如图：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5Ccoffeescript_noteBF073048-AB31-4C6C-84FD-BEDE15DB9E62.png" alt=""></p>
<p>也可以用<strong>指令</strong>编译 CoffeeScript 代码执行（<em>CoffeeScript 代码文件后缀名为 coffee</em>）：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coffee -c hello_world.coffee</span><br></pre></td></tr></table></figure>
<p>还有一些其他选项，我目前用的最多的是 <code>-o</code>、<code>-p</code>、<code>-w</code> 这三个。</p>
<p><code>-o</code> 即 <code>--output</code>，设置编译后 JS 文件输出到指定文件夹<br><code>-p</code> 即 <code>--print</code> ，直接在终端打印出编译后的 JS 代码<br><code>-w</code> 即 <code>--watch</code>，监视文件改变，一有变化就重新执行这条指令</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coffee -c hello_world.coffee -o ./js -w</span><br></pre></td></tr></table></figure>
<p>搭配起来就可以边写边编译到指定文件夹。</p>
<h2 id="其他">其他</h2><p>有篇文章<a href="http://amix.dk/blog/post/19612" target="_blank" rel="external">《CoffeeScript: The beautiful way to write JavaScript》</a>，对 JS 和 CoffeeScript 的论述很中肯。但文中对「什么才是优美的代码」的总结更让人印象深刻：</p>
<blockquote>
<ul>
<li>beautiful code uses the least amount of code to solve a given problem</li>
<li>beautiful code is readable and understandable</li>
<li>beautiful code is achieved not when there is nothing more to add, but when there is nothing left to take away (just like great designs)</li>
<li>the minimal length is a side-effect of beautiful code and not a goal or a measure</li>
</ul>
</blockquote>
<h3 id="参考文献">参考文献</h3><ul>
<li><a href="http://book.douban.com/subject/20509115/" target="_blank" rel="external">《CoffeeScript 程序设计》</a></li>
<li><a href="http://coffeescript.org/" target="_blank" rel="external">CoffeeScript 官网</a></li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近读了《CoffeeScript程序设计》的前半部分「核心 CoffeeScript」。对 CoffeeScript 也是有了初步的了解，本文只是我的随手笔记，并没有非常系统的总结 CoffeeScript 语法，想学习语法的同学可以看以下两份中文材料：</p>
<ul>
<li><a href="http://island205.github.io/tlboc/">CoffeeScript中文手册</a></li>
<li><a href="http://island205.github.io/coffeescript-cookbook.github.com/">CoffeeScript Cookbook</a></li>
</ul>
<h2 id="为什么要用_CoffeeScript？">为什么要用 CoffeeScript？</h2><ul>
<li>采用了 JavaScript 中的 Good Parts，符合 JS 最佳实践</li>
<li>代码简洁清晰，有很多语法糖</li>
</ul>
<h2 id="一些特性">一些特性</h2><h4 id="1-有意义的空格">1.有意义的空格</h4><p>CoffeeScript 移除了所有的大括号和分号。</p>
<p>JS 会自动在行尾添加<code>;</code>，但它又没有纯粹的设计为一款不需要加分号的语言，所以有时候会引起一些蛋疼的Bug。而 CoffeeScript 会在编译出的 JS 代码里每行都加<code>;</code>，很方便。</p>
<p>CoffeeScript 和 Python、Ruby 一样，采用强制缩进（Coffee的很多地方与 ruby 类似)，这种简洁，可读性又很强的代码，让人大爱。</p>]]>
    
    </summary>
    
      <category term="CoffeeScript" scheme="http://www.geekplux.com/tags/CoffeeScript/"/>
    
      <category term="Note" scheme="http://www.geekplux.com/tags/Note/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/tags/Web/"/>
    
      <category term="笔记" scheme="http://www.geekplux.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/categories/Web/"/>
    
      <category term="CoffeeScript" scheme="http://www.geekplux.com/categories/Web/CoffeeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS 最核心的几个概念]]></title>
    <link href="http://www.geekplux.com/2014/04/25/several_core_concepts_of_css.html"/>
    <id>http://www.geekplux.com/2014/04/25/several_core_concepts_of_css.html</id>
    <published>2014-04-25T12:28:33.000Z</published>
    <updated>2015-08-04T09:00:26.000Z</updated>
    <content type="html"><![CDATA[<p>本文将讲述 CSS 中最核心的几个概念，包括：盒模型、position、float等。这些是 CSS 的基础，也是最常用的几个属性，它们之间看似独立却又相辅相成。为了掌握它们，有必要写出来探讨一下，如有错误欢迎指正。</p>
<h1 id="元素类型">元素类型</h1><p>HTML 的元素可以分为两种：</p>
<ul>
<li>块级元素（block level element）</li>
<li>内联元素（inline element 有的人也叫它行内元素）</li>
</ul>
<p>两者的区别在于以下三点：</p>
<ol>
<li>块级元素会独占一行（即无法与其他元素显示在同一行内，除非你显式修改元素的 display 属性），而内联元素则都会在一行内显示。</li>
<li>块级元素可以设置 width、height 属性，而内联元素设置无效。</li>
<li>块级元素的 width 默认为 100%，而内联元素则是根据其自身的内容或子元素来决定其宽度。</li>
</ol>
<p><em>最常见块级元素应该是 <code>&lt;div&gt;</code> 吧，内联元素有 <code>&lt;span&gt;</code> <code>&lt;a&gt;</code> <code>&lt;img&gt;</code> 等等，完整的元素列表可以谷歌一下。</em></p>
<p>具体来说一下吧,</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.example</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>我们为 <code>&lt;div&gt;</code> 设置上面的样式，是有效果的，因为其是块级元素，而对 <code>&lt;span&gt;</code> 设置上面的样式是没用的。要想让 <code>&lt;span&gt;</code> 也可以改变宽高，可以通过设置 <code>display: block;</code> 来达到效果。当 display 的值设为 block 时，元素将以块级形式呈现；当 display 值设为 inline 时，元素将以内联形式呈现。</p>
<a id="more"></a>
<p>若既想让元素在行内显示，又能设置宽高，可以设置：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br></pre></td></tr></table></figure>
<p>inline-block 在我看来就是让元素对外呈内联元素，可以和其他元素共处与一行内；对内则让元素呈块级元素，可改变其宽高。</p>
<hr>
<p>HTML 代码是顺序执行的，一份无任何 CSS 样式的 HTML 代码最终呈现出的页面是根据元素出现的顺序和类型排列的。块级元素就从上到下排列，遇到内联元素则从左到右排列。这种无样式的情况下，元素的分布叫<strong>普通流</strong>，元素出现的位置应该叫<strong>正常位置</strong>（这是我瞎起的），同时<strong>所有元素会在页面上占据一个空间</strong>，空间大小由其盒模型决定。</p>
<h1 id="盒模型">盒模型</h1><p>页面上显示的每个元素（包括内联元素）都可以看作一个盒子，即盒模型( box model )。请看 Chrome DevTools 里的截图：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5Cthree_core_concepts_of_cssD65A4E60-A213-481C-86D6-A3929A0A8D28.png" alt=""></p>
<p>可以显而易见的看出盒模型由 4 部分组成。从内到外分别是：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">content</span> -&gt; <span class="attribute">padding</span> -&gt; <span class="attribute">border</span> -&gt; <span class="attribute">margin</span></span><br></pre></td></tr></table></figure>
<p>按理来说一个元素的宽度（高度以此类推）应该这样计算：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总宽度 = <span class="attribute">margin-left</span> + <span class="attribute">border-left</span> + <span class="attribute">padding-left</span> + <span class="attribute">width</span> + <span class="attribute">padding-right</span> + <span class="attribute">border-right</span> + <span class="attribute">margin-right</span></span><br></pre></td></tr></table></figure>
<p>但是不同浏览器（你没有猜错，就是那个与众不同的浏览器）对宽度的诠释不一样。符合 W3C 标准的浏览器认为一个元素的宽度只等于其 content 的宽度，其余都要额外算。于是你规定一个元素：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.example</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">5px</span> solid <span class="hexcolor">#000</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>则他最终的宽度应为：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">宽度 = width(200px) + padding(10px <span class="keyword">*</span> 2) + border(5px <span class="keyword">*</span> 2) + margin(20px <span class="keyword">*</span> 2) = 270px;</span><br></pre></td></tr></table></figure>
<p>而在 IE（低于IE9） 下，最终宽度为：</p>
<figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">宽度 </span>=<span class="string"> width(200px) + margin(20px * 2) = 240px;</span></span><br></pre></td></tr></table></figure>
<p>我个人觉得 IE 的更符合人类思维，毕竟 padding 叫内边距，边框算作额外的宽度也说不下去。W3C 最后为了解决这个问题，在 CSS3 中加了 box-sizing 这个属性。当我们设置 <code>box-sizing: border-box;</code> 时，border 和 padding 就被包含在了宽高之内，和 IE 之前的标准是一样的。所以，为了避免你同一份 css 在不同浏览器下表现不同，最好加上：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*, *<span class="pseudo">:before</span>, *<span class="pseudo">:after</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">-moz-box-sizing</span>:<span class="value"> border-box</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-box-sizing</span>:<span class="value"> border-box</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">box-sizing</span>:<span class="value"> border-box</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这里还有两种特殊情况：</p>
<ul>
<li>无宽度 —— 绝对定位（position: absolute;） 元素</li>
<li>无宽度 —— 浮动（float） 元素</li>
</ul>
<p>它们在页面上的表现均<strong>不占据空间</strong>（脱离普通流，感觉像浮在页面上层一样，移动它们不影响其他元素的定位）。这就涉及到另外两个核心概念 position 和 float。</p>
<h1 id="position">position</h1><p>position 这个属性决定了元素将如何定位。它的值大概有以下五种：</p>
<table>
<thead>
<tr>
<th style="text-align:left">position 值</th>
<th style="text-align:left">如何定位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">static</td>
<td style="text-align:left">position的<strong>默认值</strong>。元素将定位到它的正常位置（上文提到过），其实也就相当于没有定位。元素在页面上<strong>占据</strong>位置。<strong>不能</strong>使用 top right bottom left 移动元素位置。</td>
</tr>
<tr>
<td style="text-align:left">relative</td>
<td style="text-align:left">相对定位，相对于元素的正常位置来进行定位。元素在页面<strong>占据</strong>位置。<strong>可以</strong>使用 top right bottom left 移动元素位置。</td>
</tr>
<tr>
<td style="text-align:left">absolute</td>
<td style="text-align:left">绝对定位，相对于<em>最近一级的</em> <strong>定位不是 static 的</strong>父元素来进行定位。元素在页面<strong>不占据</strong>位置。 <strong>可以</strong>使用 top right bottom left 移动元素位置。</td>
</tr>
<tr>
<td style="text-align:left">fixed</td>
<td style="text-align:left">绝对定位，相对于<strong>浏览器窗口</strong>来进行定位。其余和 absolute 一样，相当于一种特殊的 absolute。</td>
</tr>
<tr>
<td style="text-align:left">inherit</td>
<td style="text-align:left">从父元素继承 position 属性的值。</td>
</tr>
</tbody>
</table>
<p>具体效果可以参考<a href="http://www.w3school.com.cn/cssref/pr_class_position.asp" target="_blank" rel="external">w3school的实例</a>，或者自己写一下就明白了。</p>
<p>每个网页都可以看成是由一层一层页面堆叠起来的，如下图所示。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5Cthree_core_concepts_of_css2012-08-14-59d1deed94-70c5-48bb-b2ff-8421d516a981.gif" alt="图片来自网络"></p>
<p>position 设置为 relative 的时候，元素依然在普通流中，位置是正常位置，你可以通过 left right 等移动元素。会影响其他元素的位置。</p>
<p>而当一个元素的 position 值为 absolute 或 fixed 的时候，会发生三件事：</p>
<ol>
<li>把该元素往 Z 轴方向移了一层，<strong>元素脱离了普通流，所以不再占据原来那层的空间</strong>，还会覆盖下层的元素。</li>
<li>该元素将<strong>变为块级元素</strong>，相当于给该元素设置了 <code>display: block;</code>（给一个内联元素，如 <code>&lt;span&gt;</code> ，设置 absolute 之后发现它可以设置宽高了）。</li>
<li>如果该元素是块级元素，元素的宽度由原来的 width: 100%（占据一行），变为了 auto。</li>
</ol>
<p>由此观之，当 position 设置为 absolute 或 fixed，就没必要设置 display 为 block 了。而且如果你不想覆盖下层的元素，可以设置 z-index 值 达到效果。</p>
<h1 id="float">float</h1><p>float 顾名思义，就是把元素浮动，它的取值一共有四个：left right none inherit，光看名字就懂了，无需多言。</p>
<p>最初的 float 只是用来实现<strong>文字环绕图片</strong>的效果，仅此而已。而现在 float 的应用已不止这个，前辈们也是写了无数博文来深入浅出的讲解它。<br>浅如：<br><a href="http://www.cnblogs.com/iyangyuan/archive/2013/03/27/2983813.html" target="_blank" rel="external">经验分享：CSS浮动(float,clear)通俗讲解</a> 篇幅不长，通俗易懂，可以看完这篇文章再回过头来看本文。<br>深如：<br><a href="http://www.zhangxinxu.com/wordpress/2010/01/css-float%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E3%80%81%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%8B%93%E5%B1%95%E4%B8%80/" target="_blank" rel="external">CSS float浮动的深入研究、详解及拓展(一)</a><br><a href="http://www.zhangxinxu.com/wordpress/2010/01/css-float%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E3%80%81%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%8B%93%E5%B1%95%E4%BA%8C/" target="_blank" rel="external">CSS float浮动的深入研究、详解及拓展(二)</a><br>从本质上讲解了 float 的原理。</p>
<p>我就不班门弄斧写原理了，只说说 float 的几个要点就行了：</p>
<ol>
<li>只有左右浮动，没有上下浮动。</li>
<li>元素设置 float 之后，它会<strong>脱离普通流</strong>（和 <code>position: absolute;</code> 一样），不再占据原来那层的空间，还会覆盖下一层的元素。</li>
<li>浮动不会对该元素的上一个兄弟元素有任何影响。</li>
<li>浮动之后，该元素的下一个兄弟元素会紧贴到该元素之前没有设置 float 的元素之后（很好理解，因为该元素脱离普通流了，或者说不在这一层了，所以它的下一个元素当然要补上它的位置）。</li>
<li>如果该元素的下一个兄弟元素中有内联元素（通常是文字），则会围绕该元素显示，形成类似「文字围绕图片」的效果。（可参考<a href="http://www.zhangxinxu.com/wordpress/2010/01/css-float%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E3%80%81%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%8B%93%E5%B1%95%E4%B8%80/" target="_blank" rel="external">CSS float浮动的深入研究、详解及拓展(一)</a>中的讲解）。这个我还是实践了一下的：<iframe width="100%" height="300" src="http://jsfiddle.net/9yAH8/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe></li>
<li>下一个兄弟元素如果也设置了同一方向的 float，则会紧随该元素之后显示。</li>
<li>该元素将<strong>变为块级元素</strong>，相当于给该元素设置了 <code>display: block;</code>（和<code>position: absolute;</code> 一样）。</li>
</ol>
<p>这里还有个东西，就是广为人知的——<strong>清除浮动</strong>。具体的方法五花八门，可以看这篇：<a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="external">那些年我们一起清除过的浮动</a>，我就不多说了。</p>
<p>写完本文后，脑子中又出现了一系列问题，假如 position 和 float 同时设置会出现什么问题？兼容性如何？哪个属性会被覆盖？还没来得及实践，改天以排列组合的方式看看到底是什么效果……如果有人实践过可以偷偷告诉我^_^</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文将讲述 CSS 中最核心的几个概念，包括：盒模型、position、float等。这些是 CSS 的基础，也是最常用的几个属性，它们之间看似独立却又相辅相成。为了掌握它们，有必要写出来探讨一下，如有错误欢迎指正。</p>
<h1 id="元素类型">元素类型</h1><p>HTML 的元素可以分为两种：</p>
<ul>
<li>块级元素（block level element）</li>
<li>内联元素（inline element 有的人也叫它行内元素）</li>
</ul>
<p>两者的区别在于以下三点：</p>
<ol>
<li>块级元素会独占一行（即无法与其他元素显示在同一行内，除非你显式修改元素的 display 属性），而内联元素则都会在一行内显示。</li>
<li>块级元素可以设置 width、height 属性，而内联元素设置无效。</li>
<li>块级元素的 width 默认为 100%，而内联元素则是根据其自身的内容或子元素来决定其宽度。</li>
</ol>
<p><em>最常见块级元素应该是 <code>&lt;div&gt;</code> 吧，内联元素有 <code>&lt;span&gt;</code> <code>&lt;a&gt;</code> <code>&lt;img&gt;</code> 等等，完整的元素列表可以谷歌一下。</em></p>
<p>具体来说一下吧,</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.example</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>我们为 <code>&lt;div&gt;</code> 设置上面的样式，是有效果的，因为其是块级元素，而对 <code>&lt;span&gt;</code> 设置上面的样式是没用的。要想让 <code>&lt;span&gt;</code> 也可以改变宽高，可以通过设置 <code>display: block;</code> 来达到效果。当 display 的值设为 block 时，元素将以块级形式呈现；当 display 值设为 inline 时，元素将以内联形式呈现。</p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://www.geekplux.com/tags/CSS/"/>
    
      <category term="Note" scheme="http://www.geekplux.com/tags/Note/"/>
    
      <category term="Summary" scheme="http://www.geekplux.com/tags/Summary/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/tags/Web/"/>
    
      <category term="总结" scheme="http://www.geekplux.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="笔记" scheme="http://www.geekplux.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/categories/Web/"/>
    
      <category term="CSS" scheme="http://www.geekplux.com/categories/Web/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[响应式设计简易指南（译）]]></title>
    <link href="http://www.geekplux.com/2014/04/06/simple_guide_to_responsive_design.html"/>
    <id>http://www.geekplux.com/2014/04/06/simple_guide_to_responsive_design.html</id>
    <published>2014-04-06T14:54:42.000Z</published>
    <updated>2015-01-04T11:59:54.000Z</updated>
    <content type="html"><![CDATA[<h4 id="为什么要使用响应式设计？">为什么要使用响应式设计？</h4><p>我们想让我们的网站通过响应用户的行为、设备的屏幕大小和屏幕方向，从而在所有设备上都能用。</p>
<h4 id="一个碎片化的世界">一个碎片化的世界</h4><p>截止2013年，有成千上万种不同的设备在浏览网页，所以我们不可能设计出适应所有屏幕大小的网页。相反，我们必须得采用一种更加流畅的方式去设计。</p>
<h4 id="移动优先">移动优先</h4><p>最近一个比较火的词叫移动优先。它的意思是，先为移动端设计样式，然后再根据需求去优化更大屏幕的样式。换句话说，假如你把移动端样式当成网站的默认样式，且以后不用去优化它，一步到位。那就更省事了！</p>
<blockquote>
<p>“假定默认使用一个灵活但简单的布局，你的确可以适配各种浏览器，但这还不算是完全做到了响应式布局。所以当我们谈论「移动优先」，实际上是在说「渐进增强」。” —Ethan Marcotte</p>
</blockquote>
<h2 id="用_Min-width_进行媒体查询（_Media_Queries_）">用 Min-width 进行媒体查询（ Media Queries ）</h2><p>现在来介绍一种特别的布局方式。 通过 min-width 来界定不同屏幕该如何布局。它能就近检测出不同设备的屏幕大小（即 media queries，可直译为媒体查询），比在样式表末尾或一个单独文件中处理更简单。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Small screens (default) */</span></span><br><span class="line"><span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">100%</span></span></span>; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Medium screens (640px) */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> (min-width: <span class="number">40rem</span>) </span>&#123;</span><br><span class="line">  <span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">112%</span></span></span>; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Large screens (1024px) */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> (min-width: <span class="number">64rem</span>) </span>&#123;</span><br><span class="line">  <span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">120%</span></span></span>; &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="步骤">步骤</h2><h4 id="1-_不是所有浏览器生而平等">1. 不是所有浏览器生而平等</h4><p>同一份 CSS，不同浏览器渲染出来的效果不一样。为了避免出现这种情况，你可以使用类似 <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="external">Normalize.css</a> 这种更好的 CSS 来帮助你实现跨浏览器显示。当然，你要把这份CSS放在你样式表最前面。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/css/normalize.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/css/grid.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-_在_Viewport_里加_Meta_标签">2. 在 Viewport 里加 Meta 标签</h4><p>在你 HTML 的 <code>head</code> 代码里添加 Meta 标签。它可以使 media queries 在不同设备上起作用</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-_CSS_盒模型">3. CSS 盒模型</h4><p>在 CSS 文件最顶端设置 box-sizing。运用 <code>*</code> 通用选择器使其应用到页面的每个元素上。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*, *<span class="pseudo">:before</span>, *<span class="pseudo">:after</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">-moz-box-sizing</span>:<span class="value"> border-box</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-box-sizing</span>:<span class="value"> border-box</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">box-sizing</span>:<span class="value"> border-box</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-_创建容器">4. 创建容器</h4><p>一个容器将包含页面所有标签，并控制页面最大宽度. 运用容器，让我们的响应式设计更进了一步！</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.container</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">48rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">90%</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Your Content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="5-_创建列">5. 创建列</h4><p>在移动优先里，列默认均是 <code>block</code> 级别的（可以占满整行的宽度）。不需要额外的样式！</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"column"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Your Content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="6-_创建列宽">6. 创建列宽</h4><p>在大屏中，用 <code>float: left</code> 将列水平排列。然后运用 padding 设置相邻两列之间的间隙，忘掉传统的margin吧。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"column half"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"column half"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">media</span> (min-width: <span class="number">40rem</span>) </span>&#123;</span><br><span class="line">  <span class="class">.column</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding-left</span>:<span class="value"> <span class="number">1rem</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding-right</span>:<span class="value"> <span class="number">1rem</span></span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="class">.column</span><span class="class">.full</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>; &#125;</span></span><br><span class="line">  <span class="class">.column</span><span class="class">.two-thirds</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">66.7%</span></span></span>; &#125;</span></span><br><span class="line">  <span class="class">.column</span><span class="class">.half</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>; &#125;</span></span><br><span class="line">  <span class="class">.column</span><span class="class">.third</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">33.3%</span></span></span>; &#125;</span></span><br><span class="line">  <span class="class">.column</span><span class="class">.fourth</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">24.95%</span></span></span>; &#125;</span></span><br><span class="line">  <span class="class">.column</span><span class="class">.flow-opposite</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>; &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="7-_创建行">7. 创建行</h4><p>列应该包裹在行内，以避免其他元素堆放在其旁边造成布局混乱。否则就会出现广为人知的 clearing 问题。出现之后可以使用由 <a href="http://nicolasgallagher.com/micro-clearfix-hack/" target="_blank" rel="external">Nicolas Gallagher</a> 发明的 <code>clearfix</code> 解决。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"column half"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"column half"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"column half"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"column half"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:before,</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">  content: " ";</span><br><span class="line">  display: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix &#123;</span><br><span class="line">  *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="相对流（_Flow_Opposite_）">相对流（ Flow Opposite ）</h4><p>给你想让它在移动端优先显示，而在大屏幕中右侧显示的列，添加 <code>.flow-opposite</code> 类。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"column half flow-opposite"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"column half"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Your Content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">media</span> (min-width: <span class="number">40rem</span>) </span>&#123;</span><br><span class="line">  <span class="class">.column</span><span class="class">.flow-opposite</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>; &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="延伸阅读">延伸阅读</h4><ul>
<li><a href="http://www.abookapart.com/products/mobile-first" target="_blank" rel="external">A Book Apart: Mobile First</a></li>
<li><a href="http://www.abookapart.com/products/responsive-web-design" target="_blank" rel="external">A Book Apart: Responsive Web Design</a></li>
<li><a href="http://blog.teamtreehouse.com/beginners-guide-to-responsive-web-design" target="_blank" rel="external">Beginner’s Guide to Responsive Web Design</a></li>
<li><a href="http://www.paulirish.com/2012/box-sizing-border-box-ftw/" target="_blank" rel="external">Box-sizing: Border-box FTW</a></li>
<li><a href="http://dev.tutsplus.com/articles/quick-tip-dont-forget-the-viewport-meta-tag--webdesign-5972" target="_blank" rel="external">Don’t Forget the Viewport Meta Tag</a></li>
<li><a href="http://bradfrostweb.com/blog/mobile/the-many-faces-of-mobile-first/" target="_blank" rel="external">The Many Faces of ‘Mobile First’</a></li>
<li><a href="http://fuseinteractive.ca/blog/understanding-humble-clearfix" target="_blank" rel="external">Understanding the Humble Clearfix</a></li>
</ul>
<h4 id="参考文献">参考文献</h4><ul>
<li><a href="http://opensignal.com/reports/fragmentation-2013/" target="_blank" rel="external">Android Fragmentation Visualized</a></li>
<li><a href="http://daneden.github.io/animate.css/" target="_blank" rel="external">Animate.css</a></li>
<li><a href="http://developer.mozilla.org/en-US/docs/Web/CSS/box_model" target="_blank" rel="external">Box Model</a></li>
<li><a href="http://developers.google.com/chrome-developer-tools/" target="_blank" rel="external">Chrome Developer Tools</a></li>
<li><a href="https://gist.github.com/aekaplan" target="_blank" rel="external">Code samples by GitHub Gist</a></li>
<li><a href="http://en.wikipedia.org/wiki/Internet_Explorer_box_model_bug" target="_blank" rel="external">Internet Explorer Box Model</a></li>
<li><a href="http://coding.smashingmagazine.com/2009/04/22/progressive-enhancement-what-it-is-and-how-to-use-it/" target="_blank" rel="external">Progressive Enhancement</a></li>
</ul>
<h2 id="（译文完）">（译文完）</h2><p>这是我最近翻译的一篇我觉得非常不错的指南。</p>
<ul>
<li><a href="http://www.adamkaplan.me/grid" target="_blank" rel="external">原文地址</a></li>
<li><a href="http://geekplux.github.io/grid" target="_blank" rel="external">中文版地址</a></li>
<li><a href="https://github.com/aekaplan/grid" target="_blank" rel="external">原 Github 地址</a></li>
<li><a href="https://github.com/geekplux/grid" target="_blank" rel="external">中文版 Github 地址</a></li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="为什么要使用响应式设计？">为什么要使用响应式设计？</h4><p>我们想让我们的网站通过响应用户的行为、设备的屏幕大小和屏幕方向，从而在所有设备上都能用。</p>
<h4 id="一个碎片化的世界">一个碎片化的世界</h4><p>截止2013年，有成千上万种不同的设备在浏览网页，所以我们不可能设计出适应所有屏幕大小的网页。相反，我们必须得采用一种更加流畅的方式去设计。</p>
<h4 id="移动优先">移动优先</h4><p>最近一个比较火的词叫移动优先。它的意思是，先为移动端设计样式，然后再根据需求去优化更大屏幕的样式。换句话说，假如你把移动端样式当成网站的默认样式，且以后不用去优化它，一步到位。那就更省事了！</p>
<blockquote>
<p>“假定默认使用一个灵活但简单的布局，你的确可以适配各种浏览器，但这还不算是完全做到了响应式布局。所以当我们谈论「移动优先」，实际上是在说「渐进增强」。” —Ethan Marcotte</p>
</blockquote>
<h2 id="用_Min-width_进行媒体查询（_Media_Queries_）">用 Min-width 进行媒体查询（ Media Queries ）</h2><p>现在来介绍一种特别的布局方式。 通过 min-width 来界定不同屏幕该如何布局。它能就近检测出不同设备的屏幕大小（即 media queries，可直译为媒体查询），比在样式表末尾或一个单独文件中处理更简单。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Small screens (default) */</span></span><br><span class="line"><span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">100%</span></span></span>; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Medium screens (640px) */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> (min-width: <span class="number">40rem</span>) </span>&#123;</span><br><span class="line">  <span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">112%</span></span></span>; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Large screens (1024px) */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> (min-width: <span class="number">64rem</span>) </span>&#123;</span><br><span class="line">  <span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">120%</span></span></span>; &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Guide" scheme="http://www.geekplux.com/tags/Guide/"/>
    
      <category term="Responsive Design" scheme="http://www.geekplux.com/tags/Responsive-Design/"/>
    
      <category term="Translation" scheme="http://www.geekplux.com/tags/Translation/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/tags/Web/"/>
    
      <category term="入门" scheme="http://www.geekplux.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="译文" scheme="http://www.geekplux.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/categories/Web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初识 TDD]]></title>
    <link href="http://www.geekplux.com/2014/03/21/understand_tdd.html"/>
    <id>http://www.geekplux.com/2014/03/21/understand_tdd.html</id>
    <published>2014-03-20T16:20:09.000Z</published>
    <updated>2015-01-04T12:01:30.000Z</updated>
    <content type="html"><![CDATA[<p>最近团队进驻了 Innospace（一个创业孵化基地），感觉一切要走上正轨的节奏。每周 Innospace 会提供一些来自业内大牛的创业和技术方面的培训指导，活动也非常多。感谢我的实习团队，让我有机会可以学到更多的东西。今天的主题是 TDD（测试驱动开发），对我来说这个东西不仅是新鲜的，还是陌生的，所以我也是认真记了记，顺便整理成文。</p>
<h1 id="神马是_TDD">神马是 TDD</h1><p>维基百科上是这样说的：测试驱动开发（Test-driven development）是极限编程中倡导的程序开发方法，以其倡导<strong>先写测试程序，然后编码实现其功能</strong>得名。</p>
<p>好吧，上面那段翻译的真是让人捉急，人家原文是这样的：</p>
<blockquote>
<p>Test-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle: first the developer writes an (initially failing) automated test case that defines a desired improvement or new function, then produces the minimum amount of code to pass that test, and finally refactors the new code to acceptable standards. </p>
</blockquote>
<p>看完英文应该比较好理解。通俗点就是：<strong>先写测试，再写只能让测试通过的代码，然后不停的循环这两个步骤，直到重构出满足需求的代码</strong>。以每个测试来推动整个开发的进行，这样有助于编写简洁和高质量的代码，并加速开发过程。</p>
<a id="more"></a>
<h1 id="TDD_流程">TDD 流程</h1><p><img src="http://upload.wikimedia.org/wikipedia/en/9/9c/Test-driven_development.PNG" alt=""></p>
<ol>
<li>先写一个测试，覆盖的需求很少</li>
<li>检查是否运行失败</li>
<li>编写能通过这个测试的代码</li>
<li>运行该测试</li>
<li>如果测试通过，则写新的测试，覆盖更多需求；如果测试没有通过，则更改代码直到通过</li>
<li>重构代码，使其能通过新写的测试</li>
<li>重复第 5 步</li>
<li>重复第 6 步<br>……</li>
</ol>
<h1 id="一个好的_Test_Case_应有下列特点：">一个好的 Test Case 应有下列特点：</h1><ul>
<li>快    —天下武功，唯快不破</li>
<li>独立    —不依赖于其他的测试用例的输出结果</li>
<li>可读    —基本上别人一看你的代码就知道是在测试什么功能，都不用写注释</li>
<li>完整    —包括目的，输入，预期结果</li>
<li>可重复    —无论谁测试结果都一样，且可以根据之前的测试编写下一个测试</li>
<li>一个assert    —只有一个判断结果，准确、简洁</li>
</ul>
<p>要实现前两点，则测试用例就不能涉及到文件、数据库、网络、环境（第三方类库）等。</p>
<h1 id="感受">感受</h1><p>TDD 作为一种敏捷开发方式，越来越为人所吹。毕竟敏捷开发越来越流行，所以 TDD 也是越来越被人吹捧。而且整个 TDD 开发过程看起来效果非常棒，尤其是在敏捷教练现场演示了一遍之后（果然例子理解起来永远比理论容易）。感觉是把大事化小，逐步解决。</p>
<p>不过，任何东西都有利有弊。比如，测试的范围就是个很麻烦的问题，怎么才能写出一个好的测试用例。既不会覆盖的需求太多，又不会覆盖的太少……</p>
<p>不管怎样，还是学到了东西，非常感谢两位敏捷教练。</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近团队进驻了 Innospace（一个创业孵化基地），感觉一切要走上正轨的节奏。每周 Innospace 会提供一些来自业内大牛的创业和技术方面的培训指导，活动也非常多。感谢我的实习团队，让我有机会可以学到更多的东西。今天的主题是 TDD（测试驱动开发），对我来说这个东西不仅是新鲜的，还是陌生的，所以我也是认真记了记，顺便整理成文。</p>
<h1 id="神马是_TDD">神马是 TDD</h1><p>维基百科上是这样说的：测试驱动开发（Test-driven development）是极限编程中倡导的程序开发方法，以其倡导<strong>先写测试程序，然后编码实现其功能</strong>得名。</p>
<p>好吧，上面那段翻译的真是让人捉急，人家原文是这样的：</p>
<blockquote>
<p>Test-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle: first the developer writes an (initially failing) automated test case that defines a desired improvement or new function, then produces the minimum amount of code to pass that test, and finally refactors the new code to acceptable standards. </p>
</blockquote>
<p>看完英文应该比较好理解。通俗点就是：<strong>先写测试，再写只能让测试通过的代码，然后不停的循环这两个步骤，直到重构出满足需求的代码</strong>。以每个测试来推动整个开发的进行，这样有助于编写简洁和高质量的代码，并加速开发过程。</p>]]>
    
    </summary>
    
      <category term="Agile Development" scheme="http://www.geekplux.com/tags/Agile-Development/"/>
    
      <category term="Note" scheme="http://www.geekplux.com/tags/Note/"/>
    
      <category term="笔记" scheme="http://www.geekplux.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Agile Development" scheme="http://www.geekplux.com/categories/Agile-Development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Collapsing margins——合并的外边距]]></title>
    <link href="http://www.geekplux.com/2014/03/14/collapsing_margins.html"/>
    <id>http://www.geekplux.com/2014/03/14/collapsing_margins.html</id>
    <published>2014-03-14T13:10:19.000Z</published>
    <updated>2015-08-04T08:59:10.000Z</updated>
    <content type="html"><![CDATA[<p>昨天在写 CSS 时遇到一个小问题，困扰了我好长时间，最后 Google 之，发现早有前人踩过此坑。为免以后再掉进坑，记下来比较好。</p>
<p>昨天遇到的问题是这样的。我设置了一对父子元素如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"parent"</span>&gt;</span>Parent</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"children"</span>&gt;</span>Children</span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>它们的样式如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.parent</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">80px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> yellow</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.children</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">80px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> red</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.divider</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">1px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> black</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>产生的效果如图所示：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CCollapsing%20margins%20%E5%90%88%E5%B9%B6%E7%9A%84%E5%A4%96%E8%BE%B9%E8%B7%9D%5CScreen%20Shot%202014-03-14%20at%209.13.00%20PM.png" alt=""></p>
<p>为什么分割线跑到了 Children 里面？这两个父子元素都设置了 <code>margin-bottom</code>，加起来应该是 30px，为什么现在成了 20px？种种疑问在我脑中盘旋。刚开始以为是万恶的 <code>position</code>，但是我把所有能想到的属性排列组合都设置了一遍，发现还是不行。果断 Google，才知道这个问题由来已久……</p>
<a id="more"></a>
<h1 id="collapsed_margin">collapsed margin</h1><p>关于collapsing-margin，有 <a href="http://www.w3.org/TR/CSS21/box.html#collapsing-margins" target="_blank" rel="external">W3C 的官方介绍</a>：</p>
<blockquote>
<p>In CSS, the adjoining margins of two or more boxes (which might or might not be siblings) can combine to form a single margin. Margins that combine this way are said to collapse, and the resulting combined margin is called a <strong>collapsed margin</strong>.</p>
</blockquote>
<p>在CSS中，<strong>两个或多个毗邻（父子元素或兄弟元素）的普通流中的块元素垂直方向上的 margin 会发生叠加</strong>。这种方式形成的外边距即可称为外边距叠加(collapsed margin)。</p>
<ul>
<li>何为毗邻：是指没有被非空内容、padding、border 或 clear 分隔开。</li>
<li>何为普通流：除浮动（ float ）、绝对定位（ absolute ）外的代码即为普通流。</li>
</ul>
<p>好吧，这下理解了，原来 <strong>挨着的、且没有任何东西分割的</strong> 两个普通元素会在垂直方向上合并 margin。我们可以想象出有 4 种情况会发生合并，看图比较直观（图来自网络）：</p>
<ul>
<li>兄弟元素</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CCollapsingct_css_margin_collapsing_example_1.gif" alt=""></p>
<ul>
<li>父子元素</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CCollapsingct_css_margin_collapsing_example_2.gif" alt=""></p>
<ul>
<li>空元素</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CCollapsingct_css_margin_collapsing_example_3.gif" alt=""></p>
<ul>
<li>以上三种混合</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CCollapsingct_css_margin_collapsing_example_4.gif" alt=""></p>
<p>到底怎么才算毗邻，其实<a href="http://www.w3.org/TR/CSS21/box.html#collapsing-margins" target="_blank" rel="external">官网</a>对于<strong>毗邻</strong>作了很详细的解释（<em>保证你看完会晕</em>）：</p>
<p>首先是一个<strong>大前提</strong>：元素之间没有被非空内容、padding、border 或 clear 分隔开。然后有下面几种情况算是毗邻：</p>
<blockquote>
<ul>
<li><p>top margin of a box and top margin of its first in-flow child</p>
<p>  一个元素的 margin-top 和它的第一个子元素的 margin-top</p>
</li>
<li><p>bottom margin of box and top margin of its next in-flow following sibling</p>
<p>  普通流中一个元素的 margtin-bottom 和它的紧邻的兄弟元素的的 margin-top</p>
</li>
<li><p>bottom margin of a last in-flow child and bottom margin of its parent if the parent has ‘auto’ computed height</p>
<p>  一个元素（ height 为 auto ）的 margin-bottom 和它的最后一个子元素的margin-bottom</p>
</li>
<li><p>top and bottom margins of a box that does not establish a new block formatting context and that has zero computed ‘min-height’, zero or ‘auto’ computed ‘height’, and no in-flow children</p>
<p>  一个没有创建 BFC、没有子元素、height 为0的元素自身的 margin-top 和 margin-bottom</p>
</li>
</ul>
</blockquote>
<p>不管你晕不晕，反正我晕了……</p>
<h1 id="如何避免">如何避免</h1><p>避免外边距叠加，只要破坏它的 4 个必要条件（2个或多个、毗邻、垂直方向、普通流）中的一个即可。下面是<a href="http://www.w3.org/TR/CSS21/box.html#collapsing-margins" target="_blank" rel="external">官网</a>不构成外边距叠加的各种情况。</p>
<blockquote>
<ul>
<li>浮动元素和其他任何元素之间不发生外边距叠加 (包括和它的子元素).</li>
<li>创建了 BFC 的元素不会和它的子元素发生外边距叠加</li>
<li>绝对定位元素和其他任何元素之间不发生外边距叠加(包括和它的子元素).</li>
<li>inline-block 元素和其他任何元素之间不发生外边距叠加 (包括和它的子元素).</li>
<li>普通流中的块级元素的 margin-bottom 永远和它相邻的下一个块级元素的 margin-top 叠加（除非相邻的兄弟元素clear）</li>
<li>普通流中的块级元素（没有 border-top、没有 padding-top ）的 margin-top 和它的第一个普通流中的子元素（没有 clear ）发生 margin-top 叠加</li>
<li>普通流中的块级元素（ height 为 auto、min-height 为 0、没有 border-bottom、没有 padding-bottom ）和它的最后一个普通流中的子元素（没有自身发生 margin 叠加或 clear ）发生 margin-bottom 叠加</li>
<li>如果一个元素的 min-height 为 0、没有 border、没有 padding、高度为 0 或者 auto、不包含子元素，那么它自身的外边距会发生叠加</li>
</ul>
</blockquote>
<p>同样会看晕，总结下来，我们<strong>最好的办法是</strong>：</p>
<ul>
<li>为父元素设置 BFC 或 padding 或 border</li>
<li>兄弟元素间设置 float 或 inline-block 或 absolute</li>
<li>写结构的时候最好用一个方向，要不都 top 要不都 bottom</li>
</ul>
<p>整个问题解决下来，我感觉其实并没有那么复杂的东西却被文档表述的很复杂，也可能是我英语比较差。而且在开发过程中许多细节我认为没必要去抠它，只要遇到时能迅速定位出原因（我昨天遇到这个问题，第一时间就无法定位，不停换关键词去搜才慢慢明白，还是经验少啊），就可以依靠 Google 搜索出解决方案，这样可以保证开发效率。如果想深入了解，还是抽业余时间吧……下面的文章可供参考（如怎么计算 margin 的最终值）。网上的资源太丰富了，感谢这些前辈。</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/CSS/margin_collapsing" target="_blank" rel="external">外边距合并</a></li>
<li><a href="http://blog.csdn.net/yuanxin1113/article/details/8829170" target="_blank" rel="external">子元素的margin-top与父元素合并的问题</a></li>
<li><a href="http://css-tricks.com/almanac/properties/m/margin/" target="_blank" rel="external">Collapsing margins</a></li>
<li><a href="http://www.w3.org/TR/CSS21/box.html#collapsing-margins" target="_blank" rel="external">Box model</a></li>
<li><a href="http://www.w3help.org/zh-cn/kb/006/" target="_blank" rel="external">CSS 框模型( Box module )</a>  —- 涉及如何计算合并后的 margin 值</li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>昨天在写 CSS 时遇到一个小问题，困扰了我好长时间，最后 Google 之，发现早有前人踩过此坑。为免以后再掉进坑，记下来比较好。</p>
<p>昨天遇到的问题是这样的。我设置了一对父子元素如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"parent"</span>&gt;</span>Parent</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"children"</span>&gt;</span>Children</span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>它们的样式如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.parent</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">80px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> yellow</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.children</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">80px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> red</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.divider</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">1px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> black</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>产生的效果如图所示：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CCollapsing%20margins%20%E5%90%88%E5%B9%B6%E7%9A%84%E5%A4%96%E8%BE%B9%E8%B7%9D%5CScreen%20Shot%202014-03-14%20at%209.13.00%20PM.png" alt=""></p>
<p>为什么分割线跑到了 Children 里面？这两个父子元素都设置了 <code>margin-bottom</code>，加起来应该是 30px，为什么现在成了 20px？种种疑问在我脑中盘旋。刚开始以为是万恶的 <code>position</code>，但是我把所有能想到的属性排列组合都设置了一遍，发现还是不行。果断 Google，才知道这个问题由来已久……</p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://www.geekplux.com/tags/CSS/"/>
    
      <category term="Note" scheme="http://www.geekplux.com/tags/Note/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/tags/Web/"/>
    
      <category term="笔记" scheme="http://www.geekplux.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/categories/Web/"/>
    
      <category term="CSS" scheme="http://www.geekplux.com/categories/Web/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[菜鸟级 Mac 配置（二）]]></title>
    <link href="http://www.geekplux.com/2014/03/03/mac_configuration_2.html"/>
    <id>http://www.geekplux.com/2014/03/03/mac_configuration_2.html</id>
    <published>2014-03-03T05:50:50.000Z</published>
    <updated>2015-08-04T08:59:44.000Z</updated>
    <content type="html"><![CDATA[<p>这一篇该讲讲我自己搭建开发环境遇到的事了。</p>
<p>其实这第二篇我前两天就写了一大半，我明明记得随手 Command+S 了，不过，我貌似把保存好的文件给删掉了……真是自作孽不可活，只能重新写一遍 T_T。</p>
<ul>
<li><strong>Xcode</strong></li>
</ul>
<p>虽然身为一个菜鸟，但 Xcode 的大名早就如雷贯耳，毕竟是苹果亲生的，无论看起来还是用起来都非常迷人。第一次打开 App Store 就在很显著的位置看到了它，果断点了安装。结果发现有 2G 多，耐心等着下完（其实我特别想吐槽我这儿 50KB/s 的网速！）。</p>
<p>为什么 Xcode 必装？因为有编译的地方就有它。所以这里还要装一个 Command line tools，基本方法是打开 Xcode，找到 Preferences—Downloads—Components，在里面找到它并安装。如果你找不到，那可以在命令行输入：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>
<p>这时会弹出一个选项框，问你是去下载 Xcode 还是直接安装，选择安装。</p>
<ul>
<li><strong>brew</strong></li>
</ul>
<p>我以前并木有听过 Homebrew（毕竟第一次用 Mac），但我看几篇 Mac 教程都提到它，于是去下载来尝试一下。果然群众的眼光是雪亮的，自从用了 brew 感觉上五楼都不喘气了……有了它，可以方便的管理工具包，常用的命令有：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew install xxx</span><br><span class="line">brew uninstall xxx</span><br><span class="line">brew list</span><br><span class="line">brew update xxx</span><br></pre></td></tr></table></figure>
<p>都是一句话，非常给力。不得不佩服 Ruby 社区的大神们，简直造福人类。</p>
<a id="more"></a>
<p>去 Homebrew 的官网是 <a href="http://brew.sh/" target="_blank" rel="external">bew.sh</a>，找到它的安装代码：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby <span class="operator">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)</span>"</span></span><br></pre></td></tr></table></figure>
<p>copy 到命令行，回车，搞定！</p>
<p>还有个东西叫 Homebrew-Cask，谁用谁知道。</p>
<ul>
<li><strong>oh-my-zsh</strong></li>
</ul>
<p>Mac 自带了很多 Shell，通过下面的命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>
<p>可以看到如下列表：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure>
<p>系统默认的是 bash，但 zsh 才是其中最犀利的，被称为「终极 Shell」。而且一位国外特别有（wu）才（liao）的程序员为 zsh 量身定做了一套配置方案叫 <strong>oh-my-zsh</strong>，实在是对我等小白用心良苦，我不能辜负他的这片心意啊。</p>
<p>首先，通过</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh <span class="operator">-s</span> /bin/zsh</span><br></pre></td></tr></table></figure>
<p>把默认 Shell 换为 zsh。然后用下面的两句（任选其一）可以自动安装 oh-my-zsh：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure>
<p>剩下的配置就参考我灰常喜爱的池老师的文章吧—— <a href="http://macshuo.com/?p=676" target="_blank" rel="external">终极 Shell</a></p>
<ul>
<li><strong>iTerm2</strong></li>
</ul>
<p>据说，这货和 zsh 配合起来，特别酷炫！于是我去官网下载，然后飞速安装，迫不及待的打开，发现也没什么两样嘛。但在我把下面的快捷键都试了一遍后，发现这些小功能确实酷炫：</p>
<ol>
<li>分窗口操作：shift+command+d（横向）command+d（竖向）</li>
<li>查找和粘贴：command+f，呼出查找功能，tab 键选中找到的文本，option+enter 粘贴</li>
<li>自动完成：command+ 根据上下文呼出自动完成窗口，上下键选择</li>
<li>粘贴历史：shift+command+h</li>
<li>回放功能：option+command+b</li>
<li>全屏：command+enter</li>
<li>光标去哪了？ command+/</li>
<li>Expose Tabs：option+command+e</li>
</ol>
<p>下图是有多标签页和多窗口的 iTerm2：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E8%8F%9C%E9%B8%9F%E7%BA%A7Mac%E9%85%8D%E7%BD%AE%5CScreen%20Shot%202014-02-26%20at%205.53.11%20PM.png" alt=""></p>
<ul>
<li><strong>Apache</strong></li>
</ul>
<p>Mac 自带 Apache ，可以使用以下命令控制它：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl start</span><br><span class="line">sudo apachectl restart</span><br><span class="line">sudo apachectl stop</span><br></pre></td></tr></table></figure>
<p>所以，唯一修改的就是它的站点目录了。Mac 下 Apache 的默认站点目录是</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DocumentRoot <span class="string">"/Library/WebServer/Documents"</span></span><br></pre></td></tr></table></figure>
<p>我没有修改它，而是做了个软链接，我觉得这样更方便。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln <span class="operator">-s</span> 「你想更换的目录」 /Library/WebServer/Documents</span><br></pre></td></tr></table></figure>
<p>重启生效。</p>
<ul>
<li><strong>PHP</strong></li>
</ul>
<p>Mac 也自带了 PHP，你只需配置 <code>php.ini</code> 文件就好了。具体配置可以网上搜索。</p>
<p><em>但这里我想说一件我遇到的蛋疼问题：之前我的 Mac 默认语音是中文，什么环境都配置好之后，我觉得还是换成英文版比较带劲（no zuo no die），就设置更换并重启了电脑。突然发现 Web 项目首页报错，数据库错误。我排查了好长时间，最后发现原来是因为更换了英文版之后，电脑的<strong>默认时区</strong>更换了，导致 PHP 出错，进而导致数据库也有了问题。所以在 <code>php.ini</code> 里把 date.timezone = Asia/Shanghai 吧。。。</em></p>
<ul>
<li><strong>MySQL</strong></li>
</ul>
<p>Mac 终于不自带 MySQL 了，但是我们有 brew。第一步</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure>
<p>安装成功后，第二步，用下面语句设置：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> TMPDIR</span><br><span class="line">mysql_install_db --verbose --user=`whoami` --basedir=<span class="string">"<span class="variable">$(brew --prefix mysql)</span>"</span> --datadir=/usr/<span class="built_in">local</span>/var/mysql --tmpdir=/tmp</span><br></pre></td></tr></table></figure>
<p>第三步，启动 MySQL:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql.server start</span><br></pre></td></tr></table></figure>
<p>第四步，输入以下脚本。根据提示完成配置（虽然是全英文，但要认真看）。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/Cellar/mysql/<span class="number">5.5</span>.<span class="number">10</span>/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>按这四步来安装，我觉得应该是万无一失的。否则总会碰到一些比较蛋疼的问题，比如 root 用户的密码都设置不了（不知道是不是我一个人碰到），出现的错误提示现在忘了，不过根据 StackOverflow 上<a href="http://stackoverflow.com/questions/4359131/brew-install-mysql-on-mac-os" target="_blank" rel="external">这篇帖子</a>的方法可以重新安装。刚才的那四步也是这位程序员写的，清晰易懂。</p>
<p><em>后来还是由于我更换英文版，我发现数据库导入都成了乱码……（耳边又响起了 no zuo no die），原因是因为英文版又把默认编码改了……可以使用下面这句更改 MySQL 的默认编码：</em></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES <span class="string">'utf8'</span>;</span><br><span class="line"></span><br><span class="line">上面这一条就相当于下面的三句指令：</span><br><span class="line">SET character_<span class="built_in">set</span>_client = utf8;</span><br><span class="line">SET character_<span class="built_in">set</span>_results = utf8;</span><br><span class="line">SET character_<span class="built_in">set</span>_connection = utf8;</span><br></pre></td></tr></table></figure>
<p>至此，基本上我的环境都搭好了，编辑器当然用 Sublime Text 3。后来我还安装了一下 Android Studio，还是那个问题，第一次 Gradle 太慢了，在天朝还是下载离线的吧……</p>
<p>我对 Mac 还在探索中，如果你有什么好的 Mac 技巧，可以告诉我哦~</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这一篇该讲讲我自己搭建开发环境遇到的事了。</p>
<p>其实这第二篇我前两天就写了一大半，我明明记得随手 Command+S 了，不过，我貌似把保存好的文件给删掉了……真是自作孽不可活，只能重新写一遍 T_T。</p>
<ul>
<li><strong>Xcode</strong></li>
</ul>
<p>虽然身为一个菜鸟，但 Xcode 的大名早就如雷贯耳，毕竟是苹果亲生的，无论看起来还是用起来都非常迷人。第一次打开 App Store 就在很显著的位置看到了它，果断点了安装。结果发现有 2G 多，耐心等着下完（其实我特别想吐槽我这儿 50KB/s 的网速！）。</p>
<p>为什么 Xcode 必装？因为有编译的地方就有它。所以这里还要装一个 Command line tools，基本方法是打开 Xcode，找到 Preferences—Downloads—Components，在里面找到它并安装。如果你找不到，那可以在命令行输入：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>
<p>这时会弹出一个选项框，问你是去下载 Xcode 还是直接安装，选择安装。</p>
<ul>
<li><strong>brew</strong></li>
</ul>
<p>我以前并木有听过 Homebrew（毕竟第一次用 Mac），但我看几篇 Mac 教程都提到它，于是去下载来尝试一下。果然群众的眼光是雪亮的，自从用了 brew 感觉上五楼都不喘气了……有了它，可以方便的管理工具包，常用的命令有：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew install xxx</span><br><span class="line">brew uninstall xxx</span><br><span class="line">brew list</span><br><span class="line">brew update xxx</span><br></pre></td></tr></table></figure>
<p>都是一句话，非常给力。不得不佩服 Ruby 社区的大神们，简直造福人类。</p>]]>
    
    </summary>
    
      <category term="Development Environment" scheme="http://www.geekplux.com/tags/Development-Environment/"/>
    
      <category term="Mac" scheme="http://www.geekplux.com/tags/Mac/"/>
    
      <category term="Tool" scheme="http://www.geekplux.com/tags/Tool/"/>
    
      <category term="工具" scheme="http://www.geekplux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="开发环境" scheme="http://www.geekplux.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
      <category term="Tool" scheme="http://www.geekplux.com/categories/Tool/"/>
    
      <category term="Mac" scheme="http://www.geekplux.com/categories/Tool/Mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[菜鸟级 Mac 配置（一）]]></title>
    <link href="http://www.geekplux.com/2014/02/26/mac_configuration_1.html"/>
    <id>http://www.geekplux.com/2014/02/26/mac_configuration_1.html</id>
    <published>2014-02-26T13:14:15.000Z</published>
    <updated>2015-08-04T08:59:37.000Z</updated>
    <content type="html"><![CDATA[<p>前两天我的神机 MBP 终于到手了，虽然之前我已经见过 N 台 Macbook，但拆开包装的那一刻我还是被它惊艳了。新款比以前更薄了，感觉跟 air 的厚度相差无几（这货好意思叫 pro 么）。哈哈，作为一名第一次使用 Mac 的孩纸，我果然遇到了很多菜鸟级的问题，通过不断的 Google，基本都配置好了，现在来罗列一下。</p>
<h2 id="基础设置篇">基础设置篇</h2><ul>
<li><strong>触控板设置</strong></li>
</ul>
<p>体验了两天，MBP 的触控板真心好用，鼠标已被我打入冷宫。所以根据自己的习惯设置好触控板是第一步。我就改了两处：</p>
<ol>
<li>轻触改为单击</li>
<li>把双指滚动方向改为相反（不是自然方向）。如图：</li>
</ol>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E8%8F%9C%E9%B8%9F%E7%BA%A7Mac%E9%85%8D%E7%BD%AE%5CScreen%20Shot%202014-02-26%20at%204.09.11%20PM.png" alt=""></p>
<p><br></p>
<ul>
<li><strong>Finder设置</strong></li>
</ul>
<p>Finder—Preferences，把所有文件后缀名显示出来。（不显示出来木有安全感o(&gt;﹏&lt;)o）</p>
<a id="more"></a>
<ul>
<li><strong>自带词典和发音</strong></li>
</ul>
<p>Mac 自带的词典非常好用，默认是<strong>三个手指轻触</strong>触控板就可以自动翻译选中的单词。而且，你可以通过以下的设置，如图：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E8%8F%9C%E9%B8%9F%E7%BA%A7Mac%E9%85%8D%E7%BD%AE%5CScreen%20Shot%202014-02-26%20at%206.50.04%20PM.png" alt=""></p>
<p>就可以按 Option + Esc 让 Mac 把你选中的单词读出来。</p>
<p>个人觉得最重要的就是这三个配置了，其它就是换了换快捷键和壁纸……当然我后来把语言换成了<strong>英文版</strong>（这后来引发了一个蛋疼的小问题，下一篇讲）。</p>
<p>只要你把 Mac 的快捷键记牢（<a href="http://p2.zhimg.com/1e/d6/1ed6509202a411c9ce2387b153540b60_m.jpg" target="_blank" rel="external">参考这张图</a>），就能飞速的使用它了，真的是飞速！</p>
<h2 id="必备软件篇">必备软件篇</h2><p>Mac 下安装软件直接把 app 文件拖到 「应用程序」文件夹下就OK了。卸载就直接从该文件夹下删除就行。简单的令人发指……</p>
<ul>
<li><strong>神器 Alfred</strong></li>
</ul>
<p>当初在 Win 下，我用的是 launchy 用来快速启动软件。Mac 下的 Alfred 就是此类软件的神器。在 App Store 里找到它并安装。从此启动软件再也不需要去 Dock 和 Launchpad 里找了（具体使用的快捷键自己可以设置）。</p>
<p>但这只是 Alfred 的基本功能，其最厉害之处是可以通过 workflow 扩展，github 上有专门的项目来收集各种牛（wu）逼（liao）人士开发的 workflow <a href="https://github.com/hzlzh/AlfredWorkflow.com" target="_blank" rel="external">项目地址</a>、<a href="http://www.alfredworkflow.com/" target="_blank" rel="external">项目主页</a>。你可以通过 workflow 扩展各种有趣的功能。比如查天气、计算器这种……知乎上也讨论过：<a href="http://www.zhihu.com/question/20656680" target="_blank" rel="external">借助 Alfred 2.0 的 Workflows 功能可以做哪些好玩的事情</a></p>
<ul>
<li><strong>F.lux</strong></li>
</ul>
<p>这个软件的功能是根据当前的时间来调节<strong>屏幕的色温</strong>，以达到保护双眼的目的。虽然 Mac 明媚的屏幕很吸引人，但是为了我的眼睛，我还是装上了 F.lux，当初 Win 下我也是必装，还是我唯一允许开机启动的软件~~谁用谁知道。</p>
<ul>
<li><strong>XtraFinder</strong></li>
</ul>
<p>其实我就看中了它的<strong>多标签页</strong>的功能。</p>
<ul>
<li>QQ</li>
</ul>
<p>这好像不用解释。社交类还有Skype、Line、WeiboX、Twitter都很不错。</p>
<ul>
<li>DropBox</li>
</ul>
<p>自动后台同步，毫无违和感。</p>
<p>百度云盘其实也不错，当初还送了3T空间，可以同步些不是太重要但很大的文件。</p>
<ul>
<li>Chrome</li>
</ul>
<p>其实 Safari 也是极其好用的，但是为了跨平台，Chrome 就成了不二人选。Firefox 应该是多用来作开发用。</p>
<ul>
<li>MplayerX</li>
</ul>
<p>Mac 平台下比较流行的播放器。</p>
<ul>
<li>搜狗输入法</li>
</ul>
<p>我觉得搜狗就不错。</p>
<ul>
<li>Evernote &amp;&amp; Wiz</li>
</ul>
<p>之前一直是用 Wiz 的，主要是因为：</p>
<ol>
<li>Wiz 的多级目录不限层数，Evernote 最多三层。</li>
<li>Wiz 一个月的流量是 180M ，Evernote 是 60M。</li>
<li>Wiz 的排版比 Evernote 方便（个人认为）。</li>
</ol>
<p>Wiz 支持的导入格式有很多，还可以直接导入 Evernote 文件，但是导出就很渣了……把 Wiz 导出 HTML，再导入 Evernote 会出现没有标题等蛋疼现象。而且最关键的是 Wiz 的 Mac 版太丑了！！！所以开始用 Evernote 。</p>
<ul>
<li>Mou</li>
</ul>
<p>用 Markdown 写作必备，界面简洁好看，赏心悦目。</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E8%8F%9C%E9%B8%9F%E7%BA%A7Mac%E9%85%8D%E7%BD%AE%5CScreen%20Shot%202014-02-26%20at%207.39.31%20PM.png" alt=""></p>
<ul>
<li>CleanMyMac 2</li>
</ul>
<p>清理垃圾</p>
<ul>
<li>Pocket</li>
</ul>
<p>现在已经离不开它了，想看的文章随手往里一丢。手机那边会自动下载好。地铁上或其他闲着没事的时候就可以拿出来看，阅读体验非常好。</p>
<ul>
<li>迅雷</li>
</ul>
<p>这还用解释吗？</p>
<ul>
<li>Wunderlist</li>
</ul>
<p>TO DO 应用，适合比较忙的人使用。多平台，界面太赞！</p>
<ul>
<li>其他优秀App</li>
</ul>
<p>可以去这个<a href="https://github.com/hzlzh/Best-App" target="_blank" rel="external">项目主页</a>看看。</p>
<h2 id="感受">感受</h2><p>通过我这两天感受下来，我觉得<strong>跨平台</strong>已成了我选择软件最重要的标准，毕竟现在终端种类太多了。而对于 Mac ，我觉得它最迷人的一点是它简单，什么都简单，风格简单，操作简单。简单就容易专注，最大化窗口后，能让你专注于眼前的工作，而不像 Win 不停的有干扰源出现。你还可以设置几个不同的桌面，一个桌面专门用来娱乐，放QQ、微博等的窗口，另一个桌面专门用来创作型任务。</p>
<p>最后，以文章<a href="http://www.yangzhiping.com/psy/mac.html" target="_blank" rel="external">如何提高创作型任务的效率？（MAC版）</a>中的一段来说明 Mac 和 Win 的差异吧：</p>
<blockquote>
<p>因为心理学家诺曼的贡献与苹果在工业设计上的传统优势，Mac与Windows的最大不同是注意力。MACOSX以简洁的设计取胜，甚至强迫用户将注意力聚焦在当前工作之上。Windows系列操作系统设计，相对而言，缺少一个统一并且强硬执行下去的注意力法则。在Windows上，你可以看到大量分散你的注意力的软件设计，同时，在Windows上，格外泛滥你可能只需要20%功能，但是不得不受到其他80%的功能设计带来的诸如升级、数据维护等复杂操作的干扰。苹果公司作为一种与众不同的硅谷精神的“传销”头头，很好地维持了整个MAC生态链对用户注意力的关注，微软在这方面，则逊色较多，在Office系列中的全屏模式，往往你是阅读者而非创作者。</p>
</blockquote>
<p>下一篇主要讲一下我的开发环境配置……</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前两天我的神机 MBP 终于到手了，虽然之前我已经见过 N 台 Macbook，但拆开包装的那一刻我还是被它惊艳了。新款比以前更薄了，感觉跟 air 的厚度相差无几（这货好意思叫 pro 么）。哈哈，作为一名第一次使用 Mac 的孩纸，我果然遇到了很多菜鸟级的问题，通过不断的 Google，基本都配置好了，现在来罗列一下。</p>
<h2 id="基础设置篇">基础设置篇</h2><ul>
<li><strong>触控板设置</strong></li>
</ul>
<p>体验了两天，MBP 的触控板真心好用，鼠标已被我打入冷宫。所以根据自己的习惯设置好触控板是第一步。我就改了两处：</p>
<ol>
<li>轻触改为单击</li>
<li>把双指滚动方向改为相反（不是自然方向）。如图：</li>
</ol>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E8%8F%9C%E9%B8%9F%E7%BA%A7Mac%E9%85%8D%E7%BD%AE%5CScreen%20Shot%202014-02-26%20at%204.09.11%20PM.png" alt=""></p>
<p></br></p>
<ul>
<li><strong>Finder设置</strong></li>
</ul>
<p>Finder—Preferences，把所有文件后缀名显示出来。（不显示出来木有安全感o(&gt;﹏&lt;)o）</p>]]>
    
    </summary>
    
      <category term="Mac" scheme="http://www.geekplux.com/tags/Mac/"/>
    
      <category term="Tool" scheme="http://www.geekplux.com/tags/Tool/"/>
    
      <category term="工具" scheme="http://www.geekplux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Tool" scheme="http://www.geekplux.com/categories/Tool/"/>
    
      <category term="Mac" scheme="http://www.geekplux.com/categories/Tool/Mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS编写原则]]></title>
    <link href="http://www.geekplux.com/2014/02/20/css_written_principles.html"/>
    <id>http://www.geekplux.com/2014/02/20/css_written_principles.html</id>
    <published>2014-02-20T05:57:32.000Z</published>
    <updated>2015-08-04T08:59:28.000Z</updated>
    <content type="html"><![CDATA[<p>CSS写的好可以让网页瞬间高大上，但是再高大上的网站如果效率很低也不行，尤其是在近几年「用户体验」这个词烂大街以后。前两天自己写了几个页面的CSS，顺便拜读了很多关于CSS如何写的更好的文章，现在动手总结一下。</p>
<h2 id="权重">权重</h2><p>CSS中我个人觉得权重是个很需要掌握的概念。它决定哪一条样式将被应用在元素上，哪一条样式将被覆盖掉。众所周知，CSS选择器，最基本的有三种：</p>
<ul>
<li>id选择器</li>
<li>class选择器</li>
<li>标签选择器</li>
</ul>
<p>还有一种<strong>内联样式</strong>( inline-style )，是指直接在HTML代码中添加CSS样式。以上四种的权重顺序是：<strong>内联样式（1000）</strong> &gt; <strong>id选择器（100）</strong> &gt; <strong>class选择器（10）</strong> &gt; <strong>标签选择器（1）</strong>。括号内分别是它们的<strong>权重值</strong>！。举个栗子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color : #fff;"</span> <span class="attribute">id</span>=<span class="value">"example"</span> <span class="attribute">class</span>=<span class="value">"demo"</span>&gt;</span>栗子<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#example</span> <span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#000</span></span></span>;&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.dome</span> <span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>;&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">span</span> <span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value"> blue</span></span>;&#125;</span></span><br></pre></td></tr></table></figure>
<p>如果只有第四句来定义样式，则这个<code>&lt;span&gt;</code>是蓝色的，如果加上第三条语句，则变成了红色，第四句被覆盖掉了。如果用第二句，则变为黑色，第三句即被覆盖，以此类推如果用内联样式则<code>&lt;span&gt;</code>变成白色了。</p>
<p>像我这样的菜鸟刚开始滥用各类选择器，往往会出现想覆盖父元素样式的时候覆盖不了的情况，熟不知<strong>要想覆盖，必须让这条语句的权重值大于父元素</strong>（具体可以参考这篇文章<a href="http://www.w3cplus.com/css/css-specificity-things-you-should-know.html" target="_blank" rel="external">你应该知道的一些事情——CSS权重</a>）。</p>
<a id="more"></a>
<h3 id="尽量不要用id选择器">尽量不要用id选择器</h3><p>由于id选择器权重值过大的原因，我们要尽量少用它（内联样式估计没人会用了吧）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"example"</span> <span class="attribute">class</span>=<span class="value">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"son"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你使用id选择器</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#example</span> <span class="tag">span</span> <span class="rules">&#123;<span class="rule"><span class="attribute">background-color</span>:<span class="value"> blue</span></span>;&#125;</span></span><br></pre></td></tr></table></figure>
<p>则再写</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.son</span> <span class="rules">&#123;<span class="rule"><span class="attribute">background-color</span>:<span class="value"> red</span></span>;&#125;</span></span><br></pre></td></tr></table></figure>
<p>就没用了，甚至</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.parent</span> <span class="class">.son</span> <span class="rules">&#123;<span class="rule"><span class="attribute">background-color</span>:<span class="value"> red</span></span>;&#125;</span></span><br></pre></td></tr></table></figure>
<p>都没用。你必须用：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#example</span> <span class="class">.son</span> <span class="rules">&#123;<span class="rule"><span class="attribute">background-color</span>:<span class="value"> red</span></span>;&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>才能再改变它的背景色。这样远不如只用一个class轻松写意。尤其是#example下面层级多的话，代码就会越写越长，可见少使用id，多用class才是正道。而且id只能用一次，class可以重复使用。</p>
<h3 id="尽量不要多层级的选择器">尽量不要多层级的选择器</h3><p>当CSS写到后来，你可能会发现经常有类似这样的一长串代码出现：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#example</span> <span class="class">.content</span> <span class="class">.right</span> <span class="class">.tag</span> <span class="tag">span</span> <span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value"> blue</span></span>;&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>这主要还是因为你没有搞清权重的原因。每次你想为子元素重新定义样式时都要有个权重值大于父元素的一大串选择器。这样的代码不仅你看起来痛苦，浏览器看起来也痛苦（原因可参考这篇文章<a href="http://www.alloyteam.com/2012/10/high-performance-css/" target="_blank" rel="external">【高性能前端2】高性能CSS</a>）。</p>
<p>所以后代选择器不仅性能低下而且代码很脆弱：HTML代码和CSS代码严重耦合，HTML代码结构发生变化时，CSS也得修改，自己改起来都痛苦，更别说万一将来有人来接盘你的代码……你考虑过他的感受么T_T。还是那句话，用class，最多两三层选择器就搞定了！</p>
<p>其实还有个终极神器<code>!importants</code>。只要在样式语句后面加上这个就能覆盖<strong>之前</strong>和<strong>之后</strong>的一切样式！这意味着你再想把它覆盖是不可能的。当你都逼到用这个神器的时候，说明你的代码实在写的不敢恭维……你一定会有更好的解决方式的，所以尽量不要用<code>!importants</code>。</p>
<h2 id="精简">精简</h2><p>精简你的CSS代码可以提升你编写的速度，还能让代码看起来整洁、一目了然，节省时间和空间。</p>
<h3 id="使用复合语法">使用复合语法</h3><p>尽量使用复合语法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 糟糕的写法</span><br><span class="line">.someclass &#123;</span><br><span class="line">    background: #000;</span><br><span class="line">    background-image: url(../imgs/carrot.png);</span><br><span class="line">    background-position: bottom;</span><br><span class="line">    background-repeat: repeat-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 好的写法</span><br><span class="line">.someclass &#123;</span><br><span class="line">    background: #000 url(../imgs/carrot.png) repeat-x bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类似的还有<code>padding</code>、<code>margin</code>、<code>font</code>、<code>border</code>等。用复合语法可以精简代码，一目了然。</p>
<h3 id="减少重复">减少重复</h3><ul>
<li>利用CSS继承</li>
</ul>
<p>如果页面中父元素的多个子元素使用相同的样式，那最好把他们相同的样式定义在其父元素上，让它们继承这些CSS样式。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 糟糕的写法</span><br><span class="line">.example li &#123;font-family:Georgia, serif;&#125;</span><br><span class="line">.example p &#123;font-family:Georgia, serif;&#125;</span><br><span class="line">.example h1 &#123;font-family:Georgia, serif;&#125;</span><br><span class="line"></span><br><span class="line">// 好的写法</span><br><span class="line">.example &#123;font-family:Georgia, serif;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>利用分组选择器</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 糟糕的写法</span><br><span class="line">.someclass &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    background: blue;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.otherclass &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    background: blue;</span><br><span class="line">    font-size: 8px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 好的写法</span><br><span class="line">.someclass, .otherclass &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.someclass &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.otherclass &#123;</span><br><span class="line">    font-size: 8px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="移除没用的样式">移除没用的样式</h3><blockquote>
<p>移除无匹配的样式，有两个好处：</p>
<p>第一，删除无用的样式后可以缩减样式文件的体积，加快资源下载速度；</p>
<p>第二，对于浏览器而言，所有的样式规则的都会被解析后索引起来，即使是当前页面无匹配的规则。移除无匹配的规则，减少索引项，加快浏览器查找速度；</p>
</blockquote>
<h2 id="格式">格式</h2><h3 id="命名很重要">命名很重要</h3><p>程序猿最讨厌的事已经不是写文档了，而是<strong>命名</strong>。好的命名可以让你「见名思义」，不写注释也可以读懂；坏的命名会让你抓狂，你不得不用ctrl+F匹配它们……我还发现很多人都是根据HTML代码的结构去命名，如</p>
<pre><code>#header、 .<span class="attribute">content</span>、 .<span class="attribute">left</span>、 .<span class="attribute">right</span>
</code></pre><p>等等，这些并没有实际的意义，当HTML越来越复杂的时候，或者新人来接手的时候，就会时常摸不着头脑，难以调试和维护。所以我个人觉得应该多用具有实际意义的、可以见名思义的class命名。</p>
<h3 id="好看一点">好看一点</h3><p>代码的易读性和易维护性成正比。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 糟糕的写法</span><br><span class="line">.someclass-a, .someclass-b, .someclass-c, .someclass-d &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 好的写法</span><br><span class="line">.someclass-a,</span><br><span class="line">.someclass-b,</span><br><span class="line">.someclass-c,</span><br><span class="line">.someclass-d &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 更好看一点</span><br><span class="line">.someclass &#123;</span><br><span class="line">    background-image:</span><br><span class="line">        linear-gradient(#000, #ccc),</span><br><span class="line">        linear-gradient(#ccc, #ddd);</span><br><span class="line">    box-shadow:</span><br><span class="line">        2px 2px 2px #000,</span><br><span class="line">        1px 4px 1px 1px #ddd inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他">其他</h3><ul>
<li>注释：程序猿最讨厌的四件事：写注释、写文档、别人不写注释、别人不写文档……</li>
<li>单位： 到底是用<code>px</code>还是<code>em</code> —&gt;<a href="http://www.1z1b.com/one-blog-a-week/px-em-pt/" target="_blank" rel="external">CSS文字大小单位PX、EM、PT</a></li>
<li>兼容： IE你到底要闹哪样~`</li>
</ul>
<p>以下是大牛总结的一些CSS技巧：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2010/03/css_cookbook.html" target="_blank" rel="external">CSS使用技巧</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2010/03/cross-browser_css3_features.html" target="_blank" rel="external">CSS3常用功能的写法</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html" target="_blank" rel="external">CSS动画简介</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2009/03/css_selectors.html" target="_blank" rel="external">CSS选择器笔记</a></li>
</ul>
<p>学习CSS：</p>
<ul>
<li><a href="http://zh.learnlayout.com/" target="_blank" rel="external">学习CSS布局</a></li>
<li><a href="http://www.w3school.com.cn/" target="_blank" rel="external">w3school</a></li>
<li><a href="http://www.csszengarden.com/tr/chinese/" target="_blank" rel="external">CSS禅意花园</a></li>
</ul>
<p>手册：</p>
<ul>
<li><a href="http://css.doyoe.com/" target="_blank" rel="external">CSS参考手册</a></li>
</ul>
<p>工具：</p>
<ul>
<li><a href="http://csslint.net/" target="_blank" rel="external">CSS Lint</a></li>
<li><a href="https://github.com/tkadauke/css_doc" target="_blank" rel="external">css_doc</a> 写注释用</li>
<li><a href="https://github.com/kneath/kss" target="_blank" rel="external">kss</a> 写注释用</li>
</ul>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>CSS写的好可以让网页瞬间高大上，但是再高大上的网站如果效率很低也不行，尤其是在近几年「用户体验」这个词烂大街以后。前两天自己写了几个页面的CSS，顺便拜读了很多关于CSS如何写的更好的文章，现在动手总结一下。</p>
<h2 id="权重">权重</h2><p>CSS中我个人觉得权重是个很需要掌握的概念。它决定哪一条样式将被应用在元素上，哪一条样式将被覆盖掉。众所周知，CSS选择器，最基本的有三种：</p>
<ul>
<li>id选择器</li>
<li>class选择器</li>
<li>标签选择器</li>
</ul>
<p>还有一种<strong>内联样式</strong>( inline-style )，是指直接在HTML代码中添加CSS样式。以上四种的权重顺序是：<strong>内联样式（1000）</strong> &gt; <strong>id选择器（100）</strong> &gt; <strong>class选择器（10）</strong> &gt; <strong>标签选择器（1）</strong>。括号内分别是它们的<strong>权重值</strong>！。举个栗子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color : #fff;"</span> <span class="attribute">id</span>=<span class="value">"example"</span> <span class="attribute">class</span>=<span class="value">"demo"</span>&gt;</span>栗子<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#example</span> <span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#000</span></span></span>;&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.dome</span> <span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>;&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">span</span> <span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value"> blue</span></span>;&#125;</span></span><br></pre></td></tr></table></figure>
<p>如果只有第四句来定义样式，则这个<code>&lt;span&gt;</code>是蓝色的，如果加上第三条语句，则变成了红色，第四句被覆盖掉了。如果用第二句，则变为黑色，第三句即被覆盖，以此类推如果用内联样式则<code>&lt;span&gt;</code>变成白色了。</p>
<p>像我这样的菜鸟刚开始滥用各类选择器，往往会出现想覆盖父元素样式的时候覆盖不了的情况，熟不知<strong>要想覆盖，必须让这条语句的权重值大于父元素</strong>（具体可以参考这篇文章<a href="http://www.w3cplus.com/css/css-specificity-things-you-should-know.html">你应该知道的一些事情——CSS权重</a>）。</p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://www.geekplux.com/tags/CSS/"/>
    
      <category term="Note" scheme="http://www.geekplux.com/tags/Note/"/>
    
      <category term="Summary" scheme="http://www.geekplux.com/tags/Summary/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/tags/Web/"/>
    
      <category term="总结" scheme="http://www.geekplux.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="笔记" scheme="http://www.geekplux.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Web" scheme="http://www.geekplux.com/categories/Web/"/>
    
      <category term="CSS" scheme="http://www.geekplux.com/categories/Web/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Goodbye，我的大学]]></title>
    <link href="http://www.geekplux.com/2014/02/02/goodbye_my_university.html"/>
    <id>http://www.geekplux.com/2014/02/02/goodbye_my_university.html</id>
    <published>2014-02-02T12:22:22.000Z</published>
    <updated>2015-01-04T11:48:29.000Z</updated>
    <content type="html"><![CDATA[<p>不知为何，现在写文章，第一句总想感叹一下时光流逝的速度，可能确实是年纪渐长……转眼已大四，伫立在象牙塔和江湖的十字路口，也是时候总结一下了。大学四年，不得不说是我成长最快的四年，也让我充分认识了上大学的必要性。第一次这么长时间跨度的总结，注定是篇长文。</p>
<h2 id="改变">改变</h2><h3 id="环境的改变">环境的改变</h3><p>环境对一个人的影响程度因人而异，但对我尤甚，因为我自制力太差。虽然当初我在走进校园大门的时已经做好了心理准备，但学校的堕落程度还是一次次刷新了我的底线。确实，在一个糟糕的环境里，<strong>合群 = 浪费时间</strong>。这并不是鼓励不合群，而是要学会<em>择其善者而从之</em>。在大一，加入学生会就是一个改变小环境的机会。在学生会两年的时间里，我认识了众多有想法的朋友。每个人都有值得我学习的地方，每次经历都让我懂得很多道理。在升为部长之后更是事事亲力亲为，希望以身作则（事必躬亲绝对是最渣的管理方式-_-||）。而当班长，也是希望能严于律己，推己及人。当时我还想和班里的每位同学都搞好关系，真是too young too simple。李开复曾说：</p>
<blockquote>
<p>用胸怀接受不能改变的事，用勇气改变可以改变的事，用智慧分辨两者的不同</p>
</blockquote>
<p>这句话，是我在大学前的暑假读到的，通俗易懂，着实是上好的鸡汤。听了导师的话，我大一大二没事就往图书馆跑，毕竟<strong>人丑就要多读书</strong>啊。一直到了大二末，我偶然得知学校有实验室这块宝地，于是心向往之。在ZW学姐（衷心感谢）的帮助下，我终于厚着脸皮混进了实验室。刚进去的两个月，绝对是我大学获取知识最密集的两个月；也是最孤独的两个月；还是最不浮躁的两个月。宿舍沦为了我睡觉的地方，翘课的频率呈指数增长，班里的同学也渐渐觉得我神出鬼没。这成了我大学生活的分水岭，后半段的大学我都是在实验室度过的。那段时间耳边总回响一句话「<em>如果不能忍受孤独，就不要追求梦想</em>」。</p>
<a id="more"></a>
<h3 id="眼界的改变">眼界的改变</h3><p>大一暑假，我的手机在打球时丢了。痛定思痛，我制定了一揽子购机计划……通过在网上搜各种机型的对比评测、导购，我突然对手机评测产生了极大的兴趣。小小手机，竟有这么多门道。果然刚需提升效率，短短两三天，我对手机的各项配置有了新的认识，当时还自己写了篇导购科普文，结果被专业人士喷是「伪科技」……在一堆牛人的指点下，我开始关注engadget、36kr等。这是我第一次针对某项事物进行大规模搜索：</p>
<ul>
<li>第一步横向搜索了解大概</li>
<li>第二步纵向搜索了解细节</li>
<li>第三步自己总结一个框架</li>
</ul>
<p>这三步让我可以很快的掌握一件事物的完整信息。</p>
<p>然而，这仅仅是个开始。貌似是在<a href="http://www.guao.hk/" target="_blank" rel="external">谷奥</a>，我得知了神器<strong>Google Reader</strong>，从此一发不可收拾。RSS让我知道了每天不停刷新那么多的Blog和BBS是多么浪费精力。我开始疯狂的订阅各种牛人博客，这个<a href="http://blog.csdn.net/csh624366188/article/details/8036565" target="_blank" rel="external">优秀有价值的博客收藏列表</a>上的大部分都纳入囊中。每天固定从早晨9点到10点，晚上9点到11点横扫更新的内容，多的时候，一天要看600多篇文章（主要是engadget等科技博客更新太频）。本来我的阅读速度还可以，但是为了在规定时间看完这么多，我强迫自己加快速度，不知不觉一个暑假下来，发现自己的速读能力又有了质的提高。</p>
<p>阅读量上来了，眼界也跟着提升，每每拜读各位牛人的博客，真心佩服的五体投地。尤其是<a href="http://mindhacks.cn/" target="_blank" rel="external">刘未鹏 | MIND HACKS</a>，我从晚上11点开始看，一直看到凌晨5点，酣畅淋漓，欲罢不能。他的<a href="http://mindhacks.cn/topics/learning-method/" target="_blank" rel="external">学习方法</a>和<a href="http://mindhacks.cn/topics/mind/" target="_blank" rel="external">思维方式</a>对我产生了很大的影响。我也效仿他不断的甄选RSS列表，最终留下的都是少有的干货博客，节省了大量时间。后来我还养成了把大牛博客翻个底朝天的习惯，感受他随年龄增长带来的思维变化，也是件很有趣的事。哦对了，<a href="http://book.douban.com/subject/4006425/" target="_blank" rel="external">《我是一只IT小小鸟》</a>这本小书也很有意思，给了我很多正能量，坚定了我后来参加各种比赛的方向……</p>
<p>良好的阅读习惯，促使我不断进步——学习新的语言，书写新的代码。进而发现所有的编程语言都是类似，重新学习一门语言只要对比两者异同就可以很快上手。但这毕竟是我闭门造车，非常局限。我想到个办法——参加比赛，这样就可以展示自己的学习成果，更重要的是能获得和高手交流的机会！13年我参加了四五场大大小小的比赛，虽然这些比赛在别人眼里不值一提，但还是给了我很大的冲击。名牌大学平时的课后作业水准都可以和我们课程设计相提并论了，而他们的大作业，比我们学校的毕业设计水准还高几个档次。更别提名校的教学深度、校内资料、人脉资源……所以之后和学弟学妹们说起来，我都让他们不要把目光局限在校内，因为比我们牛逼十倍的人还在疯狂地努力。</p>
<h2 id="塑造">塑造</h2><h3 id="三观的塑造">三观的塑造</h3><p>大学刚开始，我在QQ空间、人人、微博混，如今却在V2EX、知乎、豆瓣、果壳混……所混社区的进化，从一个侧面表现了我三观的进化。不同的人三观不同，同一个人不同年纪的三观也是千差万别。简单来说</p>
<ul>
<li>人生观——人这辈子理应怎样活 </li>
<li>价值观——人这辈子最珍贵的应该是什么</li>
<li>世界观——这个世界理应是怎样的</li>
</ul>
<p>我无法用语言描述出自己的三观，而<a href="http://baike.baidu.com/view/65027.htm?fr=ala0_1_1" target="_blank" rel="external">普鲁斯特问卷</a>恰巧可以帮我简单粗暴的罗列出来。对比我自己大一和大四的答案，相差甚远。</p>
<p>一个人的三观形成跟<strong>阅历</strong>有很大关系。古人「读万卷书，行万里路」无非就是这「阅、历」二字。而且三观的形成是长期潜移默化的结果，也许是看了一本书，也许是接触了一些人，也许是经历了一些事，往往在夜深人静的时候，人们会跳出繁复的生活，站在全新的高度审视所经历的一切，从而得到明悟。知道自己追求的是什么，又是如何看待这个世界和每一件事情。三观从浑浑噩噩渐渐变得清晰明朗。</p>
<p>但是由于<strong>「定势效应」、「首因效应」、「刻板效应」</strong>等，我们总是认定一件事情而难以改变。所以我们需要<strong>不断反省和思考那些由于我们自身的环境而逐渐形成的根深蒂固的观念</strong>，以达到重塑三观的目的。所以，三观就是用来毁的，底线就是用来刷的，节操就是用来捡的。有了新的认知，才能挣脱思维的枷锁，打破是非的局限。看看这个：<a href="http://www.zhihu.com/question/20618648" target="_blank" rel="external">你遇到过哪些让你眼前一亮、醍醐灌顶或对你改变很大的理念？</a></p>
<p>总体来说，我在大学三观塑造无非也是三个阶段：<strong>读——思——经历</strong></p>
<p><strong>读：</strong>刚进大学读的第一本对我三观影响挺大的书是<a href="http://book.douban.com/subject/2083981/" target="_blank" rel="external">《了凡四训》</a>，那时候对「三观」的概念还很模糊。但是这本书确实给了我为人处世上的一些明示，获益匪浅。每本书都会或多或少地影响我的三观，但我发现读史和读传记影响最大。因为写史和传记的人本身就已经是站在旁观者的角度去审视历史人物了，所以我吸收起来更直接。后来得到知乎的邀请码，作为早期用户，见识了各路大神无比犀利的观点。这些牛人总结出来的生活经验，相对史书传记来说又更直观。我还有个见识别人三观的癖好是看「非诚勿扰」。在没看过非诚前，我对这个相亲节目嗤之以鼻（这就是刻板效应）， 大三暑假偶然陪老妈看，先不论其节目的真实性，我发现它用短短的三条VCR分别讲述男嘉宾的生活、爱情、朋友。间接地把不同阶层、不同地域、不同学历人的三观展现了出来，让我大开眼界（请君莫笑）。</p>
<p><strong>思：</strong>见的多了发现有些道理我并没有真正明白。并不是别人告诉过我，我就真正懂了，我还得消化。我消化的过程貌似有三种，一是睡不着时的胡思乱想，这种消化的效果最不明显，可能一觉醒来就忘了。二是和别人聊人生聊理想时，思维的互换帮我瞬间明白原来书中所讲是这个意思！三是写作，这无疑是最好的消化方法。有时候我们苦思冥想的过程写下来便一目了然了。就像做数学题需要画图或演算，写下来是对思维的<strong>备忘</strong>。而且我们大脑和电脑一样都有个<strong>缓存区</strong>，绞尽脑汁的空想会把缓存耗尽，使我们在思维的原点不停绕圈子。而写在白纸上可以空出缓存区，我们就能进一步思考。比如这篇文章，写之前想到的大概只有三分之一，剩下的三分之二都是写的时候自己冒出来的。</p>
<p><strong>经历：</strong>写下来就真正领悟了吗？非也非也，<strong>只有亲身经历了才懂</strong>，我现在甚至觉得这句话概括了人活在世上的意义。而经历又有两种情况：</p>
<ul>
<li>一种是<em>主动经历</em>：所谓知易行难，道理人人都懂，故事谁都会说，但真正做起来却是无比艰难。DOTA里SF反身三连压，具体操作我也知道，可就是做不到，只能惊叹大神是如此的轻松写意。不去尝试，不走出自己的「Comfort Zone」，永远不能把道理内化成自己的一部分。践行自己的信条，也许会被推翻，也许更加笃信。改变一生的道理，从来不是别人教会的，实践才能出真知，<strong>「知行合一」</strong>一直是我想做到的。所以只要是能体验别样的生活，我都想去经历一遍。</li>
<li>另一种是<em>被动经历</em>：我们总会在经历一些事之后有「一夜长大」的顿悟，所以这里的顿悟并不是指单单的明白了这个道理，而是在经历过一些事情之后，获得了由本身驱动的强大自制力和主观能动力，使得自己推翻了自己原有的观念，或开始着手去做原本由于陋习而没有去坚持的东西。<strong>但这往往非惨痛的教训和巨大的痛苦所不能。</strong>也许是一场刻骨铭心的失恋，也许是一次苦不堪言的挫折。</li>
</ul>
<p>最后推荐：<a href="http://book.douban.com/subject/3532347/" target="_blank" rel="external">《金庸全集》</a>，绝对可正三观！</p>
<h3 id="能力的塑造">能力的塑造</h3><p>能力说白了是个虚的东西，无法量化描述。比如，协作能力，组织能力，管理能力，语言表达能力等等，你很难确切的判定这些能力的高低。然而，大学前两年，我每天泡在学生会就为了锻炼这些所谓的能力。回头想想可能也有收益，但是不大。这和人本身的品质、素质有关，一个真诚待人的人协作、组织能力自然强一些，一个有责任心的人管理能力自然强一些……我把这些能力归为<strong>软能力</strong>。而真正可以培养且急需培养的应该是<strong>硬能力</strong>，比如搜集资料的能力、中文速读能力、快速学习能力等。大学四年下来，我目前只有下面两个还做的可以。</p>
<ul>
<li>搜索能力</li>
</ul>
<p>善于搜索真的很重要，不要有事没事就问别人，不要甘做「伸手党」。搜索资料的过程也是一种思考的过程，<strong>知识的保留时间和你为获取它所付出的时间成正比！</strong></p>
<p>你平常是用Google还是百度？（必然是谷歌，百度只是测一下连上网没有）<br><br>你是否知道什么时候用Google什么时候用百度？（外事问Google，内事问百度）<br><br>你还知道什么搜索引擎？（<a href="https://duckduckgo.com/" target="_blank" rel="external">DuckDuckGo</a>）<br><br>你会真正的用Google吗？（<a href="http://www.zhihu.com/question/20161362" target="_blank" rel="external">如何用好 Google 等搜索引擎？</a>）</p>
<p>其实还有好多方面，比如善用wiki（百科），etao（购物）等垂直搜索。Google图片搜索也非常给力。期刊文献我一般是用<a href="http://scholar.google.com/schhp?hl=zh-CN" target="_blank" rel="external">Google学术</a>，当然国内还有Cnki知网、万方等等。</p>
<ul>
<li>速读能力</li>
</ul>
<p>现在是信息爆炸的时代，每天产生的资讯成千上万。为了不被世界变化的速度甩开，就要快速的获取各类新鲜资讯。这其中还需要一个非常重要的能力，就是<strong>信息的筛选和鉴别能力</strong>。什么是软文，什么是干货；什么是有效知识，什么是娱乐消遣。消遣的内容更要以加倍的速度看完，而专业和术语多的内容则不适合速读，要不然读过跟没读一样。总之，速读能力绝对是大学僧必备技能。</p>
<h2 id="缺陷">缺陷</h2><h3 id="专注力">专注力</h3><p>一般情况下，我的专注力为零，除非明天是deadline或是在做自己极其感兴趣的事……不管手头有什么工作总是不时的打开知乎、V2EX或微博看看，这大大的降低了效率。微博出来之前，我还偶尔写写日记或随笔，之后便很少了，表面上140字足够表达清楚我的意思，实际上却降低了我思考的深度。类似微博这种<strong>碎片化信息</strong>：</p>
<blockquote>
<p>要求一个人迅速在各种信息之间跳转，不要在任意一条信息上停留过多时间。又要求一个人尽可能快地消费一条信息，迅速咬住它，吸干其中的汁液，然后一口吐掉。最后，对于那些在微博上原创内容的人来说，微博要求你能在海量的信息碎片中做快速筛选，然后在两个原本没有关联的碎片中建立联系，并且把这种联系以巧妙漂亮的手法表达出来，于是可以赢得观众的欢呼和掌声。无需知道“为什么”，只需要不断判断“是什么”，然后把一系列“是什么”组合起来。所以，哪怕是最简单的逻辑也都被抛弃了。我在微博上呆的时间足够长，因此受到的影响也就足够重。（via@和菜头 <a href="http://www.huxiu.com/article/4892/" target="_blank" rel="external">值得一读</a>）</p>
</blockquote>
<p>当我读到此时就感觉是中了同一种毒。现在我每天规定自己在固定时间看微博和空间，运用<em>番茄工作法</em>提高效率，还算有点效果。知乎上有很多提高专注力的方法（<a href="http://www.zhihu.com/question/20883403" target="_blank" rel="external">如何做到长时间（4个小时以上）精神专注？</a>），关键还是靠自制力。一说起自制力，我就老泪纵横……</p>
<h3 id="执行力">执行力</h3><p>拖延症谁都有，怎么克服的资料网上汗牛充栋，但就是克服不了。就拿这篇总结来说吧，原定是元旦写的，没想到一直拖到现在才动笔。明知道有任务要完成，但就是无法让自己开始，而且在没开始的这段时间还带有焦虑感和负罪感，这简直是一种折磨。不过，<a href="http://v.youku.com/v_show/id_XNTk2NDI0NDg4.html" target="_blank" rel="external">罗辑思维：大家都有拖延症 </a>里说，拖延症是<strong>上境界</strong>的过程……好吧，不管怎样，拖延症还是弊大于利，我不求能克服它，只求能缩短我拖延的时间。提升执行力，让脑海里的想法付诸实践。</p>
<h2 id="展望">展望</h2><ul>
<li>English能力</li>
<li>写作能力</li>
<li>参与开源项目</li>
<li>独立思考</li>
<li>健康、信仰</li>
</ul>
<p>为什么不具体阐述要达到的目标呢，因为我知道一条定律：<strong>在天朝，只要说出来的事，有99%的概率做不成</strong>。</p>
<h2 id="总结">总结</h2><p>我一直觉得我是一个幸运的孩子，高中虽然没有认真学习，但是幸运地找到了人生的大方向，填志愿的时候专业栏全部都写了「计算机科学与技术」。信仰缺失、娱乐至死的年代里，拥有一个Dream也算是来自内心的指引。</p>
<p>而我的大学生活，也是丰富多彩，大一大二为学生会鞠躬尽瘁，大三大四在实验室与世隔绝。异地恋本地恋都谈了一次，有美好也有痛心；所有的评优奖项全部拿了一遍，只可惜奖学金太少；极品飞车全部刷通关；DOTA总有五人黑；代表自己、代表班级、代表学校都参赛过；赚到人生的第一桶金；做出人生的第一个作品；第一次喝吐；失恋去操场刷了15圈；沙滩上过通宵……基本上没什么遗憾，如果非要说遗憾的话：一没长胖，二没挂科……哈哈，Goodbye，我的大学！</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>不知为何，现在写文章，第一句总想感叹一下时光流逝的速度，可能确实是年纪渐长……转眼已大四，伫立在象牙塔和江湖的十字路口，也是时候总结一下了。大学四年，不得不说是我成长最快的四年，也让我充分认识了上大学的必要性。第一次这么长时间跨度的总结，注定是篇长文。</p>
<h2 id="改变">改变</h2><h3 id="环境的改变">环境的改变</h3><p>环境对一个人的影响程度因人而异，但对我尤甚，因为我自制力太差。虽然当初我在走进校园大门的时已经做好了心理准备，但学校的堕落程度还是一次次刷新了我的底线。确实，在一个糟糕的环境里，<strong>合群 = 浪费时间</strong>。这并不是鼓励不合群，而是要学会<em>择其善者而从之</em>。在大一，加入学生会就是一个改变小环境的机会。在学生会两年的时间里，我认识了众多有想法的朋友。每个人都有值得我学习的地方，每次经历都让我懂得很多道理。在升为部长之后更是事事亲力亲为，希望以身作则（事必躬亲绝对是最渣的管理方式-_-||）。而当班长，也是希望能严于律己，推己及人。当时我还想和班里的每位同学都搞好关系，真是too young too simple。李开复曾说：</p>
<blockquote>
<p>用胸怀接受不能改变的事，用勇气改变可以改变的事，用智慧分辨两者的不同</p>
</blockquote>
<p>这句话，是我在大学前的暑假读到的，通俗易懂，着实是上好的鸡汤。听了导师的话，我大一大二没事就往图书馆跑，毕竟<strong>人丑就要多读书</strong>啊。一直到了大二末，我偶然得知学校有实验室这块宝地，于是心向往之。在ZW学姐（衷心感谢）的帮助下，我终于厚着脸皮混进了实验室。刚进去的两个月，绝对是我大学获取知识最密集的两个月；也是最孤独的两个月；还是最不浮躁的两个月。宿舍沦为了我睡觉的地方，翘课的频率呈指数增长，班里的同学也渐渐觉得我神出鬼没。这成了我大学生活的分水岭，后半段的大学我都是在实验室度过的。那段时间耳边总回响一句话「<em>如果不能忍受孤独，就不要追求梦想</em>」。</p>]]>
    
    </summary>
    
      <category term="Life" scheme="http://www.geekplux.com/tags/Life/"/>
    
      <category term="Summary" scheme="http://www.geekplux.com/tags/Summary/"/>
    
      <category term="总结" scheme="http://www.geekplux.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="生活" scheme="http://www.geekplux.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="Life" scheme="http://www.geekplux.com/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何新建一个Cocos2d-x项目]]></title>
    <link href="http://www.geekplux.com/2013/10/17/create_cocos2d-x_project.html"/>
    <id>http://www.geekplux.com/2013/10/17/create_cocos2d-x_project.html</id>
    <published>2013-10-17T08:43:30.000Z</published>
    <updated>2015-08-04T08:59:19.000Z</updated>
    <content type="html"><![CDATA[<p>作为一名程序猿的，凡事都得从Hello World开始！接下来就由我来演示一遍如何创建一个Hello World项目。</p>
<p><strong>要想创建一个Cocos2d-x项目就必须有它的模板</strong>，如果你使用过Cocos2d-x2.1.4以前的版本就知道其官方自带有模板安装文件，所以你可以下载2.1.4以前的版本（如cocos2d-x 2.1.3），将cocos2d-x 2.1.3\template目录下的<code>msvc</code>文件夹复制到cocos2d-x 2.2.0\template下，再复制cocos2d-x 2.1.3目录下的文件<code>install-templates-msvc.bat</code>到cocos2d-x 2.2.0下，点击运行，结束后你就可以在VS2012的新建项目中发现有Cocos2d-x模板了。</p>
<p>但是新版的已经没有了，<strong>官方推荐用脚本新建项目</strong>。所以我们还是参照官方文档用最新的方法吧。一个脚本生成所有平台的项目文件，非常方便！</p>
<h2 id="准备"><strong>准备</strong></h2><ul>
<li>按照上一篇<a href="http://www.geekplux.com/2013/10/16/Windows8.1下Cocos2d-x环境搭建/" target="_blank" rel="external">《Windows8.1下Cocos2d-x环境搭建》</a>先搭建好环境</li>
<li>下载Python<a href="http://www.python.org/download/" target="_blank" rel="external">官网下载</a></li>
<li>安装Python：<br>一路next就行了，安装目录默认为 <code>C:\Python27\</code></li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AACocos2d-x%E9%A1%B9%E7%9B%AE%5CQQ%E5%9B%BE%E7%89%8720131017155948_%E5%89%AF%E6%9C%AC.jpg" alt=""></p>
<a id="more"></a>
<ul>
<li>配置环境变量：<br>这一步我相信大部分人都不陌生，新建变量名为 <code>PYTHON_HOME</code> 的系统变量，值为你Python的安装目录，如图：</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AACocos2d-x%E9%A1%B9%E7%9B%AE%5CQQ%E5%9B%BE%E7%89%8720131017160806_%E5%89%AF%E6%9C%AC.jpg" alt=""></p>
<p>然后编辑Path变量，在变量值最后加 <code>%PYTHON_HOME%</code> ，如果之前没分号记得加上（＃－.－）</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AACocos2d-x%E9%A1%B9%E7%9B%AE%5CQQ%E5%9B%BE%E7%89%8720131017161151_%E5%89%AF%E6%9C%AC.jpg" alt=""></p>
<p><em>为了检测是否配置成功，你可以在cmd中输入python，如果出现如下显示则配置成功。</em></p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AACocos2d-x%E9%A1%B9%E7%9B%AE%5CQQ%E5%9B%BE%E7%89%8720131017161225_%E5%89%AF%E6%9C%AC.jpg" alt=""></p>
<h2 id="步骤"><strong>步骤</strong></h2><ul>
<li>打开命令提示符（win+R，输入cmd，回车），切换到你Cocos2d-x目录所在盘符（我的是D）， <code>D:</code></li>
<li>输入 <code>cd D:\cocos2dx_2.2.0\tools\project-creator</code>  进入 <code>create_project.py</code> 脚本所在目录。</li>
<li>输入 <code>python create_project.py -project HelloWorld -package com.cocos2dx.org -language cpp</code> 运行脚本，生成Hello World项目，其中HelloWorld为<strong>工程名</strong>，com.cocos2dx.org为<strong>android版本取的包标识名</strong>。这两处你可以自己修改。</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AACocos2d-x%E9%A1%B9%E7%9B%AE%5CQQ%E5%9B%BE%E7%89%8720131017161406_%E5%89%AF%E6%9C%AC.jpg" alt=""></p>
<p>然后你就可以在 D:\cocos2dx_2.2.0\projects 路径下找到你刚才新建的项目了，目录如下图 ：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AACocos2d-x%E9%A1%B9%E7%9B%AE%5CQQ%E5%9B%BE%E7%89%8720131017161456_%E5%89%AF%E6%9C%AC.jpg" alt=""></p>
<ul>
<li>打开目录，运行HelloWorld.sln。</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AACocos2d-x%E9%A1%B9%E7%9B%AE%5CQQ%E5%9B%BE%E7%89%8720131017161637_%E5%89%AF%E6%9C%AC.jpg" alt=""><br><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AACocos2d-x%E9%A1%B9%E7%9B%AE%5CQQ%E5%9B%BE%E7%89%8720131017161912.jpg" alt=""></p>
<p>至此，熟悉的几个大字Hello World映入眼帘，证明运行成功！接下来就可以开始你的Cocos2d-x游戏开发之旅了！~(￣▽￣)~</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>作为一名程序猿的，凡事都得从Hello World开始！接下来就由我来演示一遍如何创建一个Hello World项目。</p>
<p><strong>要想创建一个Cocos2d-x项目就必须有它的模板</strong>，如果你使用过Cocos2d-x2.1.4以前的版本就知道其官方自带有模板安装文件，所以你可以下载2.1.4以前的版本（如cocos2d-x 2.1.3），将cocos2d-x 2.1.3\template目录下的<code>msvc</code>文件夹复制到cocos2d-x 2.2.0\template下，再复制cocos2d-x 2.1.3目录下的文件<code>install-templates-msvc.bat</code>到cocos2d-x 2.2.0下，点击运行，结束后你就可以在VS2012的新建项目中发现有Cocos2d-x模板了。</p>
<p>但是新版的已经没有了，<strong>官方推荐用脚本新建项目</strong>。所以我们还是参照官方文档用最新的方法吧。一个脚本生成所有平台的项目文件，非常方便！</p>
<h2 id="准备"><strong>准备</strong></h2><ul>
<li>按照上一篇<a href="http://www.geekplux.com/2013/10/16/Windows8.1下Cocos2d-x环境搭建/">《Windows8.1下Cocos2d-x环境搭建》</a>先搭建好环境</li>
<li>下载Python<a href="http://www.python.org/download/">官网下载</a></li>
<li>安装Python：<br>一路next就行了，安装目录默认为 <code>C:\Python27\</code></li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AACocos2d-x%E9%A1%B9%E7%9B%AE%5CQQ%E5%9B%BE%E7%89%8720131017155948_%E5%89%AF%E6%9C%AC.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="Cocos2d-x" scheme="http://www.geekplux.com/tags/Cocos2d-x/"/>
    
      <category term="Game Development" scheme="http://www.geekplux.com/tags/Game-Development/"/>
    
      <category term="Guide" scheme="http://www.geekplux.com/tags/Guide/"/>
    
      <category term="入门" scheme="http://www.geekplux.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="游戏开发" scheme="http://www.geekplux.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Cocos2d-x" scheme="http://www.geekplux.com/categories/Cocos2d-x/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows8.1下Cocos2d-x环境搭建]]></title>
    <link href="http://www.geekplux.com/2013/10/16/cocos2d-x_environment_build.html"/>
    <id>http://www.geekplux.com/2013/10/16/cocos2d-x_environment_build.html</id>
    <published>2013-10-16T09:54:30.000Z</published>
    <updated>2015-08-04T08:58:46.000Z</updated>
    <content type="html"><![CDATA[<p>Cocos2d-x是一个开源的2d游戏引擎，基于Cocos2d-iPhone设计，MIT许可证下发布。其最明显的特点是<strong>跨平台</strong>，只需要编写一次代码，就可以无缝地部署在包括iOS、Android、Windows、OSX在内的许多主流游戏平台上。在移动终端多样化的今天，跨平台是大势所趋。接下来开始正题：如何搭建Cocos2d-x开发环境。</p>
<h2 id="准备"><strong>准备</strong></h2><ul>
<li>正确安装Visual Studio 2012（2010也可以，以下简称VS）</li>
<li>官网<a href="http://www.cocos2d-x.org/download" target="_blank" rel="external">下载Cocos2d-x</a>（本文使用的是C++2.2版本）</li>
</ul>
<h2 id="步骤"><strong>步骤</strong></h2><ul>
<li>解压Cocos2d-x压缩包：将下好的引擎解压到你认为合适的地方，比如说D盘或者E盘。</li>
<li>打开解压后的Cocos2d-x引擎的目录，可看到如下文件：</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CWindows8.1%E4%B8%8BCocos2d-x%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%5CQQ%E5%9B%BE%E7%89%8720131016170507.jpg" alt=""></p>
<p>如果你装的是VS2010，则打开cocos2d-win32.vc2010.sln；如果你装的是VS2012，则打开cocos2d-win32.vc2012.sln，如上图红色框表示的。此时会自动打开VS2012（或VS2010），稍等片刻后你会看到Cocos2d-x自带的例子都已经自动加载到VS的工程目录下了。如下图：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CWindows8.1%E4%B8%8BCocos2d-x%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%5CQQ%E5%9B%BE%E7%89%8720131016215353_%E5%89%AF%E6%9C%AC.jpg" alt=""></p>
<a id="more"></a>
<ul>
<li>加载完毕后，在Solution ‘cocos2d-win32.vc2012’ （解决方案） 处右击鼠标，选择“Build solution”(生成解决方案)，如下图：</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CWindows8.1%E4%B8%8BCocos2d-x%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%5CQQ%E5%9B%BE%E7%89%8720131016213126.jpg" alt=""></p>
<p>第一次编译会需要较长时间，请耐心等待。</p>
<ul>
<li>等全部编译完后，环境基本算是搭好了，可以运行Cocos2d-x自带的例子看一下：右击TestCpp —&gt; 设为启动项目  —&gt; Ctrl+F5（还有另一种方式）</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CWindows8.1%E4%B8%8BCocos2d-x%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%5CQQ%E5%9B%BE%E7%89%8720131016172327_%E5%89%AF%E6%9C%AC.jpg" alt=""></p>
<p>如果之前的步骤都没有错，那么这时Cocos2d-x自带的Demo就会跑起来，你会看到如下所示画面：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CWindows8.1%E4%B8%8BCocos2d-x%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%5CQQ%E5%9B%BE%E7%89%8720131016172443.jpg" alt=""></p>
<p>当然你还可以这样运行，这次换HelloCpp：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CWindows8.1%E4%B8%8BCocos2d-x%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%5CQQ%E5%9B%BE%E7%89%8720131016172502_%E5%89%AF%E6%9C%AC.jpg" alt=""></p>
<p>如果前面的步骤都没有错，会出现如下画面：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CWindows8.1%E4%B8%8BCocos2d-x%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%5CQQ%E5%9B%BE%E7%89%8720131016214249.jpg" alt=""></p>
<p>至此，开发环境就算搭建成功了，下篇来介绍如何创建一个新项目，就是广为人知的Hello World！<a href="http://www.geekplux.com/2013/10/17/如何新建一个Cocos2d-x项目/" target="_blank" rel="external">如何新建一个Cocos2d-x项目</a></p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Cocos2d-x是一个开源的2d游戏引擎，基于Cocos2d-iPhone设计，MIT许可证下发布。其最明显的特点是<strong>跨平台</strong>，只需要编写一次代码，就可以无缝地部署在包括iOS、Android、Windows、OSX在内的许多主流游戏平台上。在移动终端多样化的今天，跨平台是大势所趋。接下来开始正题：如何搭建Cocos2d-x开发环境。</p>
<h2 id="准备"><strong>准备</strong></h2><ul>
<li>正确安装Visual Studio 2012（2010也可以，以下简称VS）</li>
<li>官网<a href="http://www.cocos2d-x.org/download">下载Cocos2d-x</a>（本文使用的是C++2.2版本）</li>
</ul>
<h2 id="步骤"><strong>步骤</strong></h2><ul>
<li>解压Cocos2d-x压缩包：将下好的引擎解压到你认为合适的地方，比如说D盘或者E盘。</li>
<li>打开解压后的Cocos2d-x引擎的目录，可看到如下文件：</li>
</ul>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CWindows8.1%E4%B8%8BCocos2d-x%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%5CQQ%E5%9B%BE%E7%89%8720131016170507.jpg" alt=""></p>
<p>如果你装的是VS2010，则打开cocos2d-win32.vc2010.sln；如果你装的是VS2012，则打开cocos2d-win32.vc2012.sln，如上图红色框表示的。此时会自动打开VS2012（或VS2010），稍等片刻后你会看到Cocos2d-x自带的例子都已经自动加载到VS的工程目录下了。如下图：</p>
<p><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5CWindows8.1%E4%B8%8BCocos2d-x%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%5CQQ%E5%9B%BE%E7%89%8720131016215353_%E5%89%AF%E6%9C%AC.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="Cocos2d-x" scheme="http://www.geekplux.com/tags/Cocos2d-x/"/>
    
      <category term="Development Environment" scheme="http://www.geekplux.com/tags/Development-Environment/"/>
    
      <category term="Game Development" scheme="http://www.geekplux.com/tags/Game-Development/"/>
    
      <category term="Guide" scheme="http://www.geekplux.com/tags/Guide/"/>
    
      <category term="入门" scheme="http://www.geekplux.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="开发环境" scheme="http://www.geekplux.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
      <category term="游戏开发" scheme="http://www.geekplux.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Cocos2d-x" scheme="http://www.geekplux.com/categories/Cocos2d-x/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发如何入门]]></title>
    <link href="http://www.geekplux.com/2013/09/02/android_get_started.html"/>
    <id>http://www.geekplux.com/2013/09/02/android_get_started.html</id>
    <published>2013-09-02T08:34:30.000Z</published>
    <updated>2015-08-04T08:58:26.000Z</updated>
    <content type="html"><![CDATA[<p>这是我在知乎上的一个回答（<a href="http://www.zhihu.com/question/21565227/answer/18691177" target="_blank" rel="external">原文链接</a>）</p>
<hr>
<p>绝大部分人说<a href="http://developer.android.com/guide/components/index.html" target="_blank" rel="external">官方文档和范例</a>是最好的教程，如果你英语好，且有Java和XML基础，那按照官方的<a href="http://developer.android.com/training/index.html" target="_blank" rel="external">Training</a>一路下来就算<strong>入门</strong>了。</p>
<p>如果英语不好，可以看一些视频入门，如Mars的《<a href="http://www.marschen.com/forum.php?mod=forumdisplay&amp;fid=2" target="_blank" rel="external">Android视频教程</a>》的。最起码得先把开发平台搭建起来吧。再结合视频做一些小练习，最基础的布局先练好，不要急。</p>
<p>当然，看视频的话虽然通俗易懂，但是进度可能比较慢（即使我视频调至2倍速看），所以必须结合看书。但是，市面上的书大部分都跟不上Android最新的脚步。<br>不过还是推荐两本：</p>
<ul>
<li>李刚的《<a href="http://www.amazon.cn/%E7%96%AF%E7%8B%82Android%E8%AE%B2%E4%B9%89-%E6%9D%8E%E5%88%9A/dp/B00BSXRLR8/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1378109085&amp;sr=1-1&amp;keywords=android" target="_blank" rel="external">疯狂Android讲义</a>》，此书大而全。</li>
<li>《<a href="http://www.amazon.cn/Google-Android-SDK%E5%BC%80%E5%8F%91%E8%8C%83%E4%BE%8B%E5%A4%A7%E5%85%A8-%E4%BD%98%E5%BF%97%E9%BE%99/dp/B00647RV78/ref=sr_1_11?s=books&amp;ie=UTF8&amp;qid=1378109085&amp;sr=1-11&amp;keywords=android" target="_blank" rel="external">Google Android SDK开发范例大全(第3版)</a>》，此书可以照着练（不要ctrlc+ctrlv）。</li>
</ul>
<p>对了，现在还有更新颖的学习方式，可以<strong>在线互动编程学习</strong>（<a href="http://www.fenby.com/learn/courseUnits/6" target="_blank" rel="external">Android开发 | Fenby.com</a>），你可以尝试一下。</p>
<p>总体来说，书都比较落后，Android学习主要还是靠网络。入门是最关键的，入门之后相信你自己也会找资源了。然后可以启动<strong>以项目为导向</strong>的学习方式，用到什么学什么，这样最快。但是，快并不是浮躁，别想一口气吃成胖子。况且，一入IT深似海。。。不扯淡了-_-。</p>
<a id="more"></a>
<p>其他参考：</p>
<ul>
<li>StackOverFlow的Android Tag（<a href="http://stackoverflow.com/questions/tagged/android" target="_blank" rel="external">Newest ‘android’ Questions</a>）</li>
<li>GitHub搜Android（<a href="https://github.com/search?q=android&amp;ref=cmdform" target="_blank" rel="external">Search android</a>）</li>
<li>Google Code上的优秀APP源码（<a href="https://code.google.com/intl/zh-CN/" target="_blank" rel="external">Google 代码</a>）</li>
<li>直接拿来用的Android开源代码（<a href="http://www.csdn.net/article/2013-05-21/2815370-Android-open-source-projects-finale" target="_blank" rel="external">最火的Android开源项目（完结篇）</a>）</li>
<li><a href="http://wikidroid.sinaapp.com/%E9%A6%96%E9%A1%B5" target="_blank" rel="external">Android中文Wiki</a></li>
<li>Android设计指南非官方简体中文版（<a href="http://www.apkbus.com/design/index.html" target="_blank" rel="external">Android Design</a>）</li>
<li>Android开发者社区（<a href="http://android.eoe.cn/" target="_blank" rel="external">Android开发 - 安卓开发</a>）</li>
<li>CSDN上的优秀博客和牛人（<a href="http://www.csdn.net/article/2011-08-30/303833" target="_blank" rel="external">Android系列开发博客资源汇总</a>），比如这位<a href="http://blog.csdn.net/Luoshengyang" target="_blank" rel="external">老罗的Android之旅</a></li>
</ul>
<p>我现在也在慢慢学习和摸索中，望共同进步。</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是我在知乎上的一个回答（<a href="http://www.zhihu.com/question/21565227/answer/18691177">原文链接</a>）</p>
<hr>
<p>绝大部分人说<a href="http://developer.android.com/guide/components/index.html">官方文档和范例</a>是最好的教程，如果你英语好，且有Java和XML基础，那按照官方的<a href="http://developer.android.com/training/index.html">Training</a>一路下来就算<strong>入门</strong>了。</p>
<p>如果英语不好，可以看一些视频入门，如Mars的《<a href="http://www.marschen.com/forum.php?mod=forumdisplay&amp;fid=2">Android视频教程</a>》的。最起码得先把开发平台搭建起来吧。再结合视频做一些小练习，最基础的布局先练好，不要急。</p>
<p>当然，看视频的话虽然通俗易懂，但是进度可能比较慢（即使我视频调至2倍速看），所以必须结合看书。但是，市面上的书大部分都跟不上Android最新的脚步。<br>不过还是推荐两本：</p>
<ul>
<li>李刚的《<a href="http://www.amazon.cn/%E7%96%AF%E7%8B%82Android%E8%AE%B2%E4%B9%89-%E6%9D%8E%E5%88%9A/dp/B00BSXRLR8/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1378109085&amp;sr=1-1&amp;keywords=android">疯狂Android讲义</a>》，此书大而全。</li>
<li>《<a href="http://www.amazon.cn/Google-Android-SDK%E5%BC%80%E5%8F%91%E8%8C%83%E4%BE%8B%E5%A4%A7%E5%85%A8-%E4%BD%98%E5%BF%97%E9%BE%99/dp/B00647RV78/ref=sr_1_11?s=books&amp;ie=UTF8&amp;qid=1378109085&amp;sr=1-11&amp;keywords=android">Google Android SDK开发范例大全(第3版)</a>》，此书可以照着练（不要ctrlc+ctrlv）。</li>
</ul>
<p>对了，现在还有更新颖的学习方式，可以<strong>在线互动编程学习</strong>（<a href="http://www.fenby.com/learn/courseUnits/6">Android开发 | Fenby.com</a>），你可以尝试一下。</p>
<p>总体来说，书都比较落后，Android学习主要还是靠网络。入门是最关键的，入门之后相信你自己也会找资源了。然后可以启动<strong>以项目为导向</strong>的学习方式，用到什么学什么，这样最快。但是，快并不是浮躁，别想一口气吃成胖子。况且，一入IT深似海。。。不扯淡了-_-。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://www.geekplux.com/tags/Android/"/>
    
      <category term="Development" scheme="http://www.geekplux.com/tags/Development/"/>
    
      <category term="Guide" scheme="http://www.geekplux.com/tags/Guide/"/>
    
      <category term="入门" scheme="http://www.geekplux.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Android" scheme="http://www.geekplux.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何绑定独立域名]]></title>
    <link href="http://www.geekplux.com/2013/08/10/bind_domain.html"/>
    <id>http://www.geekplux.com/2013/08/10/bind_domain.html</id>
    <published>2013-08-10T10:18:11.000Z</published>
    <updated>2015-08-04T08:58:37.000Z</updated>
    <content type="html"><![CDATA[<p>前天把博客搭好之后总觉得得搞个独立域名才算「高端大气上档次」。今天把绑定的经验分享一下。</p>
<hr>
<h2 id="购买域名"><strong>购买域名</strong></h2><p>域名，就是你网站的网址（标识和入口），比如我的是geekplux.com。不是说没有这一串字母就不能访问你的网站，只是用IP访问的话，谁愿意记那一堆数字。相比之下，还是记字母简单。</p>
<p>免费的域名有很多，但是免费的顶级域名真不多。据我所知，<code>.tk</code>是很不错的。如果你决定要长期写下去，也想让别人独一无二的网址访问你的博客，那还是买一个吧。</p>
<p>域名提供商很多，国内有<a href="http://www.net.cn/" target="_blank" rel="external">万网</a>等，国外有<a href="http://www.name.com/" target="_blank" rel="external">name</a>、<a href="http://www.godaddy.com/" target="_blank" rel="external">GoDaddy</a>等。不过还是推荐你购买国外厂商的，因为国内要备案，提交各种材料等审核（<em>国外难道没有监管机制吗？呆在天朝就是安全</em>），我们只是为了有个博客，没必要这么兴师动众的。我用的是GoDaddy的，因为可以用支付宝支付。买的时候看个人喜好，我用的是<code>.com</code>的，也有人追求个性用<code>.me</code>、<code>.us</code>等（不信可以搜 www.fuck.me ）。不推荐<code>.info</code>的，以这个结尾的大部分是垃圾网站，容易被搜索引擎屏蔽，我想宅男都懂。</p>
<p>在GoDaddy选好你的域名之后，一路点continue，到支付页面选支付宝，价钱跟你域名的好坏有关了（BTW，我在支付前特地Google了一下GoDaddy有没有优惠，结果真搜到了GoDaddy的优惠码，6折买的）。。。接下来要将你的域名和IP绑定起来，这里涉及到一个叫<strong>DNS</strong>的东西。</p>
<a id="more"></a>
<h2 id="配置DNS"><strong>配置DNS</strong></h2><p>DNS可以理解成一个专门破译密码的侦探，把你的域名解析成IP地址，所以只要把你刚买的域名在DNS里设置成指向你的IP，别人就能通过域名访问你的网站了。DNS具体的工作方式太复杂，我是小白，讲不清楚。</p>
<p>GoDaddy默认提供了DNS服务，但是很不稳定，具体原因。。。这个。。。在天朝我还是不要说了吧。。。既然如此，得另选个DNS服务了，穷屌丝总喜欢用免费的东西，于是我打算用<a href="https://www.dnspod.cn/" target="_blank" rel="external">DNSPod</a>，虽然是免费，但是谁用谁知道。以下是设置步骤：</p>
<h3 id="一、先在GoDaddy里设置"><strong>一、先在GoDaddy里设置</strong></h3><ol>
<li>登录 <a href="http://www.godaddy.com" target="_blank" rel="external">http://www.godaddy.com</a></li>
<li><p>登录后，选择【My Account】，然后单击【DOMAINS】后的【Launch】<br><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D%5Cgodaddy_1.jpg" alt=""></p>
</li>
<li><p>在域名列表中找到要修改要修改DNS的域名，然后点击该域名后的下拉图标（如下图所示），然后点击下拉列表中的 【Set NameServers】<br><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D%5Cgodaddy_2.jpg" alt=""></p>
</li>
<li><p>选择【Custom】 ，然后点击右下角的Add Nameserver<br><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D%5CQQ%E5%9B%BE%E7%89%8720130810233021.jpg" alt=""></p>
</li>
<li><p>输入DNSPod的2个DNS短地址（对应6台服务器），然后点击【Add】，再点击【Save】即可。<br>f1g1ns1.dnspod.net<br>f1g1ns2.dnspod.net<br><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D%5Cgodaddy_4.jpg" alt=""></p>
</li>
<li><p>点击保存，等待全球递归DNS服务器刷新（最多72小时）。<br><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D%5CQQ%E5%9B%BE%E7%89%8720130810233128.jpg" alt=""></p>
</li>
</ol>
<h3 id="二、再在DNSPod里设置"><strong>二、再在DNSPod里设置</strong></h3><p>在【我的域名】页面，点击【添加记录】，然后设置成如下图所示就行了。<br><img src="http://7b1evr.com1.z0.glb.clouddn.com/illustration%5C%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D%5C67668a0fjw1e4w9xigzx6j20mc07n756.jpg" alt=""></p>
<hr>
<p>如果一切顺利的话，你就可以在你浏览器的地址栏里华丽的输入你的网址来访问你的网站了。加上上一篇<a href="http://www.geekplux.com/2013/08/08/写博客就用FarBox/" target="_blank" rel="external">写博客就用FarBox</a>基本上一个博客就成形了。认真的话几个小时就全部搞定了。没基础的同学可以多去Google一下（什么时候用Google什么时候用百度自己脑补吧）。送大家一句话，多Google，不费电(￣︶￣)。</p>
<hr>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议</a>进行许可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前天把博客搭好之后总觉得得搞个独立域名才算「高端大气上档次」。今天把绑定的经验分享一下。</p>
<hr>
<h2 id="购买域名"><strong>购买域名</strong></h2><p>域名，就是你网站的网址（标识和入口），比如我的是geekplux.com。不是说没有这一串字母就不能访问你的网站，只是用IP访问的话，谁愿意记那一堆数字。相比之下，还是记字母简单。</p>
<p>免费的域名有很多，但是免费的顶级域名真不多。据我所知，<code>.tk</code>是很不错的。如果你决定要长期写下去，也想让别人独一无二的网址访问你的博客，那还是买一个吧。</p>
<p>域名提供商很多，国内有<a href="http://www.net.cn/">万网</a>等，国外有<a href="http://www.name.com/">name</a>、<a href="http://www.godaddy.com/">GoDaddy</a>等。不过还是推荐你购买国外厂商的，因为国内要备案，提交各种材料等审核（<em>国外难道没有监管机制吗？呆在天朝就是安全</em>），我们只是为了有个博客，没必要这么兴师动众的。我用的是GoDaddy的，因为可以用支付宝支付。买的时候看个人喜好，我用的是<code>.com</code>的，也有人追求个性用<code>.me</code>、<code>.us</code>等（不信可以搜 www.fuck.me ）。不推荐<code>.info</code>的，以这个结尾的大部分是垃圾网站，容易被搜索引擎屏蔽，我想宅男都懂。</p>
<p>在GoDaddy选好你的域名之后，一路点continue，到支付页面选支付宝，价钱跟你域名的好坏有关了（BTW，我在支付前特地Google了一下GoDaddy有没有优惠，结果真搜到了GoDaddy的优惠码，6折买的）。。。接下来要将你的域名和IP绑定起来，这里涉及到一个叫<strong>DNS</strong>的东西。</p>]]>
    
    </summary>
    
      <category term="Blog" scheme="http://www.geekplux.com/tags/Blog/"/>
    
      <category term="Discovery" scheme="http://www.geekplux.com/tags/Discovery/"/>
    
      <category term="Domain" scheme="http://www.geekplux.com/tags/Domain/"/>
    
      <category term="FarBox" scheme="http://www.geekplux.com/tags/FarBox/"/>
    
      <category term="Tool" scheme="http://www.geekplux.com/tags/Tool/"/>
    
      <category term="博客" scheme="http://www.geekplux.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="域名" scheme="http://www.geekplux.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
      <category term="工具" scheme="http://www.geekplux.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Tool" scheme="http://www.geekplux.com/categories/Tool/"/>
    
      <category term="FarBox" scheme="http://www.geekplux.com/categories/Tool/FarBox/"/>
    
  </entry>
  
</feed>